{"version":3,"file":"js/app.939fa8aa.js","mappings":"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","sources":["webpack://llm-mini-frontend/./src/utils/questionJudge.js","webpack://llm-mini-frontend/./src/App.vue","webpack://llm-mini-frontend/./src/App.vue?7ccd","webpack://llm-mini-frontend/./src/views/Home.vue","webpack://llm-mini-frontend/./src/components/SearchResultPopup.vue","webpack://llm-mini-frontend/./src/components/SearchResultPopup.vue?f636","webpack://llm-mini-frontend/./src/components/LanggraphContainer.vue","webpack://llm-mini-frontend/./src/components/LanggraphContainer.vue?0b2d","webpack://llm-mini-frontend/./src/components/MessageList.vue","webpack://llm-mini-frontend/./src/components/MessageList.vue?2e85","webpack://llm-mini-frontend/./src/components/ChatInput.vue","webpack://llm-mini-frontend/./src/components/ChatInput.vue?b265","webpack://llm-mini-frontend/./src/composables/useLanggraph.js","webpack://llm-mini-frontend/./src/composables/useMessages.js","webpack://llm-mini-frontend/./src/composables/useSSE.js","webpack://llm-mini-frontend/./src/composables/useScroll.js","webpack://llm-mini-frontend/./src/utils/sseMessageHandler.js","webpack://llm-mini-frontend/./src/utils/langGraphExecutor.js","webpack://llm-mini-frontend/./src/utils/additionalQuestionHandler.js","webpack://llm-mini-frontend/./src/utils/conversationRestorer.js","webpack://llm-mini-frontend/./src/utils/messageStorage.js","webpack://llm-mini-frontend/./src/views/Home.vue?9051","webpack://llm-mini-frontend/./src/views/ChatHistory.vue","webpack://llm-mini-frontend/./src/views/ChatHistory.vue?cffe","webpack://llm-mini-frontend/./src/main.js","webpack://llm-mini-frontend/webpack/bootstrap","webpack://llm-mini-frontend/webpack/runtime/chunk loaded","webpack://llm-mini-frontend/webpack/runtime/define property getters","webpack://llm-mini-frontend/webpack/runtime/global","webpack://llm-mini-frontend/webpack/runtime/hasOwnProperty shorthand","webpack://llm-mini-frontend/webpack/runtime/make namespace object","webpack://llm-mini-frontend/webpack/runtime/jsonp chunk loading","webpack://llm-mini-frontend/webpack/startup"],"sourcesContent":["/**\r\n * 질문 유형 판별 및 분기 처리 유틸리티\r\n * 최초 질문과 추가 질문을 구분하여 적절한 API 엔드포인트로 라우팅\r\n */\r\n\r\n/**\r\n * 질문이 최초 질문인지 추가 질문인지 판별\r\n * @param {string} question - 사용자 질문\r\n * @param {number|null} conversationId - 대화 ID (null이면 새 대화)\r\n * @param {Array} conversationHistory - 대화 히스토리 (선택사항)\r\n * @returns {Object} 판별 결과\r\n */\r\nexport function judgeQuestionType(question, conversationId, conversationHistory = []) {\r\n    // console.log('[QUESTION_JUDGE] 질문 유형 판별 시작');\r\n    // console.log('[QUESTION_JUDGE] - 질문:', question);\r\n    // console.log('[QUESTION_JUDGE] - 대화 ID:', conversationId);\r\n    // console.log('[QUESTION_JUDGE] - 히스토리 길이:', conversationHistory.length);\r\n\r\n    // 1. conversationId가 null이거나 undefined면 새 대화 (최초 질문)\r\n    if (!conversationId) {\r\n        // console.log('[QUESTION_JUDGE] ✅ 새 대화 - 최초 질문으로 판별');\r\n        return {\r\n            isFirstQuestion: true,\r\n            questionType: 'first',\r\n            apiEndpoint: '/api/langgraph/stream',\r\n            reason: '새 대화'\r\n        };\r\n    }\r\n\r\n    // 2. 대화 히스토리가 비어있으면 최초 질문\r\n    if (!conversationHistory || conversationHistory.length === 0) {\r\n        console.log('[QUESTION_JUDGE] ✅ 빈 히스토리 - 최초 질문으로 판별');\r\n        return {\r\n            isFirstQuestion: true,\r\n            questionType: 'first',\r\n            apiEndpoint: '/api/langgraph/stream',\r\n            reason: '빈 대화 히스토리'\r\n        };\r\n    }\r\n\r\n    // 3. conversationId가 있고 대화 히스토리가 있으면 추가 질문\r\n    // (LangGraph 정보 유무와 관계없이 기존 대화가 있으면 추가 질문)\r\n    console.log('[QUESTION_JUDGE] ✅ 기존 대화 존재 - 추가 질문으로 판별');\r\n    console.log('[QUESTION_JUDGE] - 대화 ID:', conversationId);\r\n    console.log('[QUESTION_JUDGE] - 히스토리 메시지 수:', conversationHistory.length);\r\n    \r\n    return {\r\n        isFirstQuestion: false,\r\n        questionType: 'followup',\r\n        apiEndpoint: '/api/normal_llm/langgraph/followup/stream',\r\n        reason: '기존 대화의 추가 질문'\r\n    };\r\n}\r\n\r\n/**\r\n * 질문을 적절한 API 엔드포인트로 전송\r\n * @param {string} question - 사용자 질문\r\n * @param {number|null} conversationId - 대화 ID\r\n * @param {Array} conversationHistory - 대화 히스토리\r\n * @param {Object} options - 추가 옵션\r\n * @returns {Promise} API 응답\r\n */\r\nexport async function sendQuestionToAppropriateEndpoint(question, conversationId, conversationHistory = [], options = {}) {\r\n    console.log('[QUESTION_ROUTER] 질문 라우팅 시작');\r\n    \r\n    // 질문 유형 판별\r\n    const judgment = judgeQuestionType(question, conversationId, conversationHistory);\r\n    \r\n    console.log('[QUESTION_ROUTER] 판별 결과:', judgment);\r\n    \r\n    // API 요청 데이터 구성\r\n    const requestData = {\r\n        question: question,\r\n        conversation_id: conversationId,\r\n        generate_image: options.generateImage || false,\r\n        include_langgraph_context: !judgment.isFirstQuestion, // 추가 질문일 때만 컨텍스트 포함\r\n        langgraph_context: !judgment.isFirstQuestion ? {\r\n            documents: conversationHistory\r\n                .filter(msg => msg.langgraph_result?.documents)\r\n                .flatMap(msg => msg.langgraph_result.documents)\r\n                .slice(0, 5) // 최대 5개 문서만\r\n        } : null\r\n    };\r\n\r\n    console.log('[QUESTION_ROUTER] 요청 데이터:', requestData);\r\n    console.log('[QUESTION_ROUTER] API 엔드포인트:', judgment.apiEndpoint);\r\n\r\n    try {\r\n        // 적절한 엔드포인트로 요청 전송\r\n        const response = await fetch(judgment.apiEndpoint, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token') || ''}`\r\n            },\r\n            body: JSON.stringify(requestData)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        console.log('[QUESTION_ROUTER] ✅ API 요청 성공');\r\n        \r\n        return {\r\n            response: response,\r\n            judgment: judgment,\r\n            requestData: requestData\r\n        };\r\n\r\n    } catch (error) {\r\n        console.error('[QUESTION_ROUTER] ❌ API 요청 실패:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * 대화 히스토리에서 LangGraph 정보 추출\r\n * @param {Array} conversationHistory - 대화 히스토리\r\n * @returns {Object} LangGraph 컨텍스트\r\n */\r\nexport function extractLangGraphContext(conversationHistory) {\r\n    console.log('[CONTEXT_EXTRACTOR] LangGraph 컨텍스트 추출 시작');\r\n    \r\n    const context = {\r\n        documents: [],\r\n        keywords: [],\r\n        hasSearchResults: false\r\n    };\r\n\r\n    if (!conversationHistory || conversationHistory.length === 0) {\r\n        console.log('[CONTEXT_EXTRACTOR] 빈 히스토리');\r\n        return context;\r\n    }\r\n\r\n    // LangGraph 정보가 있는 메시지 찾기\r\n    for (const msg of conversationHistory) {\r\n        if (msg.langgraph_result?.documents) {\r\n            context.documents.push(...msg.langgraph_result.documents);\r\n            context.hasSearchResults = true;\r\n        }\r\n        \r\n        if (msg.keyword) {\r\n            try {\r\n                const keywords = typeof msg.keyword === 'string' \r\n                    ? JSON.parse(msg.keyword) \r\n                    : msg.keyword;\r\n                if (Array.isArray(keywords)) {\r\n                    context.keywords.push(...keywords);\r\n                }\r\n            } catch (e) {\r\n                console.warn('[CONTEXT_EXTRACTOR] 키워드 파싱 실패:', e);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 중복 제거 및 제한\r\n    context.documents = context.documents.slice(0, 5);\r\n    context.keywords = [...new Set(context.keywords)].slice(0, 10);\r\n\r\n    console.log('[CONTEXT_EXTRACTOR] 추출된 컨텍스트:', {\r\n        documentsCount: context.documents.length,\r\n        keywordsCount: context.keywords.length,\r\n        hasSearchResults: context.hasSearchResults\r\n    });\r\n\r\n    return context;\r\n}\r\n\r\n/**\r\n * 질문 유형에 따른 UI 상태 업데이트\r\n * @param {Object} judgment - 판별 결과\r\n * @param {Function} updateUI - UI 업데이트 함수\r\n */\r\nexport function updateUIForQuestionType(judgment, updateUI) {\r\n    console.log('[UI_UPDATER] UI 업데이트 시작:', judgment);\r\n    \r\n    if (judgment.isFirstQuestion) {\r\n        // 최초 질문 UI\r\n        updateUI({\r\n            showLangGraphProgress: true,\r\n            showSearchResults: true,\r\n            questionType: 'first',\r\n            statusMessage: 'RAG 검색 및 분석을 진행합니다...'\r\n        });\r\n    } else {\r\n        // 추가 질문 UI\r\n        updateUI({\r\n            showLangGraphProgress: false,\r\n            showSearchResults: false,\r\n            questionType: 'followup',\r\n            statusMessage: '이전 대화 맥락을 고려하여 답변합니다...'\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * 에러 처리 및 폴백 로직\r\n * @param {Error} error - 발생한 에러\r\n * @param {Object} judgment - 원래 판별 결과\r\n * @returns {Object} 폴백 처리 결과\r\n */\r\nexport function handleQuestionError(error, judgment) {\r\n    console.error('[ERROR_HANDLER] 질문 처리 오류:', error);\r\n    \r\n    // LangGraph 실패 시 일반 LLM으로 폴백\r\n    if (judgment.isFirstQuestion && error.message.includes('langgraph')) {\r\n        console.log('[ERROR_HANDLER] LangGraph 실패 - 일반 LLM으로 폴백');\r\n        return {\r\n            ...judgment,\r\n            isFirstQuestion: false,\r\n            questionType: 'fallback',\r\n            apiEndpoint: '/api/chat/stream',\r\n            reason: 'LangGraph 실패로 인한 폴백'\r\n        };\r\n    }\r\n    \r\n    // 일반적인 에러 처리\r\n    return {\r\n        error: error.message,\r\n        fallback: true,\r\n        apiEndpoint: '/api/chat/stream'\r\n    };\r\n}\r\n\r\nexport default {\r\n    judgeQuestionType,\r\n    sendQuestionToAppropriateEndpoint,\r\n    extractLangGraphContext,\r\n    updateUIForQuestionType,\r\n    handleQuestionError\r\n};\r\n","<template>\r\n  <div class=\"app\" :class=\"{ 'dark-mode': true, 'collapsed-sidebar': isSidebarCollapsed }\">\r\n    <aside class=\"sidebar\">\r\n      <div class=\"sidebar-controls\">\r\n        <div class=\"new-chat-btn\" @click=\"newConversation\">\r\n          <svg class=\"btn-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n            <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n            <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n          </svg>\r\n        </div>\r\n        <div class=\"toggle-sidebar-btn\" @click=\"toggleSidebar\">\r\n          <svg class=\"toggle-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n            <line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\r\n            <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\r\n            <line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"conversations-list\">\r\n        <transition-group name=\"list\">\r\n          <div \r\n            v-for=\"conversation in $store.state.conversations\" \r\n            :key=\"conversation.id || `temp-${conversation.created_at}`\" \r\n            class=\"conversation-item\"\r\n            :class=\"{ active: $store.state.currentConversation && conversation.id === $store.state.currentConversation.id }\"\r\n            @click=\"selectConversation(conversation)\"\r\n          >\r\n            <div class=\"conversation-icon\">\r\n              {{ getConversationIcon(conversation.icon_type) }}\r\n            </div>\r\n            <div class=\"conversation-content\">\r\n              {{ getConversationTitle(conversation) }}\r\n            </div>\r\n            <div class=\"conversation-actions\">\r\n              <button class=\"delete-btn\" @click.stop=\"deleteConversation(conversation.id)\">\r\n                <svg class=\"delete-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                  <polyline points=\"3 6 5 6 21 6\"></polyline>\r\n                  <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </transition-group>\r\n      </div>\r\n    </aside>\r\n    \r\n    <main class=\"main\">\r\n      <div class=\"header\">\r\n        <div class=\"title\">Report Collection</div>\r\n        \r\n        <div class=\"user-profile\" @click.stop=\"handleUserProfileClick\">\r\n          <div class=\"user-avatar\">\r\n            <span v-if=\"currentUser && currentUser.username\" class=\"user-initial\">\r\n              {{ currentUser.username.charAt(0).toUpperCase() }}\r\n            </span>\r\n            <svg v-else class=\"user-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\r\n              <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\r\n            </svg>\r\n          </div>\r\n          <div class=\"user-popup\" v-if=\"isUserPopupOpen\">\r\n            <div class=\"user-popup-header\">\r\n              <div class=\"user-popup-avatar\">\r\n                <svg class=\"user-popup-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                  <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\r\n                  <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\r\n                </svg>\r\n              </div>\r\n              <div class=\"user-popup-info\">\r\n                <div class=\"user-popup-name\">{{ currentUser ? currentUser.username : 'No Username' }}</div>\r\n                <div class=\"user-popup-email\">{{ currentUser ? (currentUser.email || 'No Email') : 'No Email' }}</div>\r\n                <div class=\"user-popup-email\">{{ currentUser ? (currentUser.deptname || 'No deptname') : 'No deptname' }}</div>\r\n              </div>\r\n            </div>\r\n            <div class=\"user-popup-menu\">\r\n              <a\r\n                href=\"https://go/nrdvoc\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                class=\"menu-item\"\r\n                style=\"text-decoration:none; color:inherit; cursor:pointer; position:relative; z-index:10;\"\r\n                onclick=\"event.preventDefault(); event.stopPropagation(); event.stopImmediatePropagation(); window.open(this.href, '_blank', 'noopener'); return false;\"\r\n              >\r\n                <svg class=\"menu-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                  <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\r\n                  <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\r\n                </svg>\r\n                User VOE\r\n              </a>\r\n              <a\r\n                href=\"https://confluence.samsungds.net/spaces/DAE/pages/2420017795/%EB%B6%88%EB%B0%B1+%EA%B0%9C%EB%B0%9C+%ED%98%84%ED%99%A9%ED%8C%90\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                class=\"menu-item\"\r\n                style=\"text-decoration:none; color:inherit; cursor:pointer; position:relative; z-index:10;\"\r\n                onclick=\"event.preventDefault(); event.stopPropagation(); event.stopImmediatePropagation(); window.open(this.href, '_blank', 'noopener'); return false;\"\r\n              >\r\n                <svg class=\"menu-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                  <path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path>\r\n                  <path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path>\r\n                </svg>\r\n                RC Info\r\n              </a>\r\n              <div class=\"menu-item\" @click=\"logout\">\r\n                <svg class=\"menu-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                  <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path>\r\n                  <polyline points=\"16 17 21 12 16 7\"></polyline>\r\n                  <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line>\r\n                </svg>\r\n                Logout\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <router-view v-slot=\"{ Component }\">\r\n        <transition name=\"fade\" mode=\"out-in\">\r\n          <component :is=\"Component\" />\r\n        </transition>\r\n      </router-view>\r\n    </main>\r\n    \r\n    <!-- API Key Modal -->\r\n    <div class=\"modal-overlay\" v-if=\"showApiKeyModal\" @click.self=\"showApiKeyModal = false\">\r\n      <div class=\"modal-container\">\r\n        <div class=\"modal-header\">\r\n          <h3>Set OpenAI API Key</h3>\r\n          <button class=\"close-btn\" @click=\"showApiKeyModal = false\">×</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <p class=\"api-key-info\">Your API key is stored locally in your browser and sent directly to the API. We never store your API key on our servers.</p>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"apiKey\">OpenAI API Key</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"apiKey\" \r\n              v-model=\"apiKeyInput\" \r\n              placeholder=\"sk-...\" \r\n              :class=\"{ 'error': $store.state.apiKeyError }\"\r\n            />\r\n            <p class=\"error-message\" v-if=\"$store.state.apiKeyError\">{{ $store.state.apiKeyError }}</p>\r\n            <p class=\"api-key-status\" v-if=\"$store.state.apiKeySet && !$store.state.apiKeyError\">\r\n              <svg class=\"check-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <polyline points=\"20 6 9 17 4 12\"></polyline>\r\n              </svg>\r\n              API Key is set\r\n            </p>\r\n          </div>\r\n          \r\n          <p class=\"api-key-help\">\r\n            Don't have an API key? <a href=\"https://platform.openai.com/account/api-keys\" target=\"_blank\">Get one from OpenAI</a>\r\n          </p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button class=\"cancel-btn\" @click=\"showApiKeyModal = false\">Cancel</button>\r\n          <button \r\n            class=\"save-btn\" \r\n            @click=\"saveApiKey\" \r\n            :disabled=\"!apiKeyInput.trim().startsWith('sk-')\">\r\n            Save API Key\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Custom Llama API Modal -->\r\n    <div class=\"modal-overlay\" v-if=\"showLlamaApiModal\" @click.self=\"showLlamaApiModal = false\">\r\n      <div class=\"modal-container\">\r\n        <div class=\"modal-header\">\r\n          <h3>Set Custom Llama API</h3>\r\n          <button class=\"close-btn\" @click=\"showLlamaApiModal = false\">×</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <p class=\"api-key-info\">Configure your custom Llama API settings. Your API key is stored locally in your browser.</p>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"llamaApiKey\">Custom API Key</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"llamaApiKey\" \r\n              v-model=\"llamaApiKeyInput\" \r\n              placeholder=\"\" \r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"llamaApiBase\">API Base URL (Optional)</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"llamaApiBase\" \r\n              v-model=\"llamaApiBaseInput\" \r\n              placeholder=\"\" \r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"llamaApiEndpoint\">API Endpoint (Optional)</label>\r\n            <input \r\n              type=\"text\" \r\n              id=\"llamaApiEndpoint\" \r\n              v-model=\"llamaApiEndpointInput\" \r\n              placeholder=\"\" \r\n            />\r\n          </div>\r\n          \r\n          <p class=\"api-key-help\">\r\n            If you provide just the API key, the default endpoint will be used.\r\n          </p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button class=\"cancel-btn\" @click=\"showLlamaApiModal = false\">Cancel</button>\r\n          <button \r\n            class=\"save-btn\" \r\n            @click=\"saveLlamaApiSettings\" \r\n            :disabled=\"!llamaApiKeyInput.trim()\">\r\n            Save API Settings\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: 'App',\r\n  data() {\r\n    return {\r\n      isDarkMode: true,\r\n      isSidebarCollapsed: localStorage.getItem('sidebarCollapsed') === 'true' || false,\r\n      isUserPopupOpen: false,\r\n      showApiKeyModal: false,\r\n      showLlamaApiModal: false,\r\n      apiKeyInput: '',\r\n      llamaApiKeyInput: '',\r\n      llamaApiBaseInput: '',\r\n      llamaApiEndpointInput: '',\r\n    }\r\n  },\r\n  computed: {\r\n    // 사용자 정보 반응성 개선\r\n    currentUser() {\r\n      return this.$store.state.user;\r\n    },\r\n    isUserAuthenticated() {\r\n      // localStorage의 JWT 토큰이 있으면 인증된 것으로 간주\r\n      const jwtToken = localStorage.getItem('access_token');\r\n      return jwtToken && this.$store.state.isAuthenticated;\r\n    },\r\n  },\r\n  watch: {\r\n    // 사용자 정보 변경 감지\r\n    currentUser: {\r\n              handler() {\r\n        \r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    isUserAuthenticated: {\r\n              handler() {\r\n\r\n      },\r\n      immediate: true\r\n    }\r\n  },\r\n  methods: {\r\n    toggleDarkMode() {\r\n      this.isDarkMode = !this.isDarkMode;\r\n      localStorage.setItem('darkMode', this.isDarkMode);\r\n    },\r\n    toggleSidebar() {\r\n      this.isSidebarCollapsed = !this.isSidebarCollapsed;\r\n      localStorage.setItem('sidebarCollapsed', this.isSidebarCollapsed);\r\n    },\r\n    async newConversation() {\r\n      // Home 컴포넌트에 새 대화 신호 전송 (실제 생성은 Home.vue에서 처리)\r\n      this.$store.commit('setNewConversationTrigger', Date.now());\r\n    },\r\n    handleUserProfileClick(event) {\r\n      // 단순히 사용자 팝업 토글만 수행 (인증 상태 확인 없음)\r\n      if (event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n      }\r\n      this.isUserPopupOpen = !this.isUserPopupOpen;\r\n    },\r\n    async logout() {\r\n      try {\r\n        // // console.log('[APP] 로그아웃 시작');\r\n        \r\n        // 사용자 팝업 닫기\r\n        this.isUserPopupOpen = false;\r\n        \r\n        // 백엔드 로그아웃 API 호출\r\n        const jwtToken = localStorage.getItem('access_token');\r\n        if (jwtToken) {\r\n          try {\r\n            await fetch('http://localhost:8000/api/auth/logout', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Authorization': `Bearer ${jwtToken}`,\r\n                'Content-Type': 'application/json'\r\n              }\r\n            });\r\n            // console.log('[APP] 백엔드 로그아웃 API 호출 완료');\r\n          } catch (apiError) {\r\n            console.warn('[APP] 백엔드 로그아웃 API 호출 실패 (계속 진행):', apiError.message);\r\n          }\r\n        }\r\n        \r\n        // Vuex store의 logout action 실행 (토큰 및 상태 정리)\r\n        await this.$store.dispatch('logout');\r\n        // console.log('[APP] 클라이언트 상태 정리 완료');\r\n                \r\n        // OAuth 처리 플래그 초기화\r\n        sessionStorage.removeItem('oauth_processing');\r\n        sessionStorage.removeItem('sso_processed');\r\n        sessionStorage.removeItem('logout_redirect');\r\n        \r\n        // 로그아웃 완료 후 즉시 SSO 로그인으로 리다이렉트\r\n        // console.log('[APP] 로그아웃 완료 - SSO 로그인으로 리다이렉트');\r\n        setTimeout(() => {\r\n          try {\r\n            window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n          } catch (error) {\r\n            try {\r\n              window.location.href = 'http://localhost:8000/api/auth/auth_sh';\r\n            } catch (error2) {\r\n              console.error('SSO 리다이렉트 실패:', error2);\r\n            }\r\n          }\r\n        }, 500); // 0.5초 후 리다이렉트\r\n        \r\n      } catch (error) {\r\n        console.error('[APP] 로그아웃 처리 중 오류:', error);\r\n        \r\n        // 에러가 발생해도 기본 정리 수행\r\n        this.isUserPopupOpen = false;\r\n        \r\n        // 강제로 상태 정리\r\n        this.$store.dispatch('logout');\r\n        \r\n        sessionStorage.removeItem('oauth_processing');\r\n        sessionStorage.removeItem('sso_processed');\r\n        sessionStorage.removeItem('logout_redirect');\r\n        \r\n        // 에러 발생 시에도 SSO 로그인으로 리다이렉트\r\n        setTimeout(() => {\r\n          try {\r\n            window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n          } catch (error) {\r\n            try {\r\n              window.location.href = 'http://localhost:8000/api/auth/auth_sh';\r\n            } catch (error2) {\r\n              console.error('SSO 리다이렉트 실패:', error2);\r\n            }\r\n          }\r\n        }, 500);\r\n      }\r\n    },\r\n    async saveApiKey() {\r\n      if (!this.apiKeyInput.trim().startsWith('sk-')) {\r\n        this.$store.commit('setApiKeyError', 'Invalid API key format. It should start with \"sk-\"');\r\n        return;\r\n      }\r\n      \r\n      const result = await this.$store.dispatch('updateApiKey', this.apiKeyInput.trim());\r\n      if (result.success) {\r\n        this.showApiKeyModal = false;\r\n      }\r\n    },\r\n    deleteConversation(conversationId) {\r\n      if (confirm('Are you sure you want to delete this conversation?')) {\r\n        this.$store.dispatch('deleteConversation', conversationId);\r\n      }\r\n    },\r\n    async validateAuthToken() {\r\n      try {\r\n        // localStorage에서 JWT 토큰 가져오기\r\n        const jwtToken = localStorage.getItem('access_token');\r\n        \r\n        if (!jwtToken) {\r\n          // console.log('[APP] JWT 토큰이 없음 - 로그아웃 처리');\r\n          this.$store.dispatch('logout');\r\n          return;\r\n        }\r\n        \r\n        const response = await fetch('http://localhost:8000/api/auth/me', {\r\n          method: 'GET',\r\n          headers: { \r\n            'Authorization': `Bearer ${jwtToken}`,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          credentials: 'include'\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          // console.log('토큰 검증 실패:', response.status, response.statusText);\r\n          \r\n          // 응답 본문 확인 (디버깅용)\r\n          try {\r\n            await response.text();\r\n            // console.log('토큰 검증 실패 응답:', errorText);\r\n          } catch (e) {\r\n            // console.log('응답 본문 읽기 실패');\r\n          }\r\n          \r\n          if (response.status === 401) {\r\n            // 토큰 만료 시 자동 SSO 로그인으로 리다이렉트\r\n            // console.log('[APP] 토큰 만료 감지 - 자동 SSO 로그인으로 리다이렉트');\r\n            setTimeout(() => {\r\n              try {\r\n                window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n              } catch (error) {\r\n                window.location.href = 'http://localhost:8000/api/auth/auth_sh';\r\n              }\r\n            }, 500);\r\n          } else {\r\n            this.$store.dispatch('logout');\r\n          }\r\n        } else {\r\n          // 인증된 사용자의 대화 목록 가져오기 (중복 호출 방지)\r\n          if (!this._conversationsFetched) {\r\n            this._conversationsFetched = true;\r\n            this.$store.dispatch('fetchConversations');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('토큰 검증 중 오류:', error);\r\n        \r\n        // 네트워크 오류인지 확인\r\n        if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n          console.error('[APP] 네트워크 오류 - 백엔드 서버 연결 실패');\r\n          // 네트워크 오류 시에는 로그아웃하지 않고 재시도 또는 사용자에게 알림\r\n          return;\r\n        }\r\n        \r\n        this.$store.dispatch('logout');\r\n      }\r\n    },\r\n    async selectConversation(conversation) {\r\n      try {\r\n        console.log('🔄 대화 선택 시작:', conversation.id);\r\n        \r\n        // 대화의 메시지를 별도로 가져오기\r\n        const response = await fetch(`http://localhost:8000/api/conversations/${conversation.id}/messages`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          credentials: 'include'\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          // console.log('✅ API 응답 성공:', {\r\n          //   conversationId: data.conversation_id,\r\n          //   messageCount: data.messages?.length || 0\r\n          // });\r\n          \r\n          // 메시지가 포함된 대화 객체 생성\r\n          const conversationWithMessages = {\r\n            ...conversation,\r\n            messages: data.messages || []\r\n          };\r\n          \r\n          // console.log('📝 생성된 대화 객체:', {\r\n          //   id: conversationWithMessages.id,\r\n          //   messageCount: conversationWithMessages.messages.length,\r\n          //   firstMessage: conversationWithMessages.messages[0] ? {\r\n          //     id: conversationWithMessages.messages[0].id,\r\n          //     role: conversationWithMessages.messages[0].role,\r\n          //     q_mode: conversationWithMessages.messages[0].q_mode\r\n          //   } : null\r\n          // });\r\n          \r\n          // 대화를 store에 설정 (랭그래프 복원 트리거)\r\n          this.$store.commit('setCurrentConversation', conversationWithMessages);\r\n          this.$store.commit('setShouldScrollToBottom', true);\r\n\r\n          // Home 컴포넌트에 기존 대화 선택 신호 전송 (실시간 기능 비활성화용)\r\n          this.$store.commit('setConversationRestored', true);\r\n          \r\n          // URL 파라미터는 사용하지 않음 (현재 상태 기반 복원)\r\n          \r\n          console.log('✅ 대화 선택 완료:', {\r\n            conversationId: conversation.id,\r\n            messageCount: data.messages?.length || 0\r\n          });\r\n        } else {\r\n          const errorText = await response.text();\r\n          console.error('❌ 대화 메시지 가져오기 실패:', {\r\n            status: response.status,\r\n            statusText: response.statusText,\r\n            error: errorText\r\n          });\r\n          // 실패 시 메시지 없는 대화로 설정\r\n          this.$store.commit('setCurrentConversation', conversation);\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ 대화 선택 오류:', error);\r\n        // 오류 시 메시지 없는 대화로 설정\r\n        this.$store.commit('setCurrentConversation', conversation);\r\n      }\r\n    },\r\n    async saveLlamaApiSettings() {\r\n      try {\r\n        const result = await this.$store.dispatch('updateLlamaApiSettings', {\r\n          apiKey: this.llamaApiKeyInput,\r\n          apiBase: this.llamaApiBaseInput || undefined,\r\n          apiEndpoint: this.llamaApiEndpointInput || undefined\r\n        });\r\n        \r\n        if (result.success) {\r\n          this.showLlamaApiModal = false;\r\n        }\r\n              } catch (error) {\r\n          // 에러 처리\r\n        }\r\n    },\r\n    adjustTextareaHeight() {\r\n      const textarea = this.$refs.inputField;\r\n      if (!textarea) return;\r\n      \r\n      // 높이 초기화\r\n      textarea.style.height = 'auto';\r\n      \r\n      // 스크롤 높이에 맞게 높이 조정 (최대 150px까지)\r\n      const newHeight = Math.min(textarea.scrollHeight, 150);\r\n      textarea.style.height = newHeight + 'px';\r\n    },\r\n    getConversationTitle(conversation) {\r\n      if (!conversation) {\r\n        return 'New Conversation';\r\n      }\r\n      \r\n      // 백엔드에서 전달된 title 필드 사용\r\n      if (conversation.title && conversation.title !== 'New Conversation') {\r\n        return conversation.title;\r\n      }\r\n      \r\n      return 'New Conversation';\r\n    },\r\n    getConversationIcon(iconType) {\r\n      const iconMap = {\r\n        \"image\": \"🖼️\",\r\n        \"code\": \"💻\",\r\n        \"document\": \"📄\",\r\n        \"math\": \"🧮\",\r\n        \"general\": \"💬\",\r\n        \"graph\": \"📊\",\r\n        \"analysis\": \"📈\",\r\n        \"data\": \"🔢\",\r\n        \"dashboard\": \"📱\",\r\n        \"ai\": \"🤖\",\r\n        \"search\": \"🔍\",\r\n        \"translation\": \"🔤\",\r\n        \"audio\": \"🎵\",\r\n        \"video\": \"🎬\",\r\n        \"design\": \"🎨\",\r\n        \"map\": \"🗺️\",\r\n        \"science\": \"🔬\",\r\n        \"finance\": \"💰\",\r\n        \"health\": \"⚕️\",\r\n        \"news\": \"📰\",\r\n        \"weather\": \"☁️\",\r\n        \"calendar\": \"📅\",\r\n        \"task\": \"✅\"\r\n      };\r\n      \r\n      return iconMap[iconType] || \"💬\";\r\n    },\r\n    formatDate(dateString) {\r\n      if (!dateString) return '';\r\n      \r\n      const date = new Date(dateString);\r\n      const now = new Date();\r\n      \r\n      if (date.toDateString() === now.toDateString()) {\r\n        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n      }\r\n      \r\n      return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\r\n    },\r\n    closeDropdowns(event) {\r\n      // Close dropdowns when clicking outside\r\n      if (!event.target.closest('.user-profile')) {\r\n        this.isUserPopupOpen = false;\r\n      }\r\n    },\r\n    enableCopying() {\r\n      // 모든 복사 관련 이벤트 허용\r\n      const allowEvent = (e) => {\r\n        e.stopPropagation();\r\n        return true;\r\n      };\r\n      \r\n      // 선택 시작 이벤트 허용\r\n      document.addEventListener('selectstart', allowEvent, { capture: true, passive: false });\r\n      \r\n      // 우클릭 컨텍스트 메뉴 허용\r\n      document.addEventListener('contextmenu', allowEvent, { capture: true, passive: false });\r\n      \r\n      // 복사 이벤트 허용\r\n      document.addEventListener('copy', allowEvent, { capture: true, passive: false });\r\n      \r\n      // 마우스 이벤트 허용\r\n      document.addEventListener('mousedown', allowEvent, { capture: true, passive: false });\r\n      document.addEventListener('mouseup', allowEvent, { capture: true, passive: false });\r\n      document.addEventListener('mousemove', allowEvent, { capture: true, passive: false });\r\n      \r\n      // 키보드 복사 단축키 허용 (Ctrl+C, Ctrl+A)\r\n      document.addEventListener('keydown', (e) => {\r\n        if (e.ctrlKey || e.metaKey) {\r\n          if (e.key === 'c' || e.key === 'C' || e.key === 'a' || e.key === 'A' || e.key === 'v' || e.key === 'V') {\r\n            e.stopPropagation();\r\n            return true;\r\n          }\r\n        }\r\n        return true;\r\n      }, { capture: true, passive: false });\r\n      \r\n      // 드래그 이벤트 허용\r\n      document.addEventListener('dragstart', allowEvent, { capture: true, passive: false });\r\n      \r\n      // CSS 클래스로 복사 허용 강제 적용 (TrustedScript 오류 방지)\r\n      document.body.classList.add('text-selection-enabled');\r\n      \r\n    },\r\n    handleSSOCallback() {\r\n      // URL에서 토큰 파라미터 확인 (백엔드 /acs에서 리다이렉트된 경우)\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      const token = urlParams.get('token');\r\n      const user = urlParams.get('username');\r\n      const error = urlParams.get('error');\r\n      \r\n      if (error) {\r\n        console.error('SSO Error:', error);\r\n        \r\n        // 더 자세한 오류 정보 가져오기\r\n        const details = urlParams.get('details') || '';\r\n        if (details) {\r\n          console.error('SSO Error Details:', details);\r\n        }\r\n        \r\n        // 에러 파라미터 제거\r\n        const url = new URL(window.location);\r\n        url.search = '';\r\n        window.history.replaceState({}, document.title, url);\r\n        \r\n        // OAuth 처리 중 플래그 제거\r\n        sessionStorage.removeItem('oauth_processing');\r\n        return false;\r\n      }\r\n      \r\n      if (token && user) {\r\n        // console.log('사용자 정보 전체 : ', urlParams)\r\n        // 추가 사용자 정보 가져오기\r\n        const mail = urlParams.get('mail') || '';\r\n        const loginid = urlParams.get('loginid') || '';\r\n        const username = urlParams.get('username') || '';\r\n        const deptname = urlParams.get('deptname') || '';\r\n        \r\n        // 토큰을 스토어에 저장하고 로그인 상태로 설정\r\n        this.$store.commit('setAuth', { \r\n          token, \r\n          user: { \r\n            username: user, \r\n            mail: mail, \r\n            loginid: username,\r\n            id: loginid,\r\n            deptname : deptname\r\n          } \r\n        });\r\n\r\n        // 로그인 후 새 대화 플래그 설정\r\n        this.$store.commit('setLoginNewConversation', true);\r\n        \r\n        \r\n        // 사용자 정보가 제대로 설정되었는지 확인하고, 필요시 백엔드에서 새로 가져오기\r\n        setTimeout(() => {\r\n          if (!this.$store.state.user || !this.$store.state.user.username) {\r\n            this.$store.dispatch('fetchUserInfo');\r\n          }\r\n        }, 500);\r\n        \r\n        // 토큰 파라미터 제거\r\n        const url = new URL(window.location);\r\n        url.search = '';\r\n        window.history.replaceState({}, document.title, url);\r\n        \r\n        // 대화 목록 가져오기\r\n        this.$store.dispatch('fetchConversations');\r\n        \r\n        // 홈 페이지로 리다이렉트 (무한 리다이렉트 방지)\r\n        if (this.$router.currentRoute.value.path !== '/') {\r\n          this.$router.push('/');\r\n        }\r\n        \r\n        // SSO 처리 완료 플래그 설정\r\n        sessionStorage.setItem('sso_processed', 'true');\r\n        \r\n        // OAuth 처리 중 플래그 제거\r\n        sessionStorage.removeItem('oauth_processing');\r\n        \r\n        // // console.log('[APP] handleSSOCallback - OAuth 처리 완료 플래그 설정됨');\r\n        \r\n        return true; // 토큰 처리 완료\r\n      }\r\n      \r\n      // samsung OAuth 코드가 있는 경우 (표준 OAuth 흐름)\r\n      const code = urlParams.get('code');\r\n      const state = urlParams.get('state');\r\n      \r\n      if (code && state) {\r\n        // 이미 처리 중인 OAuth인지 확인\r\n        if (sessionStorage.getItem('oauth_processing') === 'true') {\r\n          return true;\r\n        }\r\n        \r\n        // OAuth 처리 중 플래그 설정\r\n        sessionStorage.setItem('oauth_processing', 'true');\r\n        \r\n        // 백엔드의 /acs 엔드포인트로 리다이렉트하여 처리\r\n        window.location.href = `http://localhost:8000/api/auth/acs?code=${code}&state=${state}`;\r\n        return true; // OAuth 처리 진행 중\r\n      }\r\n      \r\n      return false; // SSO 콜백 처리 없음\r\n    },\r\n    processOAuthFromHash(hash) {\r\n      const hashParams = new URLSearchParams(hash.substring(1));\r\n      const idToken = hashParams.get('id_token');\r\n      const state = hashParams.get('state');\r\n      \r\n      if (!idToken || !state) {\r\n        return;\r\n      }\r\n      \r\n      // 백엔드로 토큰 전송\r\n      const requestBody = `id_token=${encodeURIComponent(idToken)}&state=${encodeURIComponent(state)}`;\r\n      \r\n      fetch('http://localhost:8000/api/auth/acs', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: requestBody,\r\n        credentials: 'include' // 쿠키 포함\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.text();\r\n        } else {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n      })\r\n      .then(responseText => {\r\n        try {\r\n          const data = JSON.parse(responseText);\r\n          \r\n          if (data.success && data.user) {\r\n            // 사용자 정보를 스토어에 저장\r\n            this.$store.commit('setAuth', {\r\n              token: data.token || idToken, // 백엔드에서 토큰을 반환하지 않는 경우 idToken 사용\r\n              user: data.user\r\n            });\r\n\r\n            // 로그인 후 새 대화 플래그 설정\r\n            this.$store.commit('setLoginNewConversation', true);\r\n                        \r\n            // URL 해시 정리\r\n            const url = new URL(window.location);\r\n            url.hash = '';\r\n            window.history.replaceState({}, document.title, url);\r\n            \r\n            // 대화 목록 가져오기\r\n            this.$store.dispatch('fetchConversations');\r\n            \r\n            // OAuth 처리 완료 플래그 설정\r\n            sessionStorage.setItem('sso_processed', 'true');\r\n            sessionStorage.removeItem('oauth_processing');\r\n            \r\n            // // console.log('[APP] processOAuthFromHash - OAuth 처리 완료 플래그 설정됨');\r\n            \r\n            // 페이지 리로드 없이 인증 상태 업데이트\r\n            this.$forceUpdate();\r\n            \r\n          } else {\r\n            sessionStorage.removeItem('oauth_processing');\r\n          }\r\n        } catch (parseError) {\r\n          sessionStorage.removeItem('oauth_processing');\r\n        }\r\n      })\r\n      .catch(() => {\r\n        sessionStorage.removeItem('oauth_processing');\r\n      });\r\n    },\r\n    processOAuthFromQuery(urlParams) {\r\n      const code = urlParams.get('code');\r\n      const idToken = urlParams.get('id_token');\r\n      const state = urlParams.get('state');\r\n      const error = urlParams.get('error');\r\n\r\n      if (error) {\r\n        const url = new URL(window.location);\r\n        url.search = '';\r\n        window.history.replaceState({}, document.title, url);\r\n        sessionStorage.removeItem('oauth_processing');\r\n        return false;\r\n      }\r\n\r\n      if (code && idToken) {\r\n        const requestBody = `code=${encodeURIComponent(code)}&id_token=${encodeURIComponent(idToken)}&state=${encodeURIComponent(state)}`;\r\n\r\n        fetch('http://localhost:8000/api/auth/acs', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body: requestBody,\r\n          credentials: 'include'\r\n        })\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.text();\r\n          } else {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n        })\r\n        .then(responseText => {\r\n          try {\r\n            const data = JSON.parse(responseText);\r\n\r\n            if (data.success && data.user) {\r\n              this.$store.commit('setAuth', {\r\n                token: data.token || idToken,\r\n                user: data.user\r\n              });\r\n\r\n              // 로그인 후 새 대화 플래그 설정\r\n              this.$store.commit('setLoginNewConversation', true);\r\n\r\n\r\n              const url = new URL(window.location);\r\n              url.search = '';\r\n              window.history.replaceState({}, document.title, url);\r\n              this.$store.dispatch('fetchConversations');\r\n              sessionStorage.setItem('sso_processed', 'true');\r\n              sessionStorage.removeItem('oauth_processing');\r\n              this.$forceUpdate();\r\n              return true;\r\n            } else {\r\n              sessionStorage.removeItem('oauth_processing');\r\n              return false;\r\n            }\r\n          } catch (parseError) {\r\n            sessionStorage.removeItem('oauth_processing');\r\n            return false;\r\n          }\r\n        })\r\n        .catch(() => {\r\n          sessionStorage.removeItem('oauth_processing');\r\n          return false;\r\n        });\r\n        return true; // 토큰 처리 진행 중\r\n      }\r\n      return false; // SSO 콜백 처리 없음\r\n    },\r\n    checkAuthCookies() {\r\n      // 쿠키에서 인증 정보 확인\r\n      function getCookie(name) {\r\n        const value = `; ${document.cookie}`;\r\n        const parts = value.split(`; ${name}=`);\r\n        if (parts.length === 2) return parts.pop().split(';').shift();\r\n        return null;\r\n      }\r\n      \r\n      const accessToken = getCookie('access_token');\r\n      const userInfoCookie = getCookie('user_info');\r\n      const ssoProcessed = getCookie('sso_processed');\r\n      \r\n      // console.log('[APP] Checking cookies - access_token:', !!accessToken, 'user_info:', !!userInfoCookie, 'sso_processed:', ssoProcessed);\r\n      \r\n      if (accessToken && userInfoCookie) {\r\n        try {\r\n          // URL 디코딩 후 JSON 파싱\r\n          const decodedUserInfo = decodeURIComponent(userInfoCookie);\r\n          // console.log('[APP] Decoded user_info:', decodedUserInfo);\r\n          const userInfo = JSON.parse(decodedUserInfo);\r\n          \r\n          // localStorage에 저장\r\n          localStorage.setItem('access_token', accessToken);\r\n          localStorage.setItem('user_info', JSON.stringify(userInfo));\r\n          if (ssoProcessed) {\r\n            sessionStorage.setItem('sso_processed', ssoProcessed);\r\n          }\r\n          \r\n          // 스토어에 인증 정보 설정\r\n          this.$store.commit('setAuth', {\r\n            token: accessToken,\r\n            user: userInfo\r\n          });\r\n\r\n          // 로그인 후 새 대화 플래그 설정\r\n          this.$store.commit('setLoginNewConversation', true);\r\n                  \r\n          // 대화 목록 가져오기\r\n          this.$store.dispatch('fetchConversations');\r\n          \r\n          // console.log('[APP] 쿠키에서 인증 정보 복원 완료');\r\n          \r\n          // 쿠키 정리 (보안상 이유로)\r\n          document.cookie = 'access_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=report-collection;';\r\n          document.cookie = 'user_info=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; report-collection;';\r\n          document.cookie = 'sso_processed=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; report-collection;';\r\n          \r\n          return true;\r\n        } catch (error) {\r\n          console.error('[APP] 쿠키 파싱 실패:', error);\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    }\r\n  },\r\n  async created() {\r\n    // OAuth 처리 중인 경우 중복 처리 방지\r\n    if (sessionStorage.getItem('oauth_processing') === 'true') {\r\n      // // console.log('[APP] OAuth 처리 중 - created 라이프사이클 중단');\r\n      return; // 추가 처리 중단\r\n    }\r\n    \r\n    // SSO 처리 완료된 경우 중복 처리 방지\r\n    if (sessionStorage.getItem('sso_processed') === 'true') {\r\n      // // console.log('[APP] SSO 처리 완료됨 - created 라이프사이클 중단');\r\n      return;\r\n    }\r\n    \r\n    // URL에 OAuth 파라미터가 있는 경우 OAuth 처리를 우선 진행\r\n    const currentHash = window.location.hash;\r\n    const currentUrlParams = new URLSearchParams(window.location.search);\r\n    const hasOAuthInHash = currentHash && currentHash.includes('id_token');\r\n    const hasOAuthInQuery = currentUrlParams.get('code') || currentUrlParams.get('id_token') || currentUrlParams.get('error');\r\n    \r\n    if (hasOAuthInHash || hasOAuthInQuery) {\r\n      // // console.log('[APP] OAuth 파라미터 발견 - OAuth 처리 우선 진행, created 라이프사이클 중단');\r\n      \r\n      // OAuth 처리가 진행 중임을 표시\r\n      sessionStorage.setItem('oauth_processing', 'true');\r\n      \r\n      // OAuth 처리를 다른 라이프사이클에서 처리하도록 함\r\n      return;\r\n    }\r\n    \r\n    // 먼저 쿠키에서 인증 정보 확인\r\n    const hasAuthCookies = this.checkAuthCookies();\r\n    if (hasAuthCookies) {\r\n      // // console.log('[APP] 쿠키에서 인증 정보 복원됨');\r\n      return;\r\n    }\r\n    \r\n    // URL 해시에서 OAuth 파라미터 확인 (samsung OAuth 콜백)\r\n    if (currentHash && currentHash.includes('id_token')) {\r\n      // // console.log('[APP] URL 해시에서 OAuth 파라미터 발견 - 처리 시작');\r\n      this.processOAuthFromHash(currentHash);\r\n      return;\r\n    }\r\n    \r\n    // URL 쿼리 파라미터에서 OAuth 콜백 확인\r\n    if (hasOAuthInQuery) {\r\n      // // console.log('[APP] URL 쿼리에서 OAuth 파라미터 발견 - 처리 시작');\r\n      this.processOAuthFromQuery(currentUrlParams);\r\n      return;\r\n    }\r\n    \r\n    // SSO 콜백 처리 (가장 먼저 실행)\r\n    const hasToken = this.handleSSOCallback();\r\n    \r\n    // SSO 콜백으로 토큰을 받은 경우 중복 인증 체크를 건너뜀\r\n    if (hasToken) {\r\n      // // console.log('[APP] SSO 콜백 처리됨 - 추가 처리 중단');\r\n      return;\r\n    }\r\n    \r\n    // localStorage에서 기존 인증 정보 확인\r\n    const jwtToken = localStorage.getItem('access_token');\r\n    const userInfo = localStorage.getItem('user_info');\r\n    \r\n    if (jwtToken && userInfo) {\r\n      try {\r\n        // 기존 토큰으로 인증 상태 복원\r\n        const userData = JSON.parse(userInfo);\r\n        this.$store.commit('setAuth', {\r\n          token: jwtToken,\r\n          user: userData\r\n        });\r\n        \r\n        // // console.log('[APP] localStorage에서 인증 상태 복원됨');\r\n        \r\n        // 토큰 유효성 검사\r\n        const response = await fetch('http://localhost:8000/api/auth/me', {\r\n          headers: { 'Authorization': `Bearer ${jwtToken}` }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          // // console.log('[APP] 토큰 유효성 검사 통과');\r\n          // 인증된 사용자의 대화 목록 가져오기 (중복 호출 방지)\r\n          if (!this._conversationsFetched) {\r\n            this._conversationsFetched = true;\r\n            this.$store.dispatch('fetchConversations');\r\n          }\r\n          return;\r\n        } else {\r\n          // // console.log('[APP] 토큰 만료됨 - 자동 SSO 로그인으로 리다이렉트');\r\n          // console.log('[APP] 토큰 만료 감지 - 자동 SSO 로그인으로 리다이렉트');\r\n          setTimeout(() => {\r\n            try {\r\n              window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n            } catch (error) {\r\n              window.location.href = 'http://localhost:8000/api/auth/auth_sh';\r\n            }\r\n          }, 500);\r\n        }\r\n      } catch (error) {\r\n        console.error('[APP] 인증 정보 복원 실패:', error);\r\n        this.$store.dispatch('logout');\r\n      }\r\n    }\r\n    \r\n    // 로그아웃 플래그 정리\r\n    const isLogoutRedirect = sessionStorage.getItem('logout_redirect') === 'true';\r\n    if (isLogoutRedirect) {\r\n      // // console.log('[APP] 로그아웃 직후 - 플래그 정리');\r\n      sessionStorage.removeItem('logout_redirect');\r\n      return; // 로그아웃 직후에는 자동 리다이렉트 방지\r\n    }\r\n    \r\n    // OAuth 처리가 완료되지 않은 상태에서만 인증 상태 확인\r\n    // OAuth 처리 중이거나 이미 처리 완료된 경우 자동 리다이렉트 방지\r\n    const hasProcessedOAuth = sessionStorage.getItem('sso_processed') === 'true';\r\n    const isProcessingOAuth = sessionStorage.getItem('oauth_processing') === 'true';\r\n    \r\n    // console.log('[APP] Auth check - hasProcessedOAuth:', hasProcessedOAuth, 'isProcessingOAuth:', isProcessingOAuth);\r\n    // console.log('[APP] Store authenticated:', this.$store.state.isAuthenticated);\r\n    // console.log('[APP] LocalStorage tokens:', !!localStorage.getItem('access_token'), !!localStorage.getItem('user_info'));\r\n    \r\n    if (!hasProcessedOAuth && !isProcessingOAuth) {\r\n      // localStorage에 토큰이 있는지 먼저 확인\r\n      const hasLocalAuth = localStorage.getItem('access_token') && localStorage.getItem('user_info');\r\n      \r\n      // 인증되지 않은 상태에서만 samsung SSO로 리다이렉트\r\n      if (!this.$store.state.isAuthenticated && !hasLocalAuth) {\r\n        // console.log('[APP] 인증되지 않음 - SSO로 리다이렉트');\r\n        setTimeout(() => {\r\n          try {\r\n            window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n          } catch (error) {\r\n            try {\r\n              window.location.href = 'http://localhost:8000/api/auth/auth_sh';\r\n            } catch (error2) {\r\n              console.error('SSO 리다이렉트 실패:', error2);\r\n            }\r\n          }\r\n        }, 1000); // 1초 후 리다이렉트 (페이지 로딩 완료 대기)\r\n      } else if (hasLocalAuth && !this.$store.state.isAuthenticated) {\r\n        // localStorage에 토큰이 있지만 store에 없는 경우 store 업데이트\r\n        // console.log('[APP] localStorage에서 인증 정보 복원 중...');\r\n        try {\r\n          const userData = JSON.parse(localStorage.getItem('user_info'));\r\n          this.$store.commit('setAuth', {\r\n            token: localStorage.getItem('access_token'),\r\n            user: userData\r\n          });\r\n          // console.log('[APP] Store 인증 상태 복원 완료');\r\n        } catch (error) {\r\n          console.error('[APP] Store 복원 실패:', error);\r\n        }\r\n      }\r\n    } else {\r\n      // console.log('[APP] OAuth 처리 완료 또는 진행 중 - 자동 리다이렉트 건너뛰기');\r\n    }\r\n  },\r\n  mounted() {\r\n    // // console.log('현재 사용자 정보:', this.currentUser)\r\n    // 참조가 존재하는지 확인 후 접근\r\n    if (this.$refs.inputField) {\r\n      this.$refs.inputField.focus();\r\n      this.adjustTextareaHeight(); // 초기 높이 설정\r\n    }\r\n    \r\n    // Initialize API input fields\r\n    this.apiKeyInput = this.$store.state.apiKey || '';\r\n    this.llamaApiKeyInput = this.$store.state.llamaApiKey || '';\r\n    this.llamaApiBaseInput = this.$store.state.llamaApiBase || '';\r\n    this.llamaApiEndpointInput = this.$store.state.llamaApiEndpoint || '';\r\n    \r\n    // Check system preference for dark mode\r\n    if (localStorage.getItem('darkMode') === null) {\r\n      this.isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      localStorage.setItem('darkMode', this.isDarkMode);\r\n    }\r\n    \r\n    // 인증 토큰 유효성 검사 (localStorage의 JWT 토큰 확인)\r\n    const jwtToken = localStorage.getItem('access_token');\r\n    const userInfo = localStorage.getItem('user_info');\r\n    \r\n    if (jwtToken && userInfo) {\r\n      try {\r\n        const userData = JSON.parse(userInfo);\r\n        // store 상태와 localStorage 동기화\r\n        if (!this.$store.state.isAuthenticated) {\r\n          this.$store.commit('setAuth', {\r\n            token: jwtToken,\r\n            user: userData\r\n          });\r\n          \r\n          // 인증 상태 복원 후 대화 목록 가져오기\r\n          // // console.log('[APP] 인증 상태 복원 후 대화 목록 가져오기');\r\n          if (!this._conversationsFetched) {\r\n            this._conversationsFetched = true;\r\n            this.$store.dispatch('fetchConversations').then(() => {\r\n              // console.log('[APP] mounted에서 대화 목록 가져오기 완료');\r\n            }).catch(error => {\r\n              console.error('[APP] mounted에서 대화 목록 가져오기 실패:', error);\r\n            });\r\n          }\r\n        }\r\n        this.validateAuthToken();\r\n      } catch (error) {\r\n        console.error('Stored user info parsing error:', error);\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('user_info');\r\n      }\r\n    }\r\n    \r\n    // Add click event listener to close dropdowns when clicking outside\r\n    document.addEventListener('click', this.closeDropdowns);\r\n    \r\n    // 복사 허용 이벤트 핸들러 추가\r\n    this.enableCopying();\r\n  },\r\n  beforeUnmount() {\r\n    // Remove event listener before component is destroyed\r\n    document.removeEventListener('click', this.closeDropdowns);\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n@import './assets/styles/index.css';\r\n</style>\r\n\r\n","import { render } from \"./App.vue?vue&type=template&id=c553feb4\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=c553feb4&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div class=\"home\">\r\n        <div class=\"chat-container\">\r\n            <!-- 채팅 메시지 영역 -->\r\n      <div class=\"chat-messages\" ref=\"chatMessages\">\r\n        <!-- 랭그래프 컨테이너 -->\r\n        <LanggraphContainer\r\n          :show-langgraph=\"langgraph.showLanggraph.value\"\r\n          :current-step=\"langgraph.currentStep.value\"\r\n          :original-input=\"langgraph.originalInput.value\"\r\n          :augmented-keywords=\"langgraph.augmentedKeywords.value\"\r\n          :is-searching=\"langgraph.isSearching.value\"\r\n          :search-results=\"langgraph.searchResults.value\"\r\n          :searched-documents=\"langgraph.searchedDocuments.value\"\r\n          :has-search-completed=\"langgraph.hasSearchCompleted.value\"\r\n          :is-generating-answer=\"langgraph.isGeneratingAnswer.value\"\r\n          :final-answer=\"langgraph.finalAnswer.value\"\r\n          :streaming-answer=\"langgraph.streamingAnswer.value\"\r\n          :is-streaming-answer=\"langgraph.isStreamingAnswer.value\"\r\n          :analysis-image-url=\"langgraph.analysisImageUrl.value\"\r\n          :image-load-failed=\"langgraph.imageLoadFailed.value\"\r\n          :failed-image-url=\"langgraph.failedImageUrl.value\"\r\n          :last-image-url=\"langgraph.lastImageUrl.value\"\r\n          @open-search-result=\"openSearchResultPopup\"\r\n          @open-image-in-new-tab=\"openImageInNewTab\"\r\n        />\r\n        \r\n        <!-- 메시지 리스트 -->\r\n        <div v-if=\"!$store.state.currentConversation\" class=\"empty-state\">\r\n          <div class=\"empty-illustration\">\r\n            <svg class=\"empty-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"9\" y1=\"3\" x2=\"9\" y2=\"21\"></line>\r\n              <line x1=\"15\" y1=\"3\" x2=\"15\" y2=\"21\"></line>\r\n              <line x1=\"3\" y1=\"9\" x2=\"21\" y2=\"9\"></line>\r\n              <line x1=\"3\" y1=\"15\" x2=\"21\" y2=\"15\"></line>\r\n            </svg>\r\n          </div>\r\n          <p>Start a new conversation</p>\r\n        </div>\r\n        \r\n        <MessageList\r\n          :current-messages=\"currentMessages\"\r\n          :is-streaming=\"$store.state.isStreaming\"\r\n          :streaming-message=\"$store.state.streamingMessage\"\r\n          :streaming-visible=\"sse.streamingVisible.value\"\r\n          :last-message-height=\"scroll.lastMessageHeight.value\"\r\n          @submit-feedback=\"submitFeedback\"\r\n        />\r\n            </div>\r\n            \r\n      <!-- 채팅 입력 -->\r\n      <ChatInput\r\n        :is-loading=\"messages.isLoading.value\"\r\n        :is-streaming=\"$store.state.isStreaming\"\r\n        @send-message=\"sendChatMessage\"\r\n        @input-change=\"handleInputChange\"\r\n        ref=\"chatInput\"\r\n      />\r\n\r\n    <!-- 검색 결과 상세 팝업 -->\r\n    <SearchResultPopup \r\n      :show=\"showSearchResultPopup\"\r\n      :result=\"selectedSearchResult\"\r\n      @close=\"closeSearchResultPopup\"\r\n    />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'vuex';\r\nimport SearchResultPopup from '@/components/SearchResultPopup.vue';\r\nimport LanggraphContainer from '@/components/LanggraphContainer.vue';\r\nimport MessageList from '@/components/MessageList.vue';\r\nimport ChatInput from '@/components/ChatInput.vue';\r\nimport { useLanggraph } from '@/composables/useLanggraph.js';\r\nimport { useMessages } from '@/composables/useMessages.js';\r\nimport { useSSE } from '@/composables/useSSE.js';\r\nimport { useScroll } from '@/composables/useScroll.js';\r\n// judgeQuestionType은 더 이상 사용하지 않음 - isFollowupQuestion 플래그 사용\r\nimport { \r\n  executeLanggraphFlow\r\n} from '@/utils/langGraphExecutor.js';\r\nimport { \r\n  executeAdditionalQuestionFlowWrapper\r\n} from '@/utils/additionalQuestionHandler.js';\r\nimport {\r\n  restoreLanggraphFromConversation,\r\n  // restoreLanggraphFromCurrentMeages\r\n} from '@/utils/conversationRestorer.js';\r\nimport {\r\n  saveLangGraphMessage\r\n} from '@/utils/messageStorage.js';\r\n\r\nexport default {\r\n  name: 'HomePage',\r\n  components: {\r\n    SearchResultPopup,\r\n    LanggraphContainer,\r\n    MessageList,\r\n    ChatInput\r\n  },\r\n  setup() {\r\n    // Composables 사용\r\n    const langgraph = useLanggraph();\r\n    const messages = useMessages();\r\n    const sse = useSSE();\r\n    const scroll = useScroll();\r\n    \r\n    return {\r\n      langgraph,\r\n      messages,\r\n      sse,\r\n      scroll\r\n    };\r\n  },\r\n  data() {\r\n    return {\r\n      showSearchResultPopup: false, // 검색 결과 팝업 표시 여부\r\n      selectedSearchResult: null, // 선택된 검색 결과\r\n      isNewConversation: false, // 새 대화 상태 플래그 (초기값: false, 새로고침 시 복원 가능)\r\n      isPopupChanging: false, // popup 상태 변경 중 플래그 (scrollToBottom 방지)\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'conversations',\r\n      'currentConversation',\r\n      'isStreaming',\r\n      'streamingMessage'\r\n    ]),\r\n    // 메시지 배열의 반응성을 보장하기 위한 computed 속성 (캐시 제거)\r\n    currentMessages() {\r\n      const currentConversation = this.$store.state.currentConversation;\r\n      \r\n      if (!currentConversation || !currentConversation.messages) {\r\n        return [];\r\n      }\r\n      \r\n      return currentConversation.messages;\r\n    },\r\n    // 랭그래프 진행률 계산\r\n    progressPercentage() {\r\n      return (this.langgraph.currentStep.value / 4) * 100;\r\n    }\r\n  },\r\n  methods: {\r\n    // LangGraph 메시지 저장 메서드\r\n    async saveLangGraphMessage(result) {\r\n      await saveLangGraphMessage(result, this);\r\n    },\r\n\r\n    // 랭그래프 컨테이너로 스크롤\r\n    scrollToLanggraph() {\r\n      this.scroll?.scrollToLanggraph();\r\n    },\r\n\r\n    // 메시지 전송\r\n    async sendChatMessage() {\r\n      if (!this.$refs.chatInput.userInput.trim() || this.messages.isLoading.value || this.$store.state.isStreaming) {\r\n        return;\r\n      }\r\n      \r\n      const messageText = this.$refs.chatInput.userInput.trim();\r\n      this.$refs.chatInput.clearInput();\r\n      \r\n      // 질문 타입 판단\r\n      const conversationId = this.$store.state.currentConversation?.id || null;\r\n      // isFollowupQuestion 플래그 기반으로 처리\r\n      try {\r\n        if (this.langgraph.isFollowupQuestion.value) {\r\n          // console.log('💬 추가 질문 - 일반 LLM 실행');\r\n          // console.log('🔍 [DEBUG] 추가질문 실행 전 UI 상태:');\r\n          // console.log('  - showLanggraph:', this.langgraph.showLanggraph.value);\r\n          // console.log('  - currentStep:', this.langgraph.currentStep.value);\r\n          // console.log('  - isFollowupQuestion:', this.langgraph.isFollowupQuestion.value);\r\n          \r\n          await executeAdditionalQuestionFlowWrapper(messageText, conversationId, this);\r\n          \r\n          // console.log('🔍 [DEBUG] 추가질문 실행 후 UI 상태:');\r\n          // console.log('  - showLanggraph:', this.langgraph.showLanggraph.value);\r\n          // console.log('  - currentStep:', this.langgraph.currentStep.value);\r\n          // console.log('  - isFollowupQuestion:', this.langgraph.isFollowupQuestion.value);\r\n        } else {\r\n          // console.log('🔬 최초 질문 - LangGraph 실행');\r\n          await executeLanggraphFlow(messageText, this);\r\n        }\r\n        \r\n        // console.log('🔍 [DEBUG] $nextTick 호출 전 UI 상태:');\r\n        // console.log('  - showLanggraph:', this.langgraph.showLanggraph.value);\r\n        // console.log('  - currentStep:', this.langgraph.currentStep.value);\r\n        \r\n        this.$nextTick(() => {\r\n          // console.log('  - showLanggraph:', this.langgraph.showLanggraph.value);\r\n          // console.log('  - currentStep:', this.langgraph.currentStep.value);\r\n          \r\n          this.scroll?.scrollToBottom(this.$refs.chatMessages);\r\n          this.scroll?.safeFocus(this.$refs.chatInput?.$refs?.inputField);\r\n        });\r\n          } catch (error) {\r\n        console.error('Error sending message:', error);\r\n        this.messages.isLoading.value = false;\r\n        this.langgraph.isSearching.value = false;\r\n      }\r\n    },\r\n\r\n    // 피드백 처리\r\n    async submitFeedback(messageId, feedback) {\r\n      const currentMessage = this.currentMessages.find(m => m.id === messageId);\r\n      if (!currentMessage) {\r\n        console.warn('⚠️ 피드백 처리 실패: 메시지를 찾을 수 없음', messageId);\r\n        return;\r\n      }\r\n      \r\n      console.log('👍 피드백 처리 시작:', { messageId, feedback, currentFeedback: currentMessage.feedback });\r\n      \r\n      try {\r\n        await this.$store.dispatch('submitFeedback', { messageId, feedback });\r\n        console.log('✅ 피드백 처리 완료');\r\n      } catch (error) {\r\n        console.error('❌ 피드백 처리 실패:', error);\r\n      }\r\n    },\r\n\r\n    // 입력 변경 처리 (텍스트 영역 높이 조정)\r\n    handleInputChange() {\r\n      // ChatInput 컴포넌트의 텍스트 영역 높이 조정\r\n      if (this.$refs.chatInput && this.$refs.chatInput.adjustTextareaHeight) {\r\n        this.$refs.chatInput.adjustTextareaHeight();\r\n      }\r\n    },\r\n\r\n    // 검색 결과 팝업 열기\r\n    openSearchResultPopup(result) {\r\n      this.isPopupChanging = true;  // 팝업 상태 변경 중 플래그 설정\r\n      this.selectedSearchResult = result;\r\n      this.showSearchResultPopup = true;\r\n      // console.log('🔍 검색 결과 팝업 열기:', result.title);\r\n      // 팝업 열기 완료 후 플래그 해제\r\n      this.$nextTick(() => {\r\n        setTimeout(() => {\r\n          this.isPopupChanging = false;\r\n        }, 100);\r\n      });\r\n    },\r\n\r\n    // 검색 결과 팝업 닫기\r\n    closeSearchResultPopup() {\r\n      this.isPopupChanging = true;  // 팝업 상태 변경 중 플래그 설정\r\n      this.showSearchResultPopup = false;\r\n      this.selectedSearchResult = null;\r\n      // 팝업 닫기 완료 후 플래그 해제\r\n      this.$nextTick(() => {\r\n        setTimeout(() => {\r\n          this.isPopupChanging = false;\r\n        }, 100);\r\n      });\r\n    },\r\n    \r\n    async newConversation() {\r\n      // 중복 실행 방지\r\n      if (this.isCreatingConversation) {\r\n        console.log('[HOME] 새 대화 생성 중 - 중복 실행 방지');\r\n        return;\r\n      }\r\n      \r\n      this.isCreatingConversation = true;\r\n      // console.log('🔄 새 대화 UI 초기화 시작...');\r\n      \r\n      // 새 대화 상태 설정 (실시간 기능 활성화) - 먼저 설정\r\n      this.isNewConversation = true;\r\n      this.isFirstQuestionInSession = true;\r\n      this.isRestoringConversation = false;\r\n      \r\n      // 새 대화는 최초 질문이므로 isFollowupQuestion을 false로 설정\r\n      this.langgraph.isFollowupQuestion.value = false;\r\n      console.log('✅ 새 대화 생성 - isFollowupQuestion을 false로 설정');\r\n      \r\n      // 즉시 UI 상태만 초기화 (백엔드는 실제 메시지 전송 시 생성)\r\n      this.userInput = '';\r\n      this.langgraph.resetLanggraphState();\r\n      this.finalAnswer = '';\r\n      this.searchResults = [];\r\n      this.extractedKeywords = null;\r\n      this.extractedDbSearchTitle = null;\r\n      \r\n      // 캐시 초기화\r\n      this.lastRestoredConversationId = null;\r\n      this.lastRestoredMessageCount = 0;\r\n      \r\n      // 랭그래프 캐시 초기화 (다른 대화로 전환 시 복원 가능하도록)\r\n      this.langgraph.lastRestoredConversationId.value = null;\r\n      \r\n      // 즉시 DB에 새 대화 생성 (ChatGPT 방식)\r\n      try {\r\n        const newConversation = await this.$store.dispatch('createConversation');\r\n        if (newConversation) {\r\n          // 현재 대화로 설정하여 UI에 활성화\r\n          this.$store.commit('setCurrentConversation', newConversation);\r\n          console.log('✅ 새 대화 생성 완료:', newConversation.id);\r\n        } else {\r\n          console.error('❌ 새 대화 생성 실패');\r\n          alert('새 대화 생성에 실패했습니다. 다시 시도해주세요.');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ 새 대화 생성 오류:', error);\r\n        alert('새 대화 생성 중 오류가 발생했습니다.');\r\n      }\r\n      \r\n      // 플래그 해제\r\n      this.isCreatingConversation = false;\r\n      \r\n      // console.log('✅ 새 대화 UI 초기화 완료');\r\n      \r\n      // 새 대화 생성 완료 후 플래그 리셋 (watcher 실행 후에 리셋)\r\n      setTimeout(() => {\r\n        this.isNewConversation = false;\r\n        this.scroll?.scrollToBottom(this.$refs.chatMessages);\r\n        this.scroll?.safeFocus(this.$refs.chatInput?.$refs?.inputField);\r\n      }, 100); // watcher가 실행된 후에 리셋\r\n    },\r\n    \r\n    // 토큰 갱신 메서드\r\n    async refreshToken() {\r\n      try {\r\n        // console.log('🔄 토큰 갱신 시작...');\r\n        \r\n        // 현재 토큰으로 갱신 시도\r\n        const response = await fetch('http://localhost:8000/api/auth/refresh', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          // console.log('✅ 토큰 갱신 성공');\r\n          \r\n          // 새 토큰을 스토어에 저장\r\n          this.$store.commit('setToken', data.access_token);\r\n          \r\n          return true;\r\n        } else {\r\n          console.error('❌ 토큰 갱신 실패:', response.status);\r\n          throw new Error('토큰 갱신 실패');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ 토큰 갱신 중 오류:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    \r\n    \r\n    \r\n    \r\n    // 이미지를 새 탭에서 열기\r\n    openImageInNewTab(imageUrl) {\r\n      if (!imageUrl) {\r\n        console.warn('이미지 URL이 없습니다');\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        // 새 탭에서 이미지 열기\r\n        window.open(imageUrl, '_blank', 'noopener,noreferrer');\r\n      } catch (error) {\r\n        console.error('이미지 열기 실패:', error);\r\n        // 대체 방법: 현재 탭에서 이미지로 이동\r\n        try {\r\n          window.location.href = imageUrl;\r\n        } catch (fallbackError) {\r\n          console.error('대체 방법도 실패:', fallbackError);\r\n        }\r\n      }\r\n    },\r\n    \r\n    // 스크롤 위치 안정화를 위한 메서드\r\n    preserveScrollPosition() {\r\n      const scrollEl = this.$refs.chatMessages;\r\n      if (scrollEl) {\r\n        this.lastScrollPosition = scrollEl.scrollTop;\r\n      }\r\n    },\r\n  },\r\n  beforeUnmount() {\r\n    // WebSocket 사용하지 않음\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.scroll?.safeFocus(this.$refs.chatInput?.$refs?.inputField);\r\n      this.scroll?.adjustTextareaHeight(this.$refs.chatInput?.$refs?.inputField); // 초기 높이 설정\r\n// 텍스트 선택은 CSS에서 처리됨\r\n    });\r\n    \r\n    // 로그인 후 새 대화창 상태 확인\r\n    if (this.$store.state.loginNewConversation) {\r\n      // console.log('🔄 로그인 후 새 대화창 초기화 시작...');\r\n      this.newConversation();\r\n      this.$store.commit('setLoginNewConversation', false); // 플래그 리셋\r\n      // console.log('✅ 로그인 후 새 대화창 초기화 완료');\r\n    } \r\n    // watcher에서 자동으로 복원하므로 mounted에서는 처리하지 않음\r\n    // (중복 API 호출 방지)\r\n  },\r\n  updated() {\r\n    // popup 상태 변경 중에는 스크롤하지 않음\r\n    if (this.isPopupChanging) {\r\n      return;\r\n    }\r\n    // DOM 업데이트 완료 후 스크롤 조정 (통합된 쓰로틀링 사용)\r\n    this.scroll?.scrollToBottom(this.$refs.chatMessages);\r\n  },\r\n  watch: {\r\n    // 팝업 상태 변경 시 스크롤 방지\r\n    showSearchResultPopup() {\r\n      // 팝업 열기/닫기 시 스크롤 실행하지 않음\r\n    },\r\n\r\n    // ChatInput의 userInput 변경 감지 (ChatInput 컴포넌트 내부에서 처리됨)\r\n    // 스트리밍 메시지가 업데이트될 때마다 스크롤을 아래로 이동 (최적화된 쓰로틀링)\r\n    '$store.state.streamingMessage'() {\r\n      // 스크롤 실행 주기 완화 - 0.5초마다만 실행\r\n      if (this.scroll && !this.scroll.scrollThrottled.value) {\r\n        this.scroll.scrollThrottled.value = true;\r\n        this.scroll.scrollToBottom(this.$refs.chatMessages);\r\n        setTimeout(() => {\r\n          if (this.scroll) {\r\n            this.scroll.scrollThrottled.value = false;\r\n          }\r\n        }, 500);\r\n      }\r\n    },\r\n    // 현재 대화가 변경될 때 스크롤을 맨 아래로 이동하고 랭그래프 복원 (캐시 제거)\r\n    '$store.state.currentConversation'(newConversation) {\r\n      // 랭그래프 완료 직후에는 아무것도 하지 않음 (상태 유지)\r\n      if (this.langgraph.isLanggraphJustCompleted.value) {\r\n        console.log('✅ 랭그래프 완료 직후 - watcher 완전 스킵하여 상태 유지');\r\n        return; // 스크롤도 하지 않음\r\n      }\r\n      \r\n      // 기존 대화 선택 시 실시간 기능 비활성화\r\n      if (this.$store.state.conversationRestored) {\r\n        this.isNewConversation = false;\r\n        this.isFirstQuestionInSession = false;\r\n        this.$store.commit('setConversationRestored', false); // 플래그 리셋\r\n      }\r\n      \r\n      // 새 대화 생성 중이면 복원하지 않음\r\n      if (this.isNewConversation) {\r\n        // console.log('📝 새 대화 생성 중 - 랭그래프 복원 스킵');\r\n        this.$nextTick(() => {\r\n          this.scroll?.scrollToBottom(this.$refs.chatMessages);\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // 스크롤과 랭그래프 복원을 비동기로 처리하여 UI 블로킹 방지\r\n      this.$nextTick(() => {\r\n        this.scroll?.scrollToBottom(this.$refs.chatMessages);\r\n        \r\n        // 랭그래프 복원 로직 (비동기) - 새 대화가 아닌 경우에만 복원\r\n        if (newConversation) {\r\n          // 메시지가 있는 경우 바로 복원\r\n          if (newConversation.messages && newConversation.messages.length > 0) {\r\n            console.log('🔄 기존 대화 선택 - 랭그래프 복원 시작 (메시지 있음)');\r\n            // 비동기 처리로 UI 블로킹 방지\r\n            setTimeout(async () => {\r\n              await restoreLanggraphFromConversation(newConversation, this);\r\n              // 복원 후 UI 강제 업데이트\r\n              this.$forceUpdate();\r\n              this.$nextTick(() => {\r\n                this.scroll?.scrollToBottom(this.$refs.chatMessages);\r\n              });\r\n            }, 0);\r\n          } else {\r\n            // 메시지가 없는 경우 (새로고침 등) API로 가져와서 복원\r\n            console.log('🔄 메시지 없음 - API로 메시지 가져오기:', newConversation.id);\r\n            setTimeout(async () => {\r\n              try {\r\n                const response = await fetch(`http://localhost:8000/api/conversations/${newConversation.id}/messages`, {\r\n                  method: 'GET',\r\n                  headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  credentials: 'include'\r\n                });\r\n                \r\n                if (response.ok) {\r\n                  const data = await response.json();\r\n                  console.log('✅ 메시지 가져오기 성공:', data.messages?.length || 0, '개');\r\n                  \r\n                  // 메시지를 포함한 대화 객체 생성\r\n                  const conversationWithMessages = {\r\n                    ...newConversation,\r\n                    messages: data.messages || []\r\n                  };\r\n                  \r\n                  // store 업데이트 (watcher 재실행 방지를 위해 조용히 업데이트)\r\n                  this.$store.state.currentConversation.messages = data.messages || [];\r\n                  \r\n                  // 랭그래프 복원\r\n                  await restoreLanggraphFromConversation(conversationWithMessages, this);\r\n                  \r\n                  // UI 업데이트\r\n                  this.$forceUpdate();\r\n                  this.$nextTick(() => {\r\n                    this.scroll?.scrollToBottom(this.$refs.chatMessages);\r\n                  });\r\n                } else {\r\n                  console.error('❌ 메시지 가져오기 실패:', response.status);\r\n                }\r\n              } catch (error) {\r\n                console.error('❌ 메시지 가져오기 오류:', error);\r\n              }\r\n            }, 0);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    // shouldScrollToBottom 상태가 true로 변경될 때 스크롤을 맨 아래로 이동 (최적화)\r\n    '$store.state.shouldScrollToBottom'(newValue) {\r\n      if (newValue) {\r\n        this.scroll?.scrollToBottom(this.$refs.chatMessages); // 통합된 쓰로틀링 사용\r\n        this.$store.commit('setShouldScrollToBottom', false);\r\n      }\r\n    },\r\n    // 스트리밍 상태 변경 워처 (최적화된 ResizeObserver)\r\n    '$store.state.isStreaming'(newValue) {\r\n      if (newValue) {\r\n        // 스트리밍 시작 시\r\n        this.$nextTick(() => {\r\n          this.streamingVisible = true;\r\n          \r\n          if (this.$refs.streamingText) {\r\n            // 최적화된 ResizeObserver - 쓰로틀링 통합\r\n            if (!this.observer) {\r\n              this.observer = new ResizeObserver(() => {\r\n                this.scroll?.scrollToBottom(this.$refs.chatMessages); // 통합된 쓰로틀링 사용\r\n              });\r\n            }\r\n            this.observer.observe(this.$refs.streamingText);\r\n          }\r\n        });\r\n      } else {\r\n        // 스트리밍 종료 시\r\n        this.streamingVisible = false;\r\n        \r\n        // observer 정리\r\n        if (this.observer) {\r\n          this.observer.disconnect();\r\n          this.observer = null;\r\n        }\r\n        \r\n        // 스트리밍 완료 후 스크롤 조정\r\n        this.scroll?.scrollToBottom(this.$refs.chatMessages); // 통합된 쓰로틀링 사용\r\n      }\r\n    },\r\n    // 새 대화 생성 트리거 감시\r\n    '$store.state._newConversationTrigger'(newVal, oldVal) {\r\n      // 값이 실제로 변경되었을 때만 실행 (중복 실행 방지)\r\n      if (newVal && newVal !== oldVal) {\r\n        console.log('[HOME] 새 대화 트리거 감지:', newVal);\r\n      // 새 대화 생성 시 랭그래프 상태 초기화\r\n      this.langgraph.resetLanggraphState();\r\n        // 새 대화 생성\r\n        this.newConversation();\r\n      }\r\n    },\r\n    // currentMessages 변경 감지하여 빈 메시지일 때 랭그래프 숨기기\r\n    currentMessages(newMessages) {\r\n      if (!newMessages || newMessages.length === 0) {\r\n        this.langgraph.showLanggraph.value = false;\r\n      }\r\n    }\r\n  },\r\n  \r\n  beforeDestroy() {\r\n    // 메모리 누수 방지를 위한 정리 작업\r\n    if (this.scrollTimeout) {\r\n      clearTimeout(this.scrollTimeout);\r\n      this.scrollTimeout = null;\r\n    }\r\n    \r\n    // WebSocket 사용하지 않음\r\n    \r\n    // Observer 정리\r\n    if (this.observer) {\r\n      this.observer.disconnect();\r\n      this.observer = null;\r\n    }\r\n    \r\n    // console.log('🧹 Home 컴포넌트 정리 완료');\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n@import '../assets/styles/home.css';\r\n</style> \r\n","<template>\r\n  <div v-if=\"show\" class=\"search-result-popup-overlay\" @click=\"closePopup\">\r\n    <div class=\"search-result-popup\" @click.stop>\r\n      <div class=\"popup-header\">\r\n        <h3>검색 결과 상세</h3>\r\n        <button class=\"close-btn\" @click=\"closePopup\">×</button>\r\n      </div>\r\n      <div class=\"popup-content\" v-if=\"result\">\r\n        <div class=\"popup-section\">\r\n          <h4>📄 문서 제목</h4>\r\n          <p>{{ result.res_payload?.document_name || result.title || '제목 없음' }}</p>\r\n        </div>\r\n        <div class=\"popup-section\">\r\n          <h4>📊 유사도 점수</h4>\r\n          <p>{{ (result.res_score || result.score || 0).toFixed(4) }}</p>\r\n        </div>\r\n        <div class=\"popup-section\">\r\n          <h4>📝 요약</h4>\r\n          <p>{{ result.res_payload?.vector?.summary_result || result.summary || '요약 없음' }}</p>\r\n        </div>\r\n        <div class=\"popup-section\">\r\n          <h4>📖 전체 내용</h4>\r\n          <p class=\"full-text\">{{ result.res_payload?.vector?.text || result.text || '내용 없음' }}</p>\r\n        </div>\r\n        <div\r\n          v-if=\"\r\n            getImageUrls(\r\n              result.res_payload?.vector?.image_url ||\r\n              result.res_payload?.image_url ||\r\n              result.image_url ||\r\n              result.analysis_image_url\r\n            ).length > 0\r\n          \"\r\n          class=\"popup-section\"\r\n        >\r\n          <h4>🖼️ 관련 이미지</h4>\r\n          <div class=\"popup-image-container\">\r\n            <div\r\n              v-for=\"(imageUrl, index) in getImageUrls(\r\n                result.res_payload?.vector?.image_url ||\r\n                result.res_payload?.image_url ||\r\n                result.image_url ||\r\n                result.analysis_image_url\r\n              )\"\r\n              :key=\"index\"\r\n              class=\"image-item\"\r\n            >\r\n              <img \r\n                :src=\"getFullImageUrl(imageUrl)\" \r\n                :alt=\"`${result.res_payload?.document_name || result.title} - 이미지 ${index + 1}`\"\r\n                class=\"popup-image\"\r\n                @error=\"handleImageError\"\r\n                @load=\"handleImageLoad\"\r\n              />\r\n            </div>\r\n            <div v-if=\"imageLoading\" class=\"image-loading\">\r\n              <div class=\"spinner\"></div>\r\n              <span>이미지 로딩 중...</span>\r\n            </div>\r\n            <div v-if=\"imageError\" class=\"image-error\">\r\n              <span>🖼️ 이미지를 불러올 수 없습니다</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'SearchResultPopup',\r\n  props: {\r\n    show: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    result: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      imageLoading: false,\r\n      imageError: false\r\n    };\r\n  },\r\n  methods: {\r\n    closePopup() {\r\n      this.$emit('close');\r\n    },\r\n    getImageUrls(imageUrl) {\r\n      console.log('🖼️ 팝업 이미지 URL 원본 데이터:', {\r\n        payloadVector: this.result?.res_payload?.vector?.image_url,\r\n        payloadRoot: this.result?.res_payload?.image_url,\r\n        direct: this.result?.image_url,\r\n        analysis: this.result?.analysis_image_url,\r\n        incoming: imageUrl\r\n      });\r\n      \r\n      if (!imageUrl) return [];\r\n      \r\n      // 배열인 경우\r\n      if (Array.isArray(imageUrl)) {\r\n        const processedUrls = imageUrl.map(url => {\r\n          console.log('🔍 처리 중인 URL:', url);\r\n          // \"0:\"/appdata/RC/images/daily_note_19_whole.jpg\" 형식에서 실제 URL 추출\r\n          if (typeof url === 'string' && url.includes(':')) {\r\n            const extractedUrl = url.split(':').slice(1).join(':'); // 첫 번째 콜론 이후 부분\r\n            console.log('✅ 추출된 URL:', extractedUrl);\r\n            return extractedUrl;\r\n          }\r\n          return url;\r\n        }).filter(url => url); // 빈 문자열 제거\r\n        \r\n        console.log('🎯 최종 처리된 URL 배열:', processedUrls);\r\n        return processedUrls;\r\n      }\r\n      \r\n      // 문자열인 경우\r\n      if (typeof imageUrl === 'string') {\r\n        if (imageUrl.includes(':')) {\r\n          const extractedUrl = imageUrl.split(':').slice(1).join(':');\r\n          console.log('✅ 문자열에서 추출된 URL:', extractedUrl);\r\n          return extractedUrl ? [extractedUrl] : [];\r\n        }\r\n        return [imageUrl];\r\n      }\r\n      \r\n      return [];\r\n    },\r\n    getFullImageUrl(url) {\r\n      if (!url) return '';\r\n      console.log('🔗 변환 전 URL:', url);\r\n      // \"/appdata/RC/images/\" → \"https://10.172.107.182/imageview/\"\r\n      const fullUrl = url.replace(/^\\/appdata\\/RC\\/images\\//, 'https://10.172.107.182/imageview/');\r\n      // console.log('🔗 변환 후 URL:', fullUrl);\r\n      return fullUrl;\r\n    },\r\n    handleImageError(event) {\r\n      this.imageLoading = false;\r\n      this.imageError = true;\r\n      console.error('이미지 로딩 실패:', event.target.src);\r\n    },\r\n    handleImageLoad() {\r\n      this.imageLoading = false;\r\n      this.imageError = false;\r\n      // console.log('이미지 로딩 성공');\r\n    }\r\n  },\r\n  watch: {\r\n    show(newVal) {\r\n      if (\r\n        newVal &&\r\n        (this.result?.res_payload?.vector?.image_url ||\r\n          this.result?.res_payload?.image_url ||\r\n          this.result?.image_url ||\r\n          this.result?.analysis_image_url)\r\n      ) {\r\n        this.imageLoading = true;\r\n        this.imageError = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 검색 결과 팝업 스타일 */\r\n.search-result-popup-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n.search-result-popup {\r\n  background: white;\r\n  border-radius: 12px;\r\n  overflow-y: auto;\r\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\r\n  animation: slideUp 0.3s ease;\r\n  width: 70vw;\r\n  max-width: 70vw;\r\n  height: 80vh;\r\n  max-height: 80vh;\r\n}\r\n\r\n@keyframes slideUp {\r\n  from { \r\n    transform: translateY(50px);\r\n    opacity: 0;\r\n  }\r\n  to { \r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.popup-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px 24px;\r\n  border-bottom: 1px solid #e5e7eb;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border-radius: 12px 12px 0 0;\r\n}\r\n\r\n.popup-header h3 {\r\n  margin: 0;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.close-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 24px;\r\n  color: white;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  width: 30px;\r\n  height: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.close-btn:hover {\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n.popup-content {\r\n  padding: 24px;\r\n}\r\n\r\n.popup-section {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.popup-section:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.popup-section h4 {\r\n  margin: 0 0 12px 0;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: #374151;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.popup-section p {\r\n  margin: 0;\r\n  color: #6b7280;\r\n  line-height: 1.6;\r\n}\r\n\r\n.full-text {\r\n  background: #f9fafb;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  border-left: 4px solid #667eea;\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.popup-image-container {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: #f9fafb;\r\n  border-radius: 8px;\r\n  position: relative;\r\n}\r\n\r\n.image-item {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.image-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.popup-image {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.image-loading {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 40px;\r\n  color: #6b7280;\r\n}\r\n\r\n.image-error {\r\n  padding: 20px;\r\n  color: #ef4444;\r\n  text-align: center;\r\n}\r\n\r\n.image-error p {\r\n  font-size: 0.8rem;\r\n  color: #9ca3af;\r\n  margin-top: 8px;\r\n}\r\n\r\n.spinner {\r\n  width: 24px;\r\n  height: 24px;\r\n  border: 3px solid #e5e7eb;\r\n  border-top: 3px solid #667eea;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n</style>\r\n","import { render } from \"./SearchResultPopup.vue?vue&type=template&id=eeeb3cb2&scoped=true\"\nimport script from \"./SearchResultPopup.vue?vue&type=script&lang=js\"\nexport * from \"./SearchResultPopup.vue?vue&type=script&lang=js\"\n\nimport \"./SearchResultPopup.vue?vue&type=style&index=0&id=eeeb3cb2&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-eeeb3cb2\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"langgraph-container\" v-if=\"showLanggraph\">\r\n    <div class=\"langgraph-header\">\r\n      <h2>🔬 AI 분석 - 랭그래프</h2>\r\n    </div>\r\n    \r\n    <!-- 1단계: 키워드 증강 -->\r\n    <div class=\"langgraph-step\" :class=\"{ active: currentStep >= 1 }\">\r\n      <div class=\"step-header\">\r\n        <div class=\"step-number\">1</div>\r\n        <h3>키워드 증강</h3>\r\n        <div class=\"step-status\" v-if=\"currentStep >= 1\">\r\n          <span class=\"status-icon\">✓</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"step-content\">\r\n        <div class=\"input-section\" :key=\"'input-' + (originalInput || 'empty')\">\r\n          <label class=\"section-label\">입력된 내용:</label>\r\n          <div class=\"original-input\">\r\n            <span v-if=\"originalInput\">{{ originalInput }}</span>\r\n            <span v-else class=\"placeholder-text\">입력된 내용이 없습니다.</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"augmented-keywords\" :key=\"'keywords-' + (augmentedKeywords.length || 0)\">\r\n          <label class=\"section-label\">증강된 키워드:</label>\r\n          <div class=\"keywords-list\">\r\n            <span \r\n              v-for=\"keyword in augmentedKeywords\" \r\n              :key=\"keyword.id\" \r\n              class=\"keyword-tag\"\r\n              :class=\"keyword.category\"\r\n            >\r\n              {{ keyword.text }}\r\n              <span class=\"keyword-category\">{{ keyword.category }}</span>\r\n            </span>\r\n            <div v-if=\"!augmentedKeywords || augmentedKeywords.length === 0\" class=\"no-keywords\">\r\n              <div class=\"loading-container\">\r\n                <div class=\"spinner\"></div>\r\n                <span>키워드를 증강 중입니다</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 2단계: DB 검색 -->\r\n    <div class=\"langgraph-step\" :class=\"{ active: currentStep >= 2 }\">\r\n      <div class=\"step-header\">\r\n        <div class=\"step-number\">2</div>\r\n        <h3>증강된 키워드로 DB 검색</h3>\r\n        <div class=\"step-status\" v-if=\"currentStep >= 2\">\r\n          <span class=\"status-icon\">✓</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"step-content\">\r\n        <div class=\"search-status\">\r\n          <div v-if=\"currentStep >= 2 && isSearching\" class=\"searching-indicator\">\r\n            <div class=\"spinner\"></div>\r\n            <span>데이터베이스 검색 중...</span>\r\n          </div>\r\n          <div v-else-if=\"currentStep >= 2 && ((typeof searchResults === 'number' && searchResults > 0) || (Array.isArray(searchResults) && searchResults.length > 0))\" class=\"search-results\">\r\n            <label>검색 결과 ({{ typeof searchResults === 'number' ? searchResults : searchResults.length }}건):</label>\r\n            <div class=\"results-list\">\r\n              <!-- 숫자인 경우 문서 제목만 표시 -->\r\n              <template v-if=\"typeof searchResults === 'number' && searchedDocuments && searchedDocuments.length > 0\">\r\n                <div \r\n                  v-for=\"(docTitle, index) in searchedDocuments.slice(0, 5)\" \r\n                  :key=\"index\" \r\n                  class=\"result-item simple\"\r\n                >\r\n                  <div class=\"result-header\">\r\n                    <span class=\"result-number\">#{{ index + 1 }}</span>\r\n                  </div>\r\n                  <div class=\"result-content\">\r\n                    <div class=\"result-title\">{{ docTitle }}</div>\r\n                  </div>\r\n                </div>\r\n              </template>\r\n              <!-- 배열인 경우 상세 정보 표시 -->\r\n              <template v-else-if=\"Array.isArray(searchResults)\">\r\n                <div \r\n                  v-for=\"(result, index) in searchResults.slice(0, 5)\" \r\n                  :key=\"index\" \r\n                  class=\"result-item detailed clickable\"\r\n                  @click=\"$emit('openSearchResult', result)\"\r\n                >\r\n                  <div class=\"result-header\">\r\n                    <span class=\"result-number\">#{{ index + 1 }}</span>\r\n                    <span class=\"result-score\">유사도: {{ (result.res_score || result.score || 0).toFixed(4) }}</span>\r\n                  </div>\r\n                  <div class=\"result-content\">\r\n                    <div class=\"result-title\">{{ result.res_payload?.document_name || result.title || '제목 없음' }}</div>\r\n                    <div class=\"result-summary\">{{ result.res_payload?.vector?.summary_result || result.summary || '요약 없음' }}</div>\r\n                    <div class=\"result-text\">{{ result.res_payload?.vector?.text || result.text || '내용 없음' }}</div>\r\n                    <div\r\n                      v-if=\"\r\n                        result.res_payload?.vector?.image_url ||\r\n                        result.res_payload?.image_url ||\r\n                        result.image_url ||\r\n                        result.analysis_image_url\r\n                      \"\r\n                      class=\"result-image-indicator\"\r\n                    >\r\n                      🖼️ 이미지 포함 (클릭하여 보기)\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </template>\r\n            </div>\r\n          </div>\r\n          <div v-else-if=\"currentStep >= 2 && hasSearchCompleted && !isSearching && (searchResults === 0 || (Array.isArray(searchResults) && searchResults.length === 0))\" class=\"no-search-results\">\r\n            <div class=\"no-results-icon\">🔍</div>\r\n            <div class=\"no-results-message\">\r\n              <strong>검색 결과가 없습니다</strong>\r\n              <p>데이터베이스에서 관련 정보를 찾을 수 없습니다.</p>\r\n              <div class=\"improvement-suggestions\">\r\n                <strong>개선 제안:</strong>\r\n                <ul>\r\n                  <li>질문을 더 구체적으로 작성해주세요</li>\r\n                  <li>관련 키워드를 추가해주세요</li>\r\n                  <li>데이터베이스에 관련 문서가 있는지 확인해주세요</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 3단계: 답변 생성 -->\r\n    <div class=\"langgraph-step\" :class=\"{ active: currentStep >= 3 }\">\r\n      <div class=\"step-header\">\r\n        <div class=\"step-number\">3</div>\r\n        <h3>검색된 내용 기반 답변</h3>\r\n        <div class=\"step-status\" v-if=\"currentStep >= 3\">\r\n          <span class=\"status-icon\">✓</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"step-content\">\r\n        <div class=\"answer-section\">\r\n          <div v-if=\"currentStep >= 3 && isGeneratingAnswer\" class=\"generating-indicator\">\r\n            <div class=\"spinner\"></div>\r\n            <span>🤖 AI가 검색 결과를 분석하여 답변을 생성하고 있습니다...</span>\r\n          </div>\r\n          <div v-else-if=\"currentStep >= 3 && (finalAnswer || streamingAnswer)\" class=\"final-answer\">\r\n            <label>최종 답변:</label>\r\n            <div class=\"answer-content\" v-html=\"formatAnswer(streamingAnswer || finalAnswer)\"></div>\r\n            <div v-if=\"isStreamingAnswer\" class=\"streaming-indicator\">\r\n              <div class=\"typing-dots\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n              <span>답변 생성 중...</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 4단계: 분석 결과 이미지 -->\r\n    <div class=\"langgraph-step\" :class=\"{ active: currentStep >= 4 }\">\r\n      <div class=\"step-header\">\r\n        <div class=\"step-number\">4</div>\r\n        <h3>분석 결과 이미지</h3>\r\n        <div class=\"step-status\" v-if=\"currentStep >= 4\">\r\n          <span class=\"status-icon\">✓</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"step-content\">\r\n        <div class=\"image-section\">\r\n          <div v-if=\"currentStep >= 4 && analysisImageUrl\" class=\"analysis-image\">\r\n            <label>분석 결과:</label>\r\n            <div class=\"image-container\">\r\n              <!-- 이미지 오류 상태일 때만 오류 메시지 표시 -->\r\n              <div v-if=\"imageLoadFailed\" class=\"image-error-display\">\r\n                <div class=\"error-icon\">⚠️</div>\r\n                <div class=\"error-message\">\r\n                  <strong>이미지를 불러올 수 없습니다</strong>\r\n                  <p>네트워크 연결을 확인하거나 서버 상태를 점검해주세요.</p>\r\n                  <div class=\"error-url\">\r\n                    <label>이미지 URL:</label>\r\n                    <code class=\"url-text\">{{ failedImageUrl }}</code>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- 이미지가 정상이면 표시 (GET 요청 없음) -->\r\n              <div v-else class=\"image-wrapper\">\r\n                <img\r\n                  :src=\"analysisImageUrl\"\r\n                  alt=\"분석 이미지\"\r\n                  class=\"analysis-image\"\r\n                  @click=\"$emit('openImageInNewTab', analysisImageUrl)\"\r\n                />\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <div v-else-if=\"currentStep >= 4 && !analysisImageUrl\" class=\"no-image-results\">\r\n            <div class=\"no-image-icon\">🖼️</div>\r\n            <div class=\"no-image-message\">\r\n              <strong>이미지 URL이 설정되지 않았습니다</strong>\r\n              <p>RAG 검색 결과를 기반으로 한 이미지 URL이 생성되지 않았습니다.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 진행 상태 표시 -->\r\n    <div class=\"langgraph-progress\">\r\n      <div class=\"progress-bar\">\r\n        <div class=\"progress-fill\" :style=\"{ width: progressPercentage + '%' }\"></div>\r\n      </div>\r\n      <div class=\"progress-text\">{{ currentStep }}/4 단계 완료</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'LanggraphContainer',\r\n  props: {\r\n    showLanggraph: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    currentStep: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    originalInput: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    augmentedKeywords: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    isSearching: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    searchResults: {\r\n      type: [Array, Number],\r\n      default: () => []\r\n    },\r\n    searchedDocuments: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    hasSearchCompleted: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isGeneratingAnswer: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    finalAnswer: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    streamingAnswer: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    isStreamingAnswer: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    analysisImageUrl: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    imageLoadFailed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    failedImageUrl: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    lastImageUrl: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  emits: ['openSearchResult', 'openImageInNewTab'],\r\n  computed: {\r\n    progressPercentage() {\r\n      return (this.currentStep / 4) * 100;\r\n    }\r\n  },\r\n  watch: {\r\n    showLanggraph(newVal, oldVal) {\r\n      console.log('🔍 [DEBUG] LanggraphContainer showLanggraph 변화:', { oldVal, newVal });\r\n    },\r\n    currentStep(newVal, oldVal) {\r\n      console.log('🔍 [DEBUG] LanggraphContainer currentStep 변화:', { oldVal, newVal });\r\n    }\r\n  },\r\n  methods: {\r\n    formatAnswer(text) {\r\n      if (!text) return '';\r\n      \r\n      let formattedText = text;\r\n      \r\n      // 1. 헤더 처리 (### 큰 헤더)\r\n      formattedText = formattedText.replace(/^### (.*$)/gm, '<h3 class=\"markdown-h3\">$1</h3>');\r\n      formattedText = formattedText.replace(/^## (.*$)/gm, '<h2 class=\"markdown-h2\">$1</h2>');\r\n      formattedText = formattedText.replace(/^# (.*$)/gm, '<h1 class=\"markdown-h1\">$1</h1>');\r\n      \r\n      // 2. **텍스트** 형태를 <strong>텍스트</strong>로 변환 (중간 헤더)\r\n      formattedText = formattedText.replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"markdown-bold\">$1</strong>');\r\n      \r\n      // 3. 표(테이블) 처리\r\n      const tableRegex = /(\\|[^\\n]+\\|\\n)+/g;\r\n      formattedText = formattedText.replace(tableRegex, (match) => {\r\n        const lines = match.trim().split('\\n');\r\n        let tableHtml = '<table class=\"markdown-table\">';\r\n        \r\n        lines.forEach((line, index) => {\r\n          if (line.trim() && !line.match(/^\\|[-\\s|]+\\|$/)) {\r\n            const cells = line.split('|').map(cell => cell.trim()).filter(cell => cell);\r\n            if (cells.length > 0) {\r\n              tableHtml += '<tr>';\r\n              cells.forEach(cell => {\r\n                if (index === 0) {\r\n                  tableHtml += `<th class=\"markdown-th\">${cell}</th>`;\r\n                } else {\r\n                  tableHtml += `<td class=\"markdown-td\">${cell}</td>`;\r\n                }\r\n              });\r\n              tableHtml += '</tr>';\r\n            }\r\n          }\r\n        });\r\n        \r\n        tableHtml += '</table>';\r\n        return tableHtml;\r\n      });\r\n      \r\n      // 4. 리스트 처리\r\n      formattedText = formattedText.replace(/^- (.*$)/gm, '<li class=\"markdown-li\">$1</li>');\r\n      formattedText = formattedText.replace(/(<li class=\"markdown-li\">.*<\\/li>)/s, '<ul class=\"markdown-ul\">$1</ul>');\r\n      \r\n      // 5. 번호 리스트 처리\r\n      formattedText = formattedText.replace(/^\\d+\\. (.*$)/gm, '<li class=\"markdown-oli\">$1</li>');\r\n      formattedText = formattedText.replace(/(<li class=\"markdown-oli\">.*<\\/li>)/s, '<ol class=\"markdown-ol\">$1</ol>');\r\n      \r\n      // 6. 코드 블록 처리\r\n      formattedText = formattedText.replace(/```([\\s\\S]*?)```/g, '<pre class=\"markdown-code\"><code>$1</code></pre>');\r\n      formattedText = formattedText.replace(/`([^`]+)`/g, '<code class=\"markdown-inline-code\">$1</code>');\r\n      \r\n      // 7. 줄바꿈 처리\r\n      formattedText = formattedText.replace(/\\n\\n/g, '</p><p class=\"markdown-p\">');\r\n      formattedText = formattedText.replace(/\\n/g, '<br>');\r\n      \r\n      // 8. 단락 태그로 감싸기\r\n      if (!formattedText.includes('<p class=\"markdown-p\">')) {\r\n        formattedText = `<p class=\"markdown-p\">${formattedText}</p>`;\r\n      } else {\r\n        formattedText = `<p class=\"markdown-p\">${formattedText}</p>`;\r\n      }\r\n      \r\n      return formattedText;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import '../assets/styles/home.css';\r\n</style>\r\n","import { render } from \"./LanggraphContainer.vue?vue&type=template&id=7e44560c&scoped=true\"\nimport script from \"./LanggraphContainer.vue?vue&type=script&lang=js\"\nexport * from \"./LanggraphContainer.vue?vue&type=script&lang=js\"\n\nimport \"./LanggraphContainer.vue?vue&type=style&index=0&id=7e44560c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7e44560c\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"messages-container\" style=\"transform: translateZ(0)\">\r\n    <div class=\"messages-wrapper\">\r\n      <!-- 빈 상태 표시 (메시지가 없을 때) -->\r\n      <div v-if=\"!currentMessages || currentMessages.length === 0\" class=\"empty-state\">\r\n        <div class=\"empty-illustration\">\r\n          <svg class=\"empty-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n            <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n            <line x1=\"9\" y1=\"3\" x2=\"9\" y2=\"21\"></line>\r\n            <line x1=\"15\" y1=\"3\" x2=\"15\" y2=\"21\"></line>\r\n            <line x1=\"3\" y1=\"9\" x2=\"21\" y2=\"9\"></line>\r\n            <line x1=\"3\" y1=\"15\" x2=\"21\" y2=\"15\"></line>\r\n          </svg>\r\n        </div>\r\n        <p>Start a new conversation</p>\r\n      </div>\r\n      \r\n      <!-- 메시지들 -->\r\n      <div \r\n        v-for=\"message in currentMessages\" \r\n        :key=\"`msg-${message.id}-${message.role}-${message.feedback || 'none'}`\" \r\n        class=\"message-group\"\r\n      >\r\n        <!-- 질문 영역 -->\r\n        <div v-if=\"message.role === 'user'\" class=\"message user\">\r\n          <div class=\"message-content\">\r\n            <div class=\"message-text\">{{ message.question || '' }}</div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 답변 영역 (질문 아래) - ans 필드가 있는 경우에만 표시 -->\r\n        <div v-if=\"message.role === 'user' && message.ans\" class=\"message assistant\">\r\n          <div class=\"message-content\">\r\n            <div class=\"message-text\" v-html=\"formatAnswer(message.ans)\"></div>\r\n          </div>\r\n          <!-- 답변 영역에만 피드백 버튼 표시 -->\r\n          <div class=\"message-actions\">\r\n          <button \r\n            :key=\"`thumbs-up-${message.id}-${feedbackUpdateTrigger}`\"\r\n            class=\"action-btn thumbs-up\" \r\n            :class=\"{ \r\n              active: messageFeedbackStates[message.id] === 'positive',\r\n              disabled: isStreaming || isMessageStreaming(message.id)\r\n            }\"\r\n            @click=\"!isStreaming && !isMessageStreaming(message.id) && $emit('submitFeedback', message.id, 'positive')\"\r\n            :disabled=\"isStreaming || isMessageStreaming(message.id)\"\r\n            :title=\"getFeedbackButtonTitle(message.id, 'positive')\"\r\n          >\r\n            <svg class=\"action-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <path d=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"></path>\r\n            </svg>\r\n          </button>\r\n          <button \r\n            :key=\"`thumbs-down-${message.id}-${feedbackUpdateTrigger}`\"\r\n            class=\"action-btn thumbs-down\" \r\n            :class=\"{ \r\n              active: messageFeedbackStates[message.id] === 'negative',\r\n              disabled: isStreaming || isMessageStreaming(message.id)\r\n            }\"\r\n            @click=\"!isStreaming && !isMessageStreaming(message.id) && $emit('submitFeedback', message.id, 'negative')\"\r\n            :disabled=\"isStreaming || isMessageStreaming(message.id)\"\r\n            :title=\"getFeedbackButtonTitle(message.id, 'negative')\"\r\n          >\r\n            <svg class=\"action-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <path d=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h3a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2h-3\"></path>\r\n            </svg>\r\n          </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 스트리밍 중인 메시지 표시 (답변 영역) -->\r\n      <div \r\n        v-if=\"isStreaming && streamingVisible \"\r\n        key=\"streaming-message\"\r\n        class=\"message assistant streaming\"\r\n        :style=\"{\r\n          minHeight: lastMessageHeight + 'px',\r\n          opacity: 1\r\n        }\"\r\n      >\r\n        <div class=\"message-content\" ref=\"streamingContent\">\r\n          <div class=\"message-text\" ref=\"streamingText\">\r\n            {{ streamingMessage }}<span class=\"cursor\">|</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'MessageList',\r\n  props: {\r\n    currentMessages: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    isStreaming: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    streamingMessage: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    streamingVisible: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    lastMessageHeight: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n  },\r\n  emits: ['submitFeedback'],\r\n  computed: {\r\n    // 피드백 업데이트 트리거를 감지하여 강제 리렌더링\r\n    feedbackUpdateTrigger() {\r\n      return this.$store.state.feedbackUpdateTrigger || 0;\r\n    },\r\n    // 각 메시지의 피드백 상태를 computed로 관리\r\n    messageFeedbackStates() {\r\n      const states = {};\r\n      this.currentMessages.forEach(message => {\r\n        states[message.id] = message.feedback;\r\n      });\r\n      return states;\r\n    }\r\n  },\r\n  watch: {\r\n    isStreaming(newValue) {\r\n      console.log('🔄 스트리밍 상태 변경:', newValue);\r\n    },\r\n    streamingVisible(newValue) {\r\n      console.log('🔄 스트리밍 영역 표시 상태 변경:', newValue);\r\n    },\r\n    // 피드백 상태 변경을 감지하여 강제 업데이트\r\n    feedbackUpdateTrigger() {\r\n      console.log('🔄 피드백 트리거 변경 감지:', this.feedbackUpdateTrigger);\r\n      // 강제 리렌더링을 위해 $forceUpdate 호출\r\n      this.$forceUpdate();\r\n    },\r\n    // 메시지 배열 변경 감지\r\n    messages: {\r\n      handler() {\r\n        console.log('🔄 메시지 배열 변경 감지');\r\n        // 메시지가 변경되면 강제 업데이트\r\n        this.$forceUpdate();\r\n      },\r\n      deep: true\r\n    },\r\n    // currentConversation 변경 감지\r\n    '$store.state.currentConversation': {\r\n      handler() {\r\n        console.log('🔄 currentConversation 변경 감지');\r\n        this.$forceUpdate();\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  methods: {\r\n    formatAnswer(text) {\r\n      if (!text) return '';\r\n      \r\n      let formattedText = text;\r\n      \r\n      // 1. 헤더 처리 (### 큰 헤더)\r\n      formattedText = formattedText.replace(/^### (.*$)/gm, '<h3 class=\"markdown-h3\">$1</h3>');\r\n      formattedText = formattedText.replace(/^## (.*$)/gm, '<h2 class=\"markdown-h2\">$1</h2>');\r\n      formattedText = formattedText.replace(/^# (.*$)/gm, '<h1 class=\"markdown-h1\">$1</h1>');\r\n      \r\n      // 2. **텍스트** 형태를 <strong>텍스트</strong>로 변환 (중간 헤더)\r\n      formattedText = formattedText.replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"markdown-bold\">$1</strong>');\r\n      \r\n      // 3. 표(테이블) 처리\r\n      const tableRegex = /(\\|[^\\n]+\\|\\n)+/g;\r\n      formattedText = formattedText.replace(tableRegex, (match) => {\r\n        const lines = match.trim().split('\\n');\r\n        let tableHtml = '<table class=\"markdown-table\">';\r\n        \r\n        lines.forEach((line, index) => {\r\n          if (line.trim() && !line.match(/^\\|[-\\s|]+\\|$/)) {\r\n            const cells = line.split('|').map(cell => cell.trim()).filter(cell => cell);\r\n            if (cells.length > 0) {\r\n              tableHtml += '<tr>';\r\n              cells.forEach(cell => {\r\n                if (index === 0) {\r\n                  tableHtml += `<th class=\"markdown-th\">${cell}</th>`;\r\n                } else {\r\n                  tableHtml += `<td class=\"markdown-td\">${cell}</td>`;\r\n                }\r\n              });\r\n              tableHtml += '</tr>';\r\n            }\r\n          }\r\n        });\r\n        \r\n        tableHtml += '</table>';\r\n        return tableHtml;\r\n      });\r\n      \r\n      // 4. 리스트 처리\r\n      formattedText = formattedText.replace(/^- (.*$)/gm, '<li class=\"markdown-li\">$1</li>');\r\n      formattedText = formattedText.replace(/(<li class=\"markdown-li\">.*<\\/li>)/s, '<ul class=\"markdown-ul\">$1</ul>');\r\n      \r\n      // 5. 번호 리스트 처리\r\n      formattedText = formattedText.replace(/^\\d+\\. (.*$)/gm, '<li class=\"markdown-oli\">$1</li>');\r\n      formattedText = formattedText.replace(/(<li class=\"markdown-oli\">.*<\\/li>)/s, '<ol class=\"markdown-ol\">$1</ol>');\r\n      \r\n      // 6. 코드 블록 처리\r\n      formattedText = formattedText.replace(/```([\\s\\S]*?)```/g, '<pre class=\"markdown-code\"><code>$1</code></pre>');\r\n      formattedText = formattedText.replace(/`([^`]+)`/g, '<code class=\"markdown-inline-code\">$1</code>');\r\n      \r\n      // 7. 줄바꿈 처리\r\n      formattedText = formattedText.replace(/\\n\\n/g, '</p><p class=\"markdown-p\">');\r\n      formattedText = formattedText.replace(/\\n/g, '<br>');\r\n      \r\n      // 8. 단락 태그로 감싸기\r\n      if (!formattedText.includes('<p class=\"markdown-p\">')) {\r\n        formattedText = `<p class=\"markdown-p\">${formattedText}</p>`;\r\n      } else {\r\n        formattedText = `<p class=\"markdown-p\">${formattedText}</p>`;\r\n      }\r\n      \r\n      return formattedText;\r\n    },\r\n    getMessageFeedback(messageId) {\r\n      const message = this.currentMessages.find(m => m.id === messageId);\r\n      const feedback = message ? message.feedback : null;\r\n      console.log('🔍 getMessageFeedback:', { \r\n        messageId, \r\n        feedback, \r\n        messageExists: !!message,\r\n        trigger: this.feedbackUpdateTrigger \r\n      });\r\n      return feedback;\r\n    },\r\n    isMessageStreaming(messageId) {\r\n      // 메시지가 스트리밍 중인지 확인\r\n      const message = this.currentMessages.find(m => m.id === messageId);\r\n      if (!message) return false;\r\n      \r\n      // 중요: 질문과 답변이 하나의 row에 저장되는 구조\r\n      // user 메시지의 ans 필드가 비어있고 현재 스트리밍 중일 때 스트리밍 중으로 간주\r\n      const isIncomplete = !message.ans || message.ans.trim() === '';\r\n      return isIncomplete && this.isStreaming && this.streamingVisible;\r\n    },\r\n    getFeedbackButtonTitle(messageId, feedbackType) {\r\n      const currentFeedback = this.messageFeedbackStates[messageId];\r\n      const isStreaming = this.isStreaming || this.isMessageStreaming(messageId);\r\n      \r\n      if (isStreaming) {\r\n        return '답변이 완성되면 피드백을 남길 수 있습니다';\r\n      }\r\n      \r\n      const toggleTo = currentFeedback === feedbackType ? 'none' : feedbackType;\r\n      return `Message ID: ${messageId}, Current: ${currentFeedback || 'none'}, Toggle to: ${toggleTo}`;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import '../assets/styles/home.css';\r\n\r\n/* 비활성화된 피드백 버튼 스타일 */\r\n.action-btn.disabled {\r\n  opacity: 0.4;\r\n  cursor: not-allowed;\r\n  pointer-events: none;\r\n}\r\n\r\n.action-btn.disabled:hover {\r\n  background-color: transparent;\r\n  transform: none;\r\n}\r\n</style>\r\n","import { render } from \"./MessageList.vue?vue&type=template&id=4a18db6b&scoped=true\"\nimport script from \"./MessageList.vue?vue&type=script&lang=js\"\nexport * from \"./MessageList.vue?vue&type=script&lang=js\"\n\nimport \"./MessageList.vue?vue&type=style&index=0&id=4a18db6b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4a18db6b\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"chat-input-container\">\r\n    <div class=\"input-wrapper\">\r\n      <textarea\r\n        v-model=\"userInput\" \r\n        class=\"chat-input\" \r\n        placeholder=\"질문을 입력하세요...\" \r\n        @keydown.enter.prevent=\"handleEnterKey\"\r\n        :disabled=\"isLoading || isStreaming\"\r\n        ref=\"inputField\"\r\n        rows=\"1\"\r\n        @input=\"handleInputChange\"\r\n      ></textarea>\r\n      <button \r\n        class=\"send-btn\" \r\n        :disabled=\"!userInput.trim() || isLoading || isStreaming\" \r\n        @click=\"$emit('sendMessage')\"\r\n      >\r\n        <span v-if=\"!isLoading\">\r\n          <svg class=\"send-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n            <path d=\"M22 2L11 13\"></path>\r\n            <path d=\"M22 2l-7 20-4-9-9-4 20-7z\"></path>\r\n          </svg>\r\n        </span>\r\n        <span v-else class=\"loading-spinner\"></span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ChatInput',\r\n  props: {\r\n    isLoading: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    isStreaming: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  emits: ['sendMessage', 'inputChange'],\r\n  data() {\r\n    return {\r\n      userInput: ''\r\n    };\r\n  },\r\n  methods: {\r\n    handleEnterKey(event) {\r\n      if (event.shiftKey && event.key === 'Enter') {\r\n        return; // Shift+Enter는 줄바꿈으로 처리\r\n      }\r\n      this.$emit('sendMessage');\r\n    },\r\n    handleInputChange() {\r\n      this.$emit('inputChange', this.userInput);\r\n      this.adjustTextareaHeight();\r\n    },\r\n    adjustTextareaHeight() {\r\n      const textarea = this.$refs.inputField;\r\n      if (!textarea) return;\r\n      \r\n      try {\r\n        textarea.style.height = 'auto';\r\n        const newHeight = Math.min(textarea.scrollHeight, 150);\r\n        textarea.style.height = newHeight + 'px';\r\n      } catch (error) {\r\n        console.warn('Textarea height adjustment failed:', error);\r\n      }\r\n    },\r\n    clearInput() {\r\n      this.userInput = '';\r\n      this.adjustTextareaHeight();\r\n    },\r\n    focusInput() {\r\n      if (this.$refs.inputField && this.$refs.inputField.focus) {\r\n        try {\r\n          this.$refs.inputField.focus();\r\n        } catch (error) {\r\n          console.warn('Focus failed:', error);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.adjustTextareaHeight();\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import '../assets/styles/home.css';\r\n</style>\r\n","import { render } from \"./ChatInput.vue?vue&type=template&id=dbc7c99a&scoped=true\"\nimport script from \"./ChatInput.vue?vue&type=script&lang=js\"\nexport * from \"./ChatInput.vue?vue&type=script&lang=js\"\n\nimport \"./ChatInput.vue?vue&type=style&index=0&id=dbc7c99a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-dbc7c99a\"]])\n\nexport default __exports__","import { ref, computed } from 'vue'\r\n\r\nexport function useLanggraph() {\r\n \r\n  // 랭그래프 상태\r\n  const showLanggraph = ref(false)\r\n  const currentStep = ref(0)\r\n  const originalInput = ref('')\r\n  const augmentedKeywords = ref([])\r\n  const isSearching = ref(false)\r\n  const searchResults = ref([])\r\n  const searchedDocuments = ref([])\r\n  const hasSearchCompleted = ref(false)\r\n  const isGeneratingAnswer = ref(false)\r\n  const finalAnswer = ref('')\r\n  const streamingAnswer = ref('')\r\n  const isStreamingAnswer = ref(false)\r\n  const analysisImageUrl = ref('')\r\n  const imageLoadFailed = ref(false)\r\n  const failedImageUrl = ref('')\r\n  const lastImageUrl = ref('')\r\n  const langGraphError = ref(null)\r\n  const extractedKeywords = ref(null)\r\n  const extractedDbSearchTitle = ref(null)\r\n  const isDoneProcessed = ref(false)\r\n  \r\n  // 랭그래프 복원 관련\r\n  const lastRestoredConversationId = ref(null)\r\n  const lastRestoredMessageCount = ref(0)\r\n  \r\n  // 실시간 기능 보존을 위한 상태\r\n  const isNewConversation = ref(true)\r\n  const isRestoringConversation = ref(false)\r\n  const isFirstQuestionInSession = ref(true)\r\n  const isFollowupQuestion = ref(false)\r\n  const isLanggraphJustCompleted = ref(false) // 랭그래프 완료 직후 플래그\r\n  \r\n  // 계산된 속성\r\n  const progressPercentage = computed(() => (currentStep.value / 4) * 100)\r\n  \r\n  // 랭그래프 초기화\r\n  const resetLanggraph = () => {\r\n    showLanggraph.value = false\r\n    currentStep.value = 0\r\n    originalInput.value = ''\r\n    augmentedKeywords.value = []\r\n    searchResults.value = []\r\n    finalAnswer.value = ''\r\n    analysisImageUrl.value = ''\r\n    lastImageUrl.value = ''\r\n    langGraphError.value = null\r\n    isSearching.value = false\r\n    isGeneratingAnswer.value = false\r\n    extractedKeywords.value = null\r\n    extractedDbSearchTitle.value = null\r\n  }\r\n  \r\n  const resetLanggraphState = () => {\r\n    resetLanggraph()\r\n    isFirstQuestionInSession.value = true\r\n  }\r\n  \r\n  // 키워드 분류\r\n  const categorizeKeyword = (keyword, index) => {\r\n    const keywordLower = keyword.toLowerCase()\r\n    \r\n    if (index === 0) return '원본'\r\n    \r\n    if (keywordLower.includes('분석') || keywordLower.includes('analysis') || keywordLower.includes('데이터')) {\r\n      return '분석'\r\n    } else if (keywordLower.includes('개선') || keywordLower.includes('향상') || keywordLower.includes('최적화')) {\r\n      return '개선'\r\n    } else if (keywordLower.includes('전략') || keywordLower.includes('계획') || keywordLower.includes('방안')) {\r\n      return '전략'\r\n    } else if (keywordLower.includes('성과') || keywordLower.includes('결과') || keywordLower.includes('효과')) {\r\n      return '성과'\r\n    } else if (keywordLower.includes('관리') || keywordLower.includes('운영') || keywordLower.includes('시스템')) {\r\n      return '관리'\r\n    } else if (keywordLower.includes('기술') || keywordLower.includes('개발') || keywordLower.includes('솔루션')) {\r\n      return '기술'\r\n    } else if (keywordLower.includes('비즈니스') || keywordLower.includes('사업') || keywordLower.includes('경영')) {\r\n      return '비즈니스'\r\n    } else if (keywordLower.includes('프로세스') || keywordLower.includes('절차') || keywordLower.includes('워크플로우')) {\r\n      return '프로세스'\r\n    } else {\r\n      const categories = ['핵심', '관련', '확장', '부가']\r\n      return categories[(index - 1) % categories.length]\r\n    }\r\n  }\r\n  \r\n  return {\r\n    // 상태\r\n    showLanggraph,\r\n    currentStep,\r\n    originalInput,\r\n    augmentedKeywords,\r\n    isSearching,\r\n    searchResults,\r\n    searchedDocuments,\r\n    hasSearchCompleted,\r\n    isGeneratingAnswer,\r\n    finalAnswer,\r\n    streamingAnswer,\r\n    isStreamingAnswer,\r\n    analysisImageUrl,\r\n    imageLoadFailed,\r\n    failedImageUrl,\r\n    lastImageUrl,\r\n    langGraphError,\r\n    extractedKeywords,\r\n    extractedDbSearchTitle,\r\n    isDoneProcessed,\r\n    lastRestoredConversationId,\r\n    lastRestoredMessageCount,\r\n    isNewConversation,\r\n    isRestoringConversation,\r\n    isFirstQuestionInSession,\r\n    isFollowupQuestion,\r\n    isLanggraphJustCompleted,\r\n    \r\n    // 계산된 속성\r\n    progressPercentage,\r\n    \r\n    // 메서드\r\n    resetLanggraph,\r\n    resetLanggraphState,\r\n    categorizeKeyword,\r\n  }\r\n}\r\n","import { ref } from 'vue'\r\nimport { useStore } from 'vuex'\r\n\r\nexport function useMessages() {\r\n  const store = useStore()\r\n  \r\n  // 메시지 관련 상태\r\n  const isLoading = ref(false)\r\n  const isCreatingConversation = ref(false)\r\n  const isSavingMessage = ref(false)\r\n  const saveStatus = ref('')\r\n  \r\n  // 메시지 포맷팅\r\n  const formatAnswer = (text) => {\r\n    if (!text) return ''\r\n    \r\n    let formattedText = text\r\n    \r\n    // 1. 헤더 처리 (### 큰 헤더)\r\n    formattedText = formattedText.replace(/^### (.*$)/gm, '<h3 class=\"markdown-h3\">$1</h3>')\r\n    formattedText = formattedText.replace(/^## (.*$)/gm, '<h2 class=\"markdown-h2\">$1</h2>')\r\n    formattedText = formattedText.replace(/^# (.*$)/gm, '<h1 class=\"markdown-h1\">$1</h1>')\r\n    \r\n    // 2. **텍스트** 형태를 <strong>텍스트</strong>로 변환 (중간 헤더)\r\n    formattedText = formattedText.replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"markdown-bold\">$1</strong>')\r\n    \r\n    // 3. 표(테이블) 처리\r\n    const tableRegex = /(\\|[^\\n]+\\|\\n)+/g\r\n    formattedText = formattedText.replace(tableRegex, (match) => {\r\n      const lines = match.trim().split('\\n')\r\n      let tableHtml = '<table class=\"markdown-table\">'\r\n      \r\n      lines.forEach((line, index) => {\r\n        if (line.trim() && !line.match(/^\\|[-\\s|]+\\|$/)) {\r\n          const cells = line.split('|').map(cell => cell.trim()).filter(cell => cell)\r\n          if (cells.length > 0) {\r\n            tableHtml += '<tr>'\r\n            cells.forEach(cell => {\r\n              if (index === 0) {\r\n                tableHtml += `<th class=\"markdown-th\">${cell}</th>`\r\n              } else {\r\n                tableHtml += `<td class=\"markdown-td\">${cell}</td>`\r\n              }\r\n            })\r\n            tableHtml += '</tr>'\r\n          }\r\n        }\r\n      })\r\n      \r\n      tableHtml += '</table>'\r\n      return tableHtml\r\n    })\r\n    \r\n    // 4. 리스트 처리\r\n    formattedText = formattedText.replace(/^- (.*$)/gm, '<li class=\"markdown-li\">$1</li>')\r\n    formattedText = formattedText.replace(/(<li class=\"markdown-li\">.*<\\/li>)/s, '<ul class=\"markdown-ul\">$1</ul>')\r\n    \r\n    // 5. 번호 리스트 처리\r\n    formattedText = formattedText.replace(/^\\d+\\. (.*$)/gm, '<li class=\"markdown-oli\">$1</li>')\r\n    formattedText = formattedText.replace(/(<li class=\"markdown-oli\">.*<\\/li>)/s, '<ol class=\"markdown-ol\">$1</ol>')\r\n    \r\n    // 6. 코드 블록 처리\r\n    formattedText = formattedText.replace(/```([\\s\\S]*?)```/g, '<pre class=\"markdown-code\"><code>$1</code></pre>')\r\n    formattedText = formattedText.replace(/`([^`]+)`/g, '<code class=\"markdown-inline-code\">$1</code>')\r\n    \r\n    // 7. 줄바꿈 처리\r\n    formattedText = formattedText.replace(/\\n\\n/g, '</p><p class=\"markdown-p\">')\r\n    formattedText = formattedText.replace(/\\n/g, '<br>')\r\n    \r\n    // 8. 단락 태그로 감싸기\r\n    if (!formattedText.includes('<p class=\"markdown-p\">')) {\r\n      formattedText = `<p class=\"markdown-p\">${formattedText}</p>`\r\n    } else {\r\n      formattedText = `<p class=\"markdown-p\">${formattedText}</p>`\r\n    }\r\n    \r\n    return formattedText\r\n  }\r\n  \r\n  // 피드백 처리\r\n  const getMessageFeedback = (messageId, currentMessages) => {\r\n    const message = currentMessages.find(m => m.id === messageId)\r\n    return message ? message.feedback : null\r\n  }\r\n  \r\n  const submitFeedback = async (messageId, feedback) => {\r\n    await store.dispatch('submitFeedback', { messageId, feedback })\r\n  }\r\n  \r\n  // 새 대화 생성\r\n  const newConversation = async () => {\r\n    if (isCreatingConversation.value) {\r\n      console.log('[HOME] 새 대화 생성 중 - 중복 실행 방지')\r\n      return\r\n    }\r\n    \r\n    isCreatingConversation.value = true\r\n    console.log('🔄 새 대화 UI 초기화 시작...')\r\n    \r\n    try {\r\n      const newConversation = await store.dispatch('createConversation')\r\n      if (newConversation) {\r\n        store.commit('setCurrentConversation', newConversation)\r\n        console.log('✅ 새 대화 생성 완료:', newConversation.id)\r\n      } else {\r\n        console.error('❌ 새 대화 생성 실패')\r\n        alert('새 대화 생성에 실패했습니다. 다시 시도해주세요.')\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 새 대화 생성 오류:', error)\r\n      alert('새 대화 생성 중 오류가 발생했습니다.')\r\n    }\r\n    \r\n    isCreatingConversation.value = false\r\n    console.log('✅ 새 대화 UI 초기화 완료')\r\n  }\r\n  \r\n  return {\r\n    // 상태\r\n    isLoading,\r\n    isCreatingConversation,\r\n    isSavingMessage,\r\n    saveStatus,\r\n    \r\n    // 메서드\r\n    formatAnswer,\r\n    getMessageFeedback,\r\n    submitFeedback,\r\n    newConversation\r\n  }\r\n}\r\n","import { ref } from 'vue'\r\n\r\nexport function useSSE() {\r\n  const isStreaming = ref(false)\r\n  const streamingMessage = ref('')\r\n  const streamingVisible = ref(false)\r\n  \r\n  // SSE 스트리밍으로 LangGraph 실행\r\n  const executeLangGraphWithSSE = async (inputText, homeInstance) => {\r\n    // AbortController 생성 및 전역 저장\r\n    const controller = new AbortController()\r\n    window.sseController = controller\r\n\r\n    console.log('🚀 [SSE] LangGraph 스트리밍 요청 시작', {\r\n      inputPreview: inputText?.slice(0, 50) || '',\r\n      hasToken: !!localStorage.getItem('access_token')\r\n    })\r\n    \r\n    try {\r\n      // 인증 토큰 가져오기\r\n      const token = localStorage.getItem('access_token')\r\n      \r\n      const response = await fetch('http://localhost:8000/api/langgraph/stream', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': token ? `Bearer ${token}` : ''\r\n        },\r\n        body: JSON.stringify({\r\n          question: inputText\r\n        }),\r\n        signal: controller.signal\r\n      })\r\n      \r\n      if (!response.ok) {\r\n        console.error('❌ [SSE] 스트리밍 응답 실패', {\r\n          status: response.status,\r\n          statusText: response.statusText\r\n        })\r\n        throw new Error(`SSE 요청 실패: ${response.status}`)\r\n      }\r\n\r\n      console.log('✅ [SSE] 스트리밍 응답 수신 성공 - 데이터 읽기 시작')\r\n\r\n      const reader = response.body.getReader()\r\n      const decoder = new TextDecoder()\r\n      let buffer = ''\r\n      let lastLoggedGeneratorId = null\r\n\r\n      const processEventsFromBuffer = async () => {\r\n        let boundaryIndex = buffer.indexOf('\\n\\n')\r\n\r\n        while (boundaryIndex !== -1) {\r\n          const rawEvent = buffer.slice(0, boundaryIndex)\r\n          buffer = buffer.slice(boundaryIndex + 2)\r\n\r\n          const lines = rawEvent.split('\\n')\r\n          let dataPayload = ''\r\n\r\n          for (const line of lines) {\r\n            if (!line.trim()) continue\r\n            if (line.startsWith('data:')) {\r\n              dataPayload += line.slice(5).trimStart()\r\n            }\r\n          }\r\n\r\n          if (!dataPayload) {\r\n            console.log('⚠️ [SSE] data 필드를 찾지 못한 이벤트', rawEvent)\r\n            boundaryIndex = buffer.indexOf('\\n\\n')\r\n            continue\r\n          }\r\n\r\n          if (dataPayload === '[DONE]') {\r\n            console.log('🏁 [SSE] [DONE] 토큰 수신 - 스트림 종료 예정')\r\n            return true\r\n          }\r\n\r\n          try {\r\n            const parsedData = JSON.parse(dataPayload)\r\n\r\n            const generatorId = parsedData.generator_id || parsedData.generatorId || lastLoggedGeneratorId\r\n            if (generatorId && generatorId !== lastLoggedGeneratorId) {\r\n              lastLoggedGeneratorId = generatorId\r\n            }\r\n\r\n            console.log('🧭 [SSE] 파싱된 메시지', {\r\n              generatorId: generatorId || 'unknown',\r\n              stage: parsedData.stage || 'unknown',\r\n              status: parsedData.status || 'unknown',\r\n              node: parsedData.node_name || parsedData.node || 'n/a',\r\n              event: parsedData.event || 'n/a',\r\n              hasResult: !!parsedData.result\r\n            })\r\n\r\n            if (parsedData.heartbeat) {\r\n              console.log('❤️ [SSE] 하트비트 수신')\r\n              boundaryIndex = buffer.indexOf('\\n\\n')\r\n              continue\r\n            }\r\n\r\n            if (parsedData.error) {\r\n              console.error('❌ SSE 에러:', parsedData.error)\r\n              throw new Error(parsedData.error)\r\n            }\r\n\r\n            await homeInstance.handleSSEMessage({\r\n              ...parsedData,\r\n              generator_id: parsedData.generator_id || parsedData.generatorId || lastLoggedGeneratorId\r\n            })\r\n          } catch (parseError) {\r\n            console.error('❌ SSE 메시지 파싱 오류:', parseError, 'Data:', dataPayload)\r\n          }\r\n\r\n          boundaryIndex = buffer.indexOf('\\n\\n')\r\n        }\r\n\r\n        return false\r\n      }\r\n\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read()\r\n\r\n        if (done) {\r\n          console.log('ℹ️ [SSE] 스트림 종료 신호 수신 (reader done)')\r\n          // 남아있는 버퍼 처리 (텍스트 디코더 플러시)\r\n          const remaining = decoder.decode()\r\n          if (remaining) {\r\n            buffer += remaining\r\n          }\r\n          const shouldStop = await processEventsFromBuffer()\r\n          if (shouldStop) {\r\n            return\r\n          }\r\n          break\r\n        }\r\n\r\n        const chunk = decoder.decode(value, { stream: true })\r\n        if (!chunk) {\r\n          continue\r\n        }\r\n\r\n        buffer += chunk\r\n        console.log('📦 [SSE] 원시 청크 수신', { chunk, bufferLength: buffer.length })\r\n\r\n        const shouldStop = await processEventsFromBuffer()\r\n        if (shouldStop) {\r\n          return\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      if (error.name === 'AbortError') {\r\n        console.log('⏹️ [SSE] AbortController에 의해 스트림이 중단됨')\r\n        return\r\n      }\r\n      console.error('❌ SSE 스트리밍 오류:', error)\r\n      throw error\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isStreaming,\r\n    streamingMessage,\r\n    streamingVisible,\r\n    executeLangGraphWithSSE\r\n  }\r\n}","import { ref } from 'vue'\r\n\r\nexport function useScroll() {\r\n  const scrollThrottled = ref(false)\r\n  const scrollTimeout = ref(null)\r\n  const lastMessageHeight = ref(0)\r\n  const lastScrollPosition = ref(0)\r\n  const observer = ref(null)\r\n  const scrollPending = ref(false)\r\n  \r\n  // 스크롤 최적화 - 통합된 쓰로틀링 적용\r\n  const scrollToBottom = (chatMessagesRef) => {\r\n    if (scrollPending.value) {\r\n      return\r\n    }\r\n    \r\n    scrollPending.value = true\r\n    \r\n    requestAnimationFrame(() => {\r\n      if (chatMessagesRef) {\r\n        const scrollEl = chatMessagesRef\r\n        scrollEl.scrollTop = scrollEl.scrollHeight\r\n      }\r\n      scrollPending.value = false\r\n    })\r\n  }\r\n  \r\n  // 랭그래프 컨테이너로 스크롤\r\n  const scrollToLanggraph = () => {\r\n    const LanggraphContainer = document.querySelector('.langgraph-container')\r\n    if (LanggraphContainer) {\r\n      LanggraphContainer.scrollIntoView({ \r\n        behavior: 'smooth',\r\n        block: 'start'\r\n      })\r\n      LanggraphContainer.scrollTop = 0\r\n    }\r\n  }\r\n  \r\n  // 랭그래프 컨테이너를 최하단으로 스크롤\r\n  const scrollToLanggraphBottom = (chatMessagesRef) => {\r\n    const LanggraphContainer = document.querySelector('.langgraph-container')\r\n    if (LanggraphContainer) {\r\n      LanggraphContainer.scrollTop = LanggraphContainer.scrollHeight\r\n      \r\n      if (chatMessagesRef) {\r\n        const chatContainer = chatMessagesRef\r\n        chatContainer.scrollTop = chatContainer.scrollHeight\r\n      }\r\n    }\r\n  }\r\n  \r\n  // 스크롤 위치 안정화\r\n  const preserveScrollPosition = (chatMessagesRef) => {\r\n    if (chatMessagesRef) {\r\n      lastScrollPosition.value = chatMessagesRef.scrollTop\r\n    }\r\n  }\r\n  \r\n  const restoreScrollPosition = (chatMessagesRef) => {\r\n    if (chatMessagesRef) {\r\n      chatMessagesRef.scrollTop = lastScrollPosition.value\r\n    }\r\n  }\r\n  \r\n  // 안전한 focus 메서드\r\n  const safeFocus = (inputFieldRef) => {\r\n    if (inputFieldRef && inputFieldRef.focus) {\r\n      try {\r\n        inputFieldRef.focus()\r\n      } catch (error) {\r\n        console.warn('Focus failed:', error)\r\n      }\r\n    }\r\n  }\r\n  \r\n  // textarea 높이 조정\r\n  const adjustTextareaHeight = (inputFieldRef) => {\r\n    if (!inputFieldRef) return\r\n    \r\n    try {\r\n      inputFieldRef.style.height = 'auto'\r\n      const newHeight = Math.min(inputFieldRef.scrollHeight, 150)\r\n      inputFieldRef.style.height = newHeight + 'px'\r\n    } catch (error) {\r\n      console.warn('Textarea height adjustment failed:', error)\r\n    }\r\n  }\r\n  \r\n  return {\r\n    scrollThrottled,\r\n    scrollTimeout,\r\n    lastMessageHeight,\r\n    lastScrollPosition,\r\n    observer,\r\n    scrollPending,\r\n    scrollToBottom,\r\n    scrollToLanggraph,\r\n    scrollToLanggraphBottom,\r\n    preserveScrollPosition,\r\n    restoreScrollPosition,\r\n    safeFocus,\r\n    adjustTextareaHeight\r\n  }\r\n}\r\n","/**\r\n * SSE 메시지 처리 유틸리티\r\n * Home.vue의 handleSSEMessage 함수를 분리하여 관리\r\n */\r\n\r\n/**\r\n * SSE 메시지 처리 메인 함수\r\n * @param {Object} data - SSE 메시지 데이터\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\n\r\nfunction logSSEDebugInfo(data) {\r\n  if (!data || typeof data !== 'object') {\r\n    console.warn('⚠️ [SSE] 로그를 위한 데이터가 올바르지 않음:', data)\r\n    return\r\n  }\r\n\r\n  const generatorId = data.generator_id || data.generatorId || 'unknown'\r\n  const stage = data.stage || 'unknown'\r\n  const status = data.status || 'unknown'\r\n  const nodeName = data.node_name || data.node || 'n/a'\r\n  const eventType = data.event || 'n/a'\r\n  const timestamp = data.timestamp || data.time || null\r\n\r\n  const groupLabel = `📡 [SSE] stage=${stage} status=${status} generator=${generatorId}`\r\n\r\n  try {\r\n    console.groupCollapsed(groupLabel)\r\n    console.log('🔖 generator_id:', generatorId)\r\n    console.log('🧩 stage:', stage)\r\n    console.log('📍 status:', status)\r\n    console.log('🧱 node:', nodeName)\r\n    console.log('🎯 event:', eventType)\r\n    if (timestamp) {\r\n      console.log('⏱️ timestamp:', timestamp)\r\n    }\r\n    console.log('📦 has result:', !!data.result)\r\n    if (data.result) {\r\n      console.log('📦 result keys:', Object.keys(data.result))\r\n    }\r\n    console.log('📝 raw message:', data)\r\n  } finally {\r\n    console.groupEnd()\r\n  }\r\n}\r\n\r\nexport async function handleSSEMessage(data, context) {\r\n  logSSEDebugInfo(data)\r\n  // 추가 질문은 별도 처리되므로 이 로직 제거\r\n  // if (context.langgraph.isFollowupQuestion.value && (data.stage === 'A' || data.stage === 'B' || data.stage === 'C' || data.stage === 'D' || data.stage === 'E')) {\r\n  //   console.log('🔒 추가 질문 중 - 랭그래프 영역 업데이트 방지:', data.stage);\r\n  //   return;\r\n  // }\r\n\r\n  // DONE 메시지 처리 후 즉시 종료\r\n  if (data.stage === 'DONE') {\r\n    return await handleDoneMessage(data, context);\r\n  }\r\n\r\n  // 각 단계별 메시지 처리\r\n  switch (data.stage) {\r\n    case 'A':\r\n      await handleStageA(data, context);\r\n      break;\r\n    case 'B':\r\n      await handleStageB(data, context);\r\n      break;\r\n    case 'C':\r\n      await handleStageC(data, context);\r\n      break;\r\n    case 'D':\r\n      await handleStageD(data, context);\r\n      break;\r\n    case 'E':\r\n      await handleStageE(data, context);\r\n      break;\r\n    case 'TEST':\r\n      await handleTestMessage(data, context);\r\n      break;\r\n    case 'ERROR':\r\n      await handleErrorMessage(data, context);\r\n      break;\r\n    default:\r\n      // console.log('📡 알 수 없는 단계:', data.stage);\r\n  }\r\n}\r\n\r\n/**\r\n * DONE 메시지 처리\r\n */\r\nasync function handleDoneMessage(data, context) {\r\n  if (context.langgraph.isDoneProcessed.value) {\r\n    // console.log('🔒 DONE 메시지 이미 처리됨 - 중복 처리 방지');\r\n    return;\r\n  }\r\n  \r\n  // console.log('🏁 DONE 메시지 수신 - 최종 UI 업데이트');\r\n  context.langgraph.isDoneProcessed.value = true; // DONE 처리 완료 플래그 설정\r\n  \r\n  // 모든 로딩 상태 완료\r\n  context.messages.isLoading.value = false;\r\n  context.langgraph.isSearching.value = false;\r\n  context.langgraph.isGeneratingAnswer.value = false;\r\n  context.langgraph.isStreamingAnswer.value = false;\r\n  \r\n  // 최종 단계로 설정\r\n  context.langgraph.currentStep.value = 4; // UI 4단계: 분석 결과 이미지 표시\r\n  \r\n  // 분석 결과 이미지 처리 (DONE 메시지에서만)\r\n  console.log('🖼️ [SSE DONE] data.result 구조:', Object.keys(data.result || {}));\r\n  console.log('🖼️ [SSE DONE] data.result.response 존재:', !!data.result?.response);\r\n  \r\n  if (data.result && data.result.response) {\r\n    console.log('🖼️ [SSE DONE] data.result.response 구조:', Object.keys(data.result.response || {}));\r\n    console.log('🖼️ [SSE DONE] data.result.response.analysis_image_url 값:', data.result.response.analysis_image_url);\r\n  }\r\n  \r\n  if (data.result && data.result.analysis_image_url) {\r\n    context.langgraph.analysisImageUrl.value = data.result.analysis_image_url;\r\n    console.log('✅ [SSE DONE] 분석 이미지 URL 설정 (직접):', context.langgraph.analysisImageUrl.value);\r\n  } else if (data.result && data.result.response && data.result.response.analysis_image_url) {\r\n    context.langgraph.analysisImageUrl.value = data.result.response.analysis_image_url;\r\n    console.log('✅ [SSE DONE] 분석 이미지 URL 설정 (response 내부):', context.langgraph.analysisImageUrl.value);\r\n  } else {\r\n    console.warn('⚠️ [SSE DONE] analysis_image_url을 찾을 수 없음');\r\n  }\r\n  \r\n    // 최종 답변이 없으면 스트리밍된 답변 사용\r\n    if (!context.langgraph.finalAnswer.value && context.langgraph.streamingAnswer.value) {\r\n      context.langgraph.finalAnswer.value = context.langgraph.streamingAnswer.value;\r\n      // console.log('🎯 DONE에서 최종 답변 설정:', context.langgraph.finalAnswer.value);\r\n    }\r\n    \r\n  // 랭그래프 완료 플래그 먼저 설정 (복원 방지)\r\n  context.langgraph.isLanggraphJustCompleted.value = true;\r\n  \r\n  // 최초 질문 완료 후 추가 질문으로 플래그 변경\r\n  context.langgraph.isFollowupQuestion.value = true;\r\n  console.log('✅ 최초 질문 완료 - isFollowupQuestion을 true로 설정');\r\n    \r\n    // 랭그래프 종료 후 최종 답변을 user 메시지의 ans 필드에 저장 (assistant 메시지 생성하지 않음)\r\n    const answerToAdd = context.langgraph.finalAnswer.value || context.langgraph.streamingAnswer.value;\r\n    \r\n    console.log('📝 [DONE] 답변을 user 메시지의 ans 필드에 저장 시작:', {\r\n      hasAnswer: !!answerToAdd,\r\n      answerLength: answerToAdd ? answerToAdd.length : 0,\r\n      hasConversation: !!context.$store.state.currentConversation,\r\n      conversationId: context.$store.state.currentConversation?.id,\r\n      currentMessageCount: context.$store.state.currentConversation?.messages?.length\r\n    });\r\n    \r\n    if (answerToAdd && context.$store.state.currentConversation) {\r\n      console.log('✅ [DONE] 조건 충족 - user 메시지 ans 필드 업데이트 진행');\r\n      \r\n      // 현재 대화의 마지막 user 메시지를 찾아서 ans 필드 업데이트\r\n      const currentConversation = context.$store.state.currentConversation;\r\n      if (currentConversation && currentConversation.messages && currentConversation.messages.length > 0) {\r\n        // 마지막 user 메시지 찾기\r\n        const userMessages = currentConversation.messages.filter(msg => msg.role === 'user');\r\n        if (userMessages.length > 0) {\r\n          const lastUserMessage = userMessages[userMessages.length - 1];\r\n          lastUserMessage.ans = answerToAdd;\r\n          console.log('✅ [DONE] user 메시지 ans 필드 업데이트 완료:', lastUserMessage.id);\r\n        }\r\n      }\r\n    \r\n    // LangGraph 결과를 백엔드에 저장\r\n    try {\r\n      console.log('🖼️ [DONE] saveLangGraphMessage 호출 전 analysisImageUrl:', context.langgraph.analysisImageUrl.value);\r\n      \r\n      const messageData = {\r\n        result: {\r\n          response: {\r\n            answer: answerToAdd,\r\n            analysis_image_url: context.langgraph.analysisImageUrl.value  // 이미지 URL 추가\r\n          },\r\n          keyword: context.langgraph.extractedKeywords.value,\r\n          candidates_total: context.langgraph.extractedDbSearchTitle.value ? context.langgraph.extractedDbSearchTitle.value.map(title => ({ res_payload: { document_name: title } })) : []\r\n        }\r\n      };\r\n      \r\n      // console.log('🖼️ [DONE] saveLangGraphMessage 호출 데이터:', JSON.stringify(messageData, null, 2));\r\n      \r\n      const saveResult = await context.saveLangGraphMessage(messageData);\r\n      console.log('✅ [DONE] LangGraph 메시지 저장 완료:', saveResult);\r\n      \r\n      // assistant 메시지를 사용하지 않으므로 backend_id 설정 제거됨\r\n      \r\n      // 대화 목록 새로고침 제거 - UI refresh 방지\r\n      console.log('✅ [DONE] 대화 목록 새로고침 생략 (UI refresh 방지)');\r\n    } catch (error) {\r\n      console.error('❌ [DONE] LangGraph 메시지 저장 실패:', error);\r\n    }\r\n  } else {\r\n    console.warn('⚠️ [DONE] 답변 메시지 추가 조건 미충족:', {\r\n      answerToAdd: answerToAdd?.substring(0, 50),\r\n      currentConversation: context.$store.state.currentConversation?.id\r\n    });\r\n  }\r\n  \r\n  // 랭그래프 상태 유지 - showLanggraph를 false로 변경하지 않음\r\n  console.log('✅ [DONE] 랭그래프 UI 유지:', {\r\n    showLanggraph: context.langgraph.showLanggraph.value,\r\n    currentStep: context.langgraph.currentStep.value,\r\n    hasAnswer: !!context.langgraph.finalAnswer.value\r\n  });\r\n  \r\n  // 랭그래프 컨테이너로 스크롤\r\n  context.scrollToLanggraph();\r\n  \r\n  // 5초 후 플래그 해제 (UI refresh 방지)\r\n  setTimeout(() => {\r\n    context.langgraph.isLanggraphJustCompleted.value = false;\r\n    console.log('✅ [DONE] 랭그래프 완료 플래그 해제');\r\n  }, 5000);\r\n}\r\n\r\n/**\r\n * A단계 (초기화) 메시지 처리\r\n */\r\nasync function handleStageA(data, context) {\r\n  if (data.status === 'started') {\r\n    context.langgraph.currentStep.value = 1;\r\n    // originalInput은 executeLanggraphFlow에서 이미 설정되어 있으므로 유지\r\n    if (!context.langgraph.originalInput.value && data.result && data.result.question) {\r\n      context.langgraph.originalInput.value = data.result.question;\r\n    }\r\n    console.log('🔄 A단계 시작 - 원본 입력:', context.langgraph.originalInput.value);\r\n  } else if (data.status === 'completed') {\r\n    // console.log('✅ A단계 완료');\r\n  }\r\n}\r\n\r\n/**\r\n * B단계 (키워드 증강) 메시지 처리\r\n */\r\nasync function handleStageB(data, context) {\r\n  if (data.status === 'started') {\r\n    context.langgraph.currentStep.value = 2;\r\n    // console.log('🔄 B단계 시작 - 키워드 증강');\r\n  } else if (data.status === 'completed') {\r\n    if (data.result && data.result.keywords) {\r\n      context.langgraph.augmentedKeywords.value = data.result.keywords.map((keyword, index) => ({\r\n        id: `keyword-${index}`,\r\n        text: keyword,\r\n        category: context.langgraph.categorizeKeyword(keyword, index)\r\n      }));\r\n      context.langgraph.extractedKeywords.value = data.result.keywords;\r\n      // console.log('✅ B단계 완료 - 키워드 증강:', context.langgraph.augmentedKeywords.value.length, '개');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * C단계 (RAG 검색) 메시지 처리\r\n */\r\nasync function handleStageC(data, context) {\r\n  if (data.status === 'started') {\r\n    context.langgraph.currentStep.value = 3;\r\n    context.langgraph.isSearching.value = true;\r\n    // console.log('🔄 C단계 시작 - RAG 검색');\r\n  } else if (data.status === 'completed') {\r\n    context.langgraph.isSearching.value = false;\r\n    if (data.result && data.result.search_results) {\r\n      context.langgraph.searchResults.value = data.result.search_results;\r\n      context.langgraph.searchedDocuments.value = data.result.document_titles || [];\r\n      context.langgraph.extractedDbSearchTitle.value = data.result.document_titles || [];\r\n      // console.log('✅ C단계 완료 - 검색 결과:', context.langgraph.searchResults.value.length, '건');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * D단계 (문서 재순위) 메시지 처리\r\n */\r\nasync function handleStageD(data, context) {\r\n  if (data.status === 'started') {\r\n    // console.log('🔄 D단계 시작 - 문서 재순위');\r\n  } else if (data.status === 'completed') {\r\n    // console.log('✅ D단계 완료 - 문서 재순위');\r\n  } else if (data.status === 'streaming') {\r\n    // 스트리밍 답변 처리\r\n    if (data.result && data.result.content) {\r\n      context.langgraph.streamingAnswer.value = (context.langgraph.streamingAnswer.value || '') + data.result.content;\r\n      context.langgraph.isStreamingAnswer.value = true;\r\n      context.langgraph.isGeneratingAnswer.value = true;\r\n      context.langgraph.currentStep.value = 4;\r\n      \r\n      // 스트리밍 답변을 실시간으로 표시\r\n      context.$store.commit('updateStreamingMessage', context.langgraph.streamingAnswer.value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * E단계 (답변 생성) 메시지 처리\r\n */\r\nasync function handleStageE(data, context) {\r\n  if (data.status === 'started') {\r\n    context.langgraph.isGeneratingAnswer.value = true;\r\n    context.langgraph.currentStep.value = 4;\r\n    // console.log('🔄 E단계 시작 - 답변 생성');\r\n  } else if (data.status === 'completed') {\r\n    context.langgraph.isGeneratingAnswer.value = false;\r\n    context.langgraph.isStreamingAnswer.value = false;\r\n    \r\n    if (data.result && data.result.answer) {\r\n      context.langgraph.finalAnswer.value = data.result.answer;\r\n      // console.log('✅ E단계 완료 - 최종 답변 생성');\r\n    }\r\n  } else if (data.status === 'streaming') {\r\n    // 스트리밍 답변 처리\r\n    if (data.result && data.result.content) {\r\n      context.langgraph.streamingAnswer.value = (context.langgraph.streamingAnswer.value || '') + data.result.content;\r\n      context.langgraph.isStreamingAnswer.value = true;\r\n      context.langgraph.isGeneratingAnswer.value = true;\r\n      \r\n      // 스트리밍 답변을 실시간으로 표시\r\n      context.$store.commit('updateStreamingMessage', context.langgraph.streamingAnswer.value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 테스트 메시지 처리\r\n */\r\nasync function handleTestMessage(/* data, context */) {\r\n  // console.log('🧪 테스트 메시지 수신:', data.result);\r\n}\r\n\r\n/**\r\n * 에러 메시지 처리\r\n */\r\nasync function handleErrorMessage(data, context) {\r\n  console.error('❌ SSE 에러 메시지:', data.error);\r\n  context.messages.isLoading.value = false;\r\n  context.langgraph.isSearching.value = false;\r\n  context.langgraph.isGeneratingAnswer.value = false;\r\n  context.langgraph.isStreamingAnswer.value = false;\r\n  \r\n  // 에러 메시지를 사용자에게 표시\r\n  if (context.$store.state.currentConversation) {\r\n    const errorMessage = {\r\n      id: Date.now() + Math.random(),\r\n      conversation_id: context.$store.state.currentConversation.id,\r\n      role: 'assistant',\r\n      question: null,\r\n      ans: `오류가 발생했습니다: ${data.error}`,\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    context.$store.commit('addMessageToCurrentConversation', errorMessage);\r\n  }\r\n}\r\n\r\nexport default {\r\n  handleSSEMessage\r\n};\r\n","/**\r\n * LangGraph 실행 유틸리티\r\n * Home.vue의 LangGraph 관련 함수들을 분리하여 관리\r\n */\r\n\r\nimport { handleSSEMessage } from './sseMessageHandler.js';\r\n\r\n/**\r\n * LangGraph 실행 메인 함수\r\n * @param {string} inputText - 사용자 입력 텍스트\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function executeLanggraphFlow(inputText, context) {\r\n  // 이미 실행 중인 경우 중복 실행 방지\r\n  if (context.messages.isLoading.value || context.langgraph.isSearching.value) {\r\n    console.log('이미 랭그래프가 실행 중입니다. 중복 실행 방지.');\r\n    return;\r\n  }\r\n\r\n  console.log('🔄 LangGraph 4단계 분석 시작:', inputText);\r\n\r\n  // 실행 상태 설정\r\n  context.messages.isLoading.value = true;\r\n  context.langgraph.isSearching.value = false;\r\n  context.langgraph.isGeneratingAnswer.value = false;\r\n  context.langgraph.isStreamingAnswer.value = false;\r\n  context.langgraph.isDoneProcessed.value = false;\r\n  context.langgraph.originalInput.value = inputText;\r\n\r\n  // 랭그래프 UI 표시\r\n  context.langgraph.showLanggraph.value = true;\r\n  context.langgraph.currentStep.value = 0;\r\n\r\n  // 스트리밍 상태 초기화\r\n  context.langgraph.streamingAnswer.value = '';\r\n  context.langgraph.finalAnswer.value = '';\r\n  context.langgraph.analysisImageUrl.value = '';\r\n\r\n  try {\r\n    // 1단계: prepare_message API 호출하여 영구 message_id 발급\r\n    const permanentMessageId = await prepareMessageForLangGraph(inputText, context);\r\n    console.log('✅ 영구 메시지 ID 발급 완료:', permanentMessageId);\r\n\r\n    // 2단계: 사용자 질문 메시지를 화면에 표시 (영구 ID 사용)\r\n    if (context.$store.state.currentConversation) {\r\n      const userMessage = {\r\n        id: Date.now() + Math.random() * 1000,\r\n        conversation_id: context.$store.state.currentConversation.id,\r\n        role: 'user',\r\n        question: inputText,\r\n        ans: null,\r\n        backend_id: permanentMessageId, // 영구 ID 설정\r\n        created_at: new Date().toISOString()\r\n      };\r\n      context.$store.commit('addMessageToCurrentConversation', userMessage);\r\n    }\r\n\r\n    // 3단계: SSE 스트리밍으로 LangGraph 실행\r\n    await executeLangGraphWithSSE(inputText, context, permanentMessageId);\r\n  } catch (error) {\r\n    console.error('❌ LangGraph 실행 오류:', error);\r\n    await fallbackLanggraphFlow(inputText, error, context);\r\n  }\r\n}\r\n\r\n/**\r\n * LangGraph 실행을 위한 영구 메시지 ID 발급\r\n * @param {string} inputText - 사용자 입력 텍스트\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n * @returns {number} 영구 메시지 ID\r\n */\r\nasync function prepareMessageForLangGraph(inputText, context) {\r\n  try {\r\n    const token = localStorage.getItem('access_token');\r\n    if (!token) {\r\n      throw new Error('인증 토큰이 없습니다.');\r\n    }\r\n\r\n    const conversationId = context.$store.state.currentConversation?.id;\r\n    if (!conversationId) {\r\n      throw new Error('현재 대화가 없습니다.');\r\n    }\r\n\r\n    const requestData = {\r\n      question: inputText,\r\n      q_mode: 'search', // LangGraph는 search 모드\r\n      keyword: null,\r\n      db_contents: null,\r\n      image: null\r\n    };\r\n\r\n    console.log('📋 prepare_message API 호출:', requestData);\r\n\r\n    const response = await fetch(`http://localhost:8000/api/conversations/${conversationId}/messages/prepare`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(requestData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`prepare_message API 호출 실패: ${response.status} ${errorText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('✅ prepare_message 응답:', result);\r\n\r\n    if (result.userMessage && result.userMessage.id) {\r\n      return result.userMessage.id;\r\n    } else {\r\n      throw new Error('영구 메시지 ID를 받지 못했습니다.');\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ prepare_message API 호출 오류:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * SSE 스트리밍으로 LangGraph 실행\r\n * @param {string} inputText - 사용자 입력 텍스트\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n * @param {number} permanentMessageId - 영구 메시지 ID\r\n */\r\nexport async function executeLangGraphWithSSE(inputText, context, permanentMessageId) {\r\n  // AbortController 생성 및 전역 저장\r\n  const controller = new AbortController();\r\n  window.sseController = controller;\r\n\r\n  try {\r\n    // 인증 토큰 가져오기\r\n    const token = localStorage.getItem('access_token');\r\n    if (!token) {\r\n      throw new Error('인증 토큰이 없습니다.');\r\n    }\r\n\r\n    // SSE 요청 데이터 구성\r\n    const requestData = {\r\n      question: inputText,\r\n      conversation_id: context.$store.state.currentConversation?.id || null,\r\n      message_id: permanentMessageId, // 영구 메시지 ID 포함\r\n      generate_image: false,\r\n      include_langgraph_context: false,\r\n      langgraph_context: null\r\n    };\r\n\r\n    console.log('🚀 SSE 스트리밍 요청 시작:', requestData);\r\n\r\n    // 랭그래프는 최초 질문만 처리 (추가 질문은 Home.vue에서 분기 처리)\r\n    const endpoint = 'http://localhost:8000/api/langgraph/stream';\r\n    \r\n    console.log('🎯 랭그래프 엔드포인트:', endpoint);\r\n    console.log('🎯 isFollowupQuestion:', context.langgraph.isFollowupQuestion.value);\r\n\r\n    // SSE 요청 전송\r\n    const response = await fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(requestData),\r\n      signal: controller.signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    // SSE 스트림 처리\r\n    const reader = response.body.getReader();\r\n    const decoder = new TextDecoder();\r\n\r\n    let buffer = '';\r\n    let eventData = '';\r\n    let done = false;\r\n\r\n    while (!done) {\r\n      const { done: streamDone, value } = await reader.read();\r\n      done = streamDone;\r\n\r\n      if (value) {\r\n        buffer += decoder.decode(value, { stream: true });\r\n      }\r\n\r\n      let newlineIndex;\r\n      while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\r\n        const rawLine = buffer.slice(0, newlineIndex);\r\n        buffer = buffer.slice(newlineIndex + 1);\r\n        const line = rawLine.trimEnd();\r\n\r\n        if (!line) {\r\n          if (eventData) {\r\n            const payload = eventData.trim();\r\n            eventData = '';\r\n\r\n            if (!payload) {\r\n              continue;\r\n            }\r\n\r\n            if (payload === '[DONE]') {\r\n              console.log('📡 SSE 스트림 종료');\r\n              done = true;\r\n              break;\r\n            }\r\n\r\n            try {\r\n              const messageData = JSON.parse(payload);\r\n              await handleSSEMessage(messageData, context);\r\n            } catch (parseError) {\r\n              console.warn('📡 SSE 메시지 파싱 오류:', parseError, '\\n📄 원본 데이터:', payload);\r\n            }\r\n          }\r\n\r\n          continue;\r\n        }\r\n\r\n        if (line.startsWith('data:')) {\r\n          const dataPortion = line.slice(5).trimStart();\r\n          if (eventData) {\r\n            eventData += '\\n';\r\n          }\r\n          eventData += dataPortion;\r\n        }\r\n      }\r\n\r\n      if (done) {\r\n        if (eventData) {\r\n          const payload = eventData.trim();\r\n          eventData = '';\r\n\r\n          if (payload && payload !== '[DONE]') {\r\n            try {\r\n              const messageData = JSON.parse(payload);\r\n              await handleSSEMessage(messageData, context);\r\n            } catch (parseError) {\r\n              console.warn('📡 SSE 메시지 파싱 오류 (스트림 종료 시):', parseError, '\\n📄 원본 데이터:', payload);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (buffer.trim() === '[DONE]') {\r\n          console.log('📡 SSE 스트림 종료 (잔여 버퍼)');\r\n        } else {\r\n          console.log('📡 SSE 스트림 완료');\r\n        }\r\n      }\r\n    }\r\n\r\n  } catch (error) {\r\n    if (error.name === 'AbortError') {\r\n      console.log('📡 SSE 스트림 중단됨');\r\n    } else {\r\n      console.error('❌ SSE 스트리밍 오류:', error);\r\n      throw error;\r\n    }\r\n  } finally {\r\n    // 실행 상태 해제\r\n    context.messages.isLoading.value = false;\r\n    context.langgraph.isSearching.value = false;\r\n    context.langgraph.isGeneratingAnswer.value = false;\r\n    context.langgraph.isStreamingAnswer.value = false;\r\n    \r\n    // 최초 질문 완료 후 추가 질문으로 플래그 변경\r\n    context.langgraph.isFollowupQuestion.value = true;\r\n    console.log('✅ 최초 질문 완료 (SSE) - isFollowupQuestion을 true로 설정');\r\n  }\r\n}\r\n\r\n/**\r\n * 폴백 랭그래프 플로우 (오류 발생 시)\r\n * @param {string} inputText - 사용자 입력 텍스트\r\n * @param {Error} error - 발생한 오류\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function fallbackLanggraphFlow(inputText, error, context) {\r\n  // 오류 정보를 저장하여 답변에 포함\r\n  context.langgraph.langGraphError.value = error;\r\n\r\n  // 오류 발생 시 간단한 메시지만 표시\r\n  context.langgraph.currentStep.value = 1;\r\n  context.messages.isLoading.value = false;\r\n  context.langgraph.isSearching.value = false;\r\n\r\n  const fallbackAnswer = `죄송합니다. 분석 중 오류가 발생했습니다: ${error.message}`;\r\n\r\n  // 폴백 메시지 저장\r\n  await saveFallbackMessage(inputText, fallbackAnswer, context);\r\n  \r\n  // 최초 질문 완료 후 추가 질문으로 플래그 변경 (폴백 케이스도 포함)\r\n  context.langgraph.isFollowupQuestion.value = true;\r\n  console.log('✅ 최초 질문 완료 (폴백) - isFollowupQuestion을 true로 설정');\r\n}\r\n\r\n/**\r\n * 폴백 메시지 저장\r\n * @param {string} question - 질문\r\n * @param {string} answer - 답변\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function saveFallbackMessage(question, answer, context) {\r\n  try {\r\n    if (!context.$store.state.currentConversation) {\r\n      console.error('⚠️ 폴백 메시지 저장 실패: 현재 대화가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    const conversationId = context.$store.state.currentConversation.id;\r\n\r\n    // 사용자 메시지 추가\r\n    const userMessage = {\r\n      id: Date.now() + Math.random(),\r\n      conversation_id: conversationId,\r\n      role: 'user',\r\n      question: question,\r\n      ans: null,\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    context.$store.commit('addMessageToCurrentConversation', userMessage);\r\n\r\n    // user 메시지의 ans 필드에 답변 저장\r\n    userMessage.ans = answer;\r\n\r\n    console.log('✅ 폴백 메시지 저장 완료');\r\n\r\n  } catch (error) {\r\n    console.error('❌ 폴백 메시지 저장 실패:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * LangGraph 결과 처리\r\n * @param {Object} result - LangGraph 실행 결과\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function processLangGraphResult(result, context) {\r\n  // 각 단계별 결과를 순차적으로 처리\r\n  if (result.keyword) {\r\n    context.langgraph.currentStep.value = 2;\r\n    context.langgraph.isSearching.value = true; // 키워드 생성 완료 후 검색 시작\r\n    context.langgraph.augmentedKeywords.value = result.keyword.map((keyword, index) => ({\r\n      id: `keyword-${index}`,\r\n      text: keyword,\r\n      category: 'augmented'\r\n    }));\r\n    context.langgraph.extractedKeywords.value = result.keyword;\r\n    console.log('✅ 키워드 증강 완료:', context.langgraph.augmentedKeywords.value.length, '개');\r\n  }\r\n\r\n  if (result.candidates_total) {\r\n    context.langgraph.currentStep.value = 3;\r\n    context.langgraph.searchResults.value = result.candidates_total;\r\n    context.langgraph.searchedDocuments.value = result.candidates_total.map(candidate => \r\n      candidate.res_payload?.document_name || '제목 없음'\r\n    );\r\n    context.langgraph.extractedDbSearchTitle.value = context.langgraph.searchedDocuments.value;\r\n    console.log('✅ RAG 검색 완료:', context.langgraph.searchResults.value.length, '건');\r\n  }\r\n\r\n  if (result.response) {\r\n    context.langgraph.currentStep.value = 4;\r\n    context.langgraph.isSearching.value = false;\r\n    context.langgraph.isGeneratingAnswer.value = true;\r\n    \r\n    if (result.response.answer) {\r\n      context.langgraph.finalAnswer.value = result.response.answer;\r\n      console.log('✅ 최종 답변 생성 완료');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 직접 LangGraph 결과 처리 (API 응답에서)\r\n * @param {Object} apiResult - API 응답 결과\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function processDirectLangGraphResult(apiResult, context) {\r\n  console.log('🔄 processDirectLangGraphResult 시작:', apiResult);\r\n\r\n  // LangGraph 결과 처리\r\n  if (apiResult.result) {\r\n    await processLangGraphResult(apiResult.result, context);\r\n  }\r\n\r\n  // 최종 답변을 user 메시지의 ans 필드에 저장 (assistant 메시지 생성하지 않음)\r\n  if (context.langgraph.finalAnswer.value && context.$store.state.currentConversation) {\r\n    console.log('📝 [LANGGRAPH] 답변을 user 메시지의 ans 필드에 저장:', context.langgraph.finalAnswer.value.length, '자');\r\n    \r\n    // 현재 대화의 마지막 user 메시지를 찾아서 ans 필드 업데이트\r\n    const currentConversation = context.$store.state.currentConversation;\r\n    if (currentConversation && currentConversation.messages && currentConversation.messages.length > 0) {\r\n      // 마지막 user 메시지 찾기\r\n      const userMessages = currentConversation.messages.filter(msg => msg.role === 'user');\r\n      if (userMessages.length > 0) {\r\n        const lastUserMessage = userMessages[userMessages.length - 1];\r\n        lastUserMessage.ans = context.langgraph.finalAnswer.value;\r\n        console.log('✅ [LANGGRAPH] user 메시지 ans 필드 업데이트 완료:', lastUserMessage.id);\r\n      }\r\n    }\r\n\r\n    // LangGraph 결과를 백엔드에 저장\r\n    try {\r\n      const saveResult = await context.saveLangGraphMessage({\r\n        result: {\r\n          response: {\r\n            answer: context.langgraph.finalAnswer.value\r\n          },\r\n          keyword: context.langgraph.extractedKeywords.value,\r\n          candidates_total: context.langgraph.extractedDbSearchTitle.value ? context.langgraph.extractedDbSearchTitle.value.map(title => ({ res_payload: { document_name: title } })) : []\r\n        }\r\n      });\r\n      console.log('✅ LangGraph 메시지 저장 완료:', saveResult);\r\n      \r\n      // assistant 메시지를 사용하지 않으므로 backend_id 설정 제거됨\r\n    } catch (error) {\r\n      console.error('❌ LangGraph 메시지 저장 실패:', error);\r\n    }\r\n  }\r\n\r\n  // 실행 상태 해제\r\n  context.messages.isLoading.value = false;\r\n  context.langgraph.isSearching.value = false;\r\n  context.langgraph.isGeneratingAnswer.value = false;\r\n  context.langgraph.isStreamingAnswer.value = false;\r\n  \r\n  // 최초 질문 완료 후 추가 질문으로 플래그 변경\r\n  context.langgraph.isFollowupQuestion.value = true;\r\n  console.log('✅ 최초 질문 완료 - isFollowupQuestion을 true로 설정');\r\n}\r\n\r\n// LangGraph 결과를 메시지로 저장 (기존 함수 - 폴백용)\r\nasync function saveLangGraphMessage(result, context) {\r\n  try {\r\n    if (!context.$store.state.currentConversation) {\r\n      console.error('⚠️ LangGraph 메시지 저장 실패: 현재 대화가 없습니다.');\r\n      return;\r\n    }\r\n    \r\n    const conversationId = context.$store.state.currentConversation.id;\r\n    const question = context.langgraph.originalInput.value || 'LangGraph 분석 요청';\r\n    \r\n    // SSE 결과 구조에 맞게 답변 추출\r\n    let answer = '분석 결과가 없습니다.';\r\n    if (result.result && result.result.response) {\r\n      answer = result.result.response.answer || result.result.response.final_answer || '분석 결과가 없습니다.';\r\n    } else if (result.response) {\r\n      answer = result.response.answer || result.response.final_answer || '분석 결과가 없습니다.';\r\n    } else if (context.langgraph.finalAnswer.value) {\r\n      answer = context.langgraph.finalAnswer.value;\r\n    }\r\n    \r\n    // 키워드와 문서 제목 데이터 준비\r\n    let keywordData = context.langgraph.extractedKeywords.value;\r\n    let dbSearchTitleData = context.langgraph.extractedDbSearchTitle.value;\r\n    \r\n    // SSE 결과에서 키워드 추출\r\n    if (!keywordData && result.result && result.result.keyword) {\r\n      keywordData = result.result.keyword;\r\n    }\r\n    \r\n    // SSE 결과에서 문서 제목 추출\r\n    if (!dbSearchTitleData && result.result && result.result.candidates_total) {\r\n      dbSearchTitleData = result.result.candidates_total.map(item => \r\n        item?.res_payload?.document_name || '제목 없음'\r\n      );\r\n    }\r\n    \r\n    // LangGraph 전체 상태를 JSON으로 저장 (복원을 위해)\r\n    const langGraphState = {\r\n      originalInput: context.langgraph.originalInput.value,\r\n      augmentedKeywords: context.langgraph.augmentedKeywords.value,\r\n      searchResults: context.langgraph.searchResults.value.slice(0, 5),\r\n      finalAnswer: answer,\r\n      analysisImageUrl: context.langgraph.analysisImageUrl.value, // 이미지 URL 저장 추가\r\n      currentStep: context.langgraph.currentStep.value,\r\n      extractedKeywords: keywordData,\r\n      extractedDbSearchTitle: dbSearchTitleData\r\n    };\r\n    \r\n    // 검색 결과를 db_contents로 변환\r\n    const dbContentsData = context.langgraph.searchResults.value || [];\r\n    \r\n    console.log('🖼️ [FRONTEND IMAGE 전송] analysisImageUrl 값:', context.langgraph.analysisImageUrl.value);\r\n    console.log('🖼️ [FRONTEND IMAGE 전송] analysisImageUrl 타입:', typeof context.langgraph.analysisImageUrl.value);\r\n    console.log('🖼️ [FRONTEND IMAGE 전송] analysisImageUrl 길이:', context.langgraph.analysisImageUrl.value?.length);\r\n    \r\n    console.log('📤 [SAVE] 전송 데이터:', {\r\n      question: question,\r\n      q_mode: 'search',\r\n      keyword: langGraphState,\r\n      db_search_title: dbSearchTitleData,\r\n      db_contents: dbContentsData,\r\n      db_contents_length: dbContentsData.length,\r\n      image: context.langgraph.analysisImageUrl.value\r\n    });\r\n    \r\n    // 메시지 생성 API 호출\r\n    const requestBody = { \r\n      question: question,\r\n      q_mode: 'search',  // 첫 번째 질문은 q_mode를 'search'로 설정 (대화 제목 업데이트를 위해)\r\n      assistant_response: answer,\r\n      skip_llm: true,  // 첫 번째 질문은 LangGraph 답변만 사용, 별도 LLM 처리 안함\r\n      keyword: JSON.stringify(langGraphState), // 전체 상태를 JSON으로 저장\r\n      db_search_title: Array.isArray(dbSearchTitleData) ? JSON.stringify(dbSearchTitleData) : dbSearchTitleData,\r\n      db_contents: JSON.stringify(dbContentsData), // 검색 결과 전체 정보 저장\r\n      image: context.langgraph.analysisImageUrl.value,  // 이미지 URL 전송\r\n      user_name: context.$store.state.user?.username || '사용자'\r\n    };\r\n    \r\n    console.log('🖼️ [FRONTEND IMAGE 전송] 최종 requestBody.image 값:', requestBody.image);\r\n    console.log('📤 [FRONTEND IMAGE 전송] 요청 본문 전체:', JSON.stringify(requestBody, null, 2));\r\n    \r\n    const response = await fetch(`http://localhost:8000/api/conversations/${conversationId}/messages`, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n      },\r\n      body: JSON.stringify(requestBody)\r\n    });\r\n    \r\n    console.log('📥 [FRONTEND IMAGE 전송] 응답 상태:', response.status, response.statusText);\r\n    \r\n    if (response.ok) {\r\n      await response.json();\r\n      \r\n      // 대화 제목 업데이트 (질문의 첫 50자로)\r\n      if (context.$store.state.currentConversation) {\r\n        const conversationTitle = question.length > 50 ? question.substring(0, 50) + '...' : question;\r\n        \r\n        try {\r\n          const titleUpdateResponse = await fetch(`http://localhost:8000/api/conversations/${conversationId}`, {\r\n            method: 'PUT',\r\n            headers: { \r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n            },\r\n            body: JSON.stringify({ \r\n              title: conversationTitle\r\n            })\r\n          });\r\n          \r\n          if (titleUpdateResponse.ok) {\r\n            // 스토어의 현재 대화 제목도 업데이트\r\n            context.$store.commit('updateConversationTitle', {\r\n              conversationId: conversationId,\r\n              title: conversationTitle\r\n            });\r\n          } else {\r\n            console.warn('⚠️ 대화 제목 업데이트 실패:', titleUpdateResponse.status);\r\n          }\r\n        } catch (titleError) {\r\n          console.warn('⚠️ 대화 제목 업데이트 중 오류:', titleError);\r\n        }\r\n      }\r\n      \r\n      // 대화 목록 새로고침 제거 - UI refresh 방지\r\n      console.log('✅ 대화 목록 새로고침 생략 (UI refresh 방지)');\r\n      \r\n    } else {\r\n      console.error('❌ LangGraph 메시지 저장 실패:', response.status, response.statusText);\r\n      const errorText = await response.text();\r\n      console.error('❌ 오류 응답 내용:', errorText);\r\n    }\r\n  } catch (error) {\r\n    console.error('LangGraph 메시지 저장 중 오류:', error);\r\n  }\r\n}\r\n\r\n// LangGraph 결과를 백엔드에 저장하는 메서드\r\nasync function saveLangGraphMessageToBackend(question, answer, conversationId, context) {\r\n  try {\r\n    const token = localStorage.getItem('access_token');\r\n    \r\n    // LangGraph 결과 데이터 준비\r\n    const messageData = {\r\n      question: question,\r\n      q_mode: 'search', // LangGraph 결과는 search 모드\r\n      keyword: context.langgraph.extractedKeywords.value || null,\r\n      db_search_title: context.langgraph.extractedDbSearchTitle.value ? JSON.stringify(context.langgraph.extractedDbSearchTitle.value) : null,\r\n      db_contents: context.langgraph.searchResults.value ? JSON.stringify(context.langgraph.searchResults.value) : null,\r\n      assistant_response: answer\r\n    };\r\n            \r\n    const response = await fetch(`http://localhost:8000/api/conversations/${conversationId}/messages`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token ? `Bearer ${token}` : ''\r\n      },\r\n      body: JSON.stringify(messageData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`메시지 저장 실패: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    console.log('✅ LangGraph 메시지 저장 완료:', result);\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('❌ LangGraph 메시지 저장 실패:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default {\r\n  executeLanggraphFlow,\r\n  executeLangGraphWithSSE,\r\n  fallbackLanggraphFlow,\r\n  saveFallbackMessage,\r\n  processLangGraphResult,\r\n  processDirectLangGraphResult,\r\n  saveLangGraphMessage,\r\n  saveLangGraphMessageToBackend\r\n};\r\n","/**\r\n * 추가 질문 처리 유틸리티\r\n * Home.vue의 추가 질문 관련 함수들을 분리하여 관리\r\n * \r\n * 중요: 이 시스템에서는 질문과 답변이 하나의 Message row에 저장됩니다.\r\n * - question 필드: 사용자 질문\r\n * - ans 필드: AI 답변\r\n * - role: 'user' (질문과 답변이 모두 user 메시지에 포함)\r\n * - 별도의 assistant 메시지는 생성하지 않음\r\n */\r\n\r\n/**\r\n * 추가 질문 실행 메인 함수\r\n * @param {string} inputText - 사용자 입력 텍스트\r\n * @param {number|null} conversationId - 대화 ID\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function executeAdditionalQuestionFlow(inputText, conversationId, context) {\r\n  try {\r\n    // conversationId가 제공되지 않은 경우 currentConversation에서 가져오기\r\n    if (!conversationId) {\r\n      if (!context.$store.state.currentConversation) {\r\n        console.error('⚠️ 추가 질문 실행 실패: 현재 대화가 없습니다.');\r\n        return;\r\n      }\r\n      conversationId = context.$store.state.currentConversation.id;\r\n    }\r\n\r\n    console.log('💬 추가 질문 스트리밍 답변 실행 시작:', inputText);\r\n\r\n    // 인증 토큰 가져오기\r\n    const token = localStorage.getItem('access_token');\r\n    if (!token) {\r\n      throw new Error('인증 토큰이 없습니다.');\r\n    }\r\n\r\n    // 1. 먼저 영구 message_id 발급\r\n\r\n    const prepareResponse = await fetch(`http://localhost:8000/api/conversations/${conversationId}/messages/prepare`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({\r\n        question: inputText,\r\n        q_mode: 'add',\r\n        conversation_id: conversationId\r\n      })\r\n    });\r\n\r\n    if (!prepareResponse.ok) {\r\n      throw new Error(`Prepare message failed: ${prepareResponse.status}`);\r\n    }\r\n\r\n    const preparedData = await prepareResponse.json();\r\n    console.log('✅ 추가 질문 영구 메시지 ID 발급 완료:', preparedData);\r\n\r\n    // 2. 백엔드에서 생성된 메시지를 프론트엔드에 추가 (UI 표시용)\r\n    // 중요: 질문과 답변이 하나의 row에 저장되는 구조\r\n    // - question: 사용자 질문 (즉시 저장)\r\n    // - ans: AI 답변 (스트리밍 완료 후 업데이트)\r\n    // - UI에서는 user 메시지에 질문과 답변을 모두 표시\r\n    const userMessage = {\r\n      id: `${preparedData.userMessage.id}-user`,\r\n      conversation_id: conversationId,\r\n      role: 'user',\r\n      question: inputText,  // 사용자 질문\r\n      ans: '',  // AI 답변 (아직 없음, 스트리밍 완료 후 업데이트됨)\r\n      created_at: new Date().toISOString(),\r\n      backend_id: preparedData.userMessage.id\r\n    };\r\n\r\n    // 현재 대화에 메시지 추가 (UI 표시용)\r\n    context.$store.commit('addMessageToCurrentConversation', userMessage);\r\n\r\n    // 스트리밍 메시지 초기화\r\n    context.$store.commit('updateStreamingMessage', '');\r\n    context.$store.commit('setIsStreaming', false);\r\n\r\n\r\n    // DOM 업데이트 대기\r\n    await context.$nextTick();\r\n\r\n    // 스트리밍 상태 시작 (메시지가 실제로 시작될 때만)\r\n    context.$store.commit('setIsStreaming', true);\r\n    context.$store.commit('updateStreamingMessage', '');\r\n    context.sse.streamingVisible.value = true; // 스트리밍 영역을 미리 확보\r\n    console.log('👀 추가 질문 스트리밍 영역 표시 시작');\r\n\r\n    // DOM 업데이트 대기\r\n    await context.$nextTick();\r\n\r\n    // token은 이미 위에서 선언됨\r\n\r\n    // LangGraph 컨텍스트는 수집하지 않음 (추가 질문은 일반 LLM만 사용)\r\n    // 요청 데이터 구성\r\n    const requestData = {\r\n      question: inputText,\r\n      conversation_id: conversationId,\r\n      message_id: preparedData.userMessage.id, // 영구 메시지 ID 포함\r\n      generate_image: false,\r\n      include_langgraph_context: false,\r\n      langgraph_context: null,\r\n      q_mode: 'add'  // 추가질문 모드 설정\r\n    };\r\n\r\n    console.log('📤 추가 질문 요청 데이터:', requestData);\r\n    console.log('📤 추가 질문 요청 상세:');\r\n    console.log('  - question:', inputText);\r\n    console.log('  - conversation_id:', conversationId);\r\n    console.log('  - q_mode:', 'add');\r\n    console.log('  - generate_image:', false);\r\n    \r\n    // 현재 대화의 메시지 히스토리 확인\r\n    const currentConversation = context.$store.state.currentConversation;\r\n    if (currentConversation && currentConversation.messages) {\r\n      console.log('📋 현재 대화 메시지 히스토리:');\r\n      console.log('  - 총 메시지 수:', currentConversation.messages.length);\r\n      currentConversation.messages.forEach((msg, index) => {\r\n        console.log(`  - 메시지 ${index + 1}:`, {\r\n          id: msg.id,\r\n          role: msg.role,\r\n          question: msg.question ? msg.question.substring(0, 100) + '...' : '없음',\r\n          ans: msg.ans ? msg.ans.substring(0, 100) + '...' : '없음',\r\n          created_at: msg.created_at\r\n        });\r\n      });\r\n    } else {\r\n      console.log('⚠️ 현재 대화 또는 메시지가 없습니다');\r\n    }\r\n\r\n    // 스트림 요청 전송\r\n    const response = await fetch('http://localhost:8000/api/normal_llm/followup/stream', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(requestData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    let assistantResponse = '';\r\n    const contentType = response.headers.get('content-type') || '';\r\n    const isEventStream = contentType.includes('text/event-stream');\r\n    console.log('📡 추가 질문 스트림 콘텐츠 타입:', contentType || '알 수 없음');\r\n\r\n    if (isEventStream) {\r\n      // 이벤트 스트림 처리 (SSE)\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n      let buffer = '';\r\n      let streamClosed = false;\r\n\r\n      const processBuffer = () => {\r\n        let boundaryIndex = buffer.indexOf('\\n\\n');\r\n\r\n        while (boundaryIndex !== -1) {\r\n          const rawEvent = buffer.slice(0, boundaryIndex);\r\n          buffer = buffer.slice(boundaryIndex + 2);\r\n\r\n          const dataLines = rawEvent\r\n            .split('\\n')\r\n            .filter(line => line.startsWith('data: '));\r\n\r\n          if (dataLines.length === 0) {\r\n            boundaryIndex = buffer.indexOf('\\n\\n');\r\n            continue;\r\n          }\r\n\r\n          const dataPayload = dataLines\r\n            .map(line => line.slice(6))\r\n            .join('\\n');\r\n\r\n          if (dataPayload === '[DONE]') {\r\n            console.log('📡 추가 질문 스트리밍 종료 신호 수신');\r\n            streamClosed = true;\r\n            return;\r\n          }\r\n\r\n          try {\r\n            const messageData = JSON.parse(dataPayload);\r\n\r\n            if (messageData.content) {\r\n              assistantResponse += messageData.content;\r\n              context.$store.commit('updateStreamingMessage', assistantResponse);\r\n\r\n              if (assistantResponse.length > 0 && !context.sse.streamingVisible.value) {\r\n                context.sse.streamingVisible.value = true;\r\n                console.log('👀 추가 질문 스트리밍 영역 활성화 (데이터 수신)');\r\n              }\r\n            }\r\n          } catch (parseError) {\r\n            console.warn('📡 추가 질문 스트리밍 데이터 파싱 오류:', parseError, '\\n📄 원본 데이터:', dataPayload);\r\n          }\r\n\r\n          boundaryIndex = buffer.indexOf('\\n\\n');\r\n        }\r\n      };\r\n\r\n      while (!streamClosed) {\r\n        const { done: streamDone, value } = await reader.read();\r\n\r\n        if (value) {\r\n          buffer += decoder.decode(value, { stream: !streamDone });\r\n          processBuffer();\r\n        }\r\n\r\n        if (streamDone) {\r\n          buffer += decoder.decode(new Uint8Array(), { stream: false });\r\n          processBuffer();\r\n          console.log('📡 추가 질문 이벤트 스트리밍 완료');\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      // 일반 텍스트 스트리밍 처리\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done: streamDone, value } = await reader.read();\r\n\r\n        if (value) {\r\n          const chunkText = decoder.decode(value, { stream: !streamDone });\r\n          if (chunkText) {\r\n            assistantResponse += chunkText;\r\n            context.$store.commit('updateStreamingMessage', assistantResponse);\r\n\r\n            if (assistantResponse.length > 0 && !context.sse.streamingVisible.value) {\r\n              context.sse.streamingVisible.value = true;\r\n              console.log('👀 추가 질문 스트리밍 영역 활성화 (텍스트 데이터)');\r\n            }\r\n          }\r\n        }\r\n\r\n        if (streamDone) {\r\n          console.log('📡 추가 질문 텍스트 스트리밍 완료');\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 스트리밍 완료 후 처리\r\n    if (assistantResponse) {\r\n      // console.log('✅ 추가 질문 스트리밍 완료');\r\n      // console.log('🔍 [DEBUG] 스트리밍 완료 시점 - UI 상태 체크:');\r\n      // console.log('  - showLanggraph:', context.langgraph.showLanggraph.value);\r\n      // console.log('  - currentStep:', context.langgraph.currentStep.value);\r\n      // console.log('  - isFollowupQuestion:', context.langgraph.isFollowupQuestion.value);\r\n      \r\n      // 스트리밍 상태 해제\r\n      context.$store.commit('setIsStreaming', false);\r\n      context.$store.commit('updateStreamingMessage', '');\r\n      context.sse.streamingVisible.value = false;\r\n      \r\n      // console.log('🔍 [DEBUG] 스트리밍 상태 해제 후:');\r\n      // console.log('  - isStreaming:', context.$store.state.isStreaming);\r\n      // console.log('  - streamingMessage:', context.$store.state.streamingMessage);\r\n      // console.log('  - streamingVisible:', context.sse.streamingVisible.value);\r\n      \r\n      // DOM 업데이트 대기\r\n      await context.$nextTick();\r\n      \r\n      // 3. 스트리밍 완료 시 메시지 내용 업데이트 (UI 업데이트용)\r\n      // 중요: user 메시지의 ans 필드에 AI 답변을 업데이트\r\n      try {\r\n        const completeResponse = await fetch(`http://localhost:8000/api/messages/${preparedData.userMessage.id}/complete`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n          },\r\n          body: JSON.stringify({\r\n            assistant_response: assistantResponse,  // user 메시지의 ans 필드에 저장됨\r\n            image_url: null\r\n          })\r\n        });\r\n\r\n        if (completeResponse.ok) {\r\n          // console.log('✅ 추가 질문 메시지 완료 처리 성공');\r\n          // console.log('📊 메시지 완료 처리 상세:');\r\n          // console.log('  - user_message_id:', preparedData.userMessage.id);\r\n          // console.log('  - response_length:', assistantResponse.length);\r\n          // console.log('  - conversation_id:', conversationId);\r\n          \r\n          // console.log('🔍 [DEBUG] updateMessageAnswer 호출 전 UI 상태:');\r\n          // console.log('  - showLanggraph:', context.langgraph.showLanggraph.value);\r\n          // console.log('  - currentStep:', context.langgraph.currentStep.value);\r\n          // console.log('  - isFollowupQuestion:', context.langgraph.isFollowupQuestion.value);\r\n          \r\n          // user 메시지의 ans 필드에 답변 저장 (Vue 반응성 시스템 사용)\r\n          context.$store.commit('updateMessageAnswer', {\r\n            messageId: preparedData.userMessage.id,\r\n            answer: assistantResponse\r\n          });\r\n          \r\n          // console.log('🔍 [DEBUG] updateMessageAnswer 호출 후 UI 상태:');\r\n          // console.log('  - showLanggraph:', context.langgraph.showLanggraph.value);\r\n          // console.log('  - currentStep:', context.langgraph.currentStep.value);\r\n          // console.log('  - isFollowupQuestion:', context.langgraph.isFollowupQuestion.value);\r\n          \r\n          // console.log('✅ [ADDITIONAL] user 메시지 ans 필드 업데이트 완료:', preparedData.userMessage.id);\r\n          // console.log('✅ 프론트엔드 assistant 메시지 추가 완료');\r\n        } else {\r\n          console.warn('⚠️ 추가 질문 메시지 완료 처리 실패:', completeResponse.status);\r\n        }\r\n      } catch (completeError) {\r\n        console.warn('⚠️ 추가 질문 메시지 완료 처리 오류:', completeError);\r\n      }\r\n    } else {\r\n      // 답변이 없는 경우에만 스트리밍 상태 해제\r\n      context.$store.commit('setIsStreaming', false);\r\n      context.$store.commit('updateStreamingMessage', '');\r\n      context.sse.streamingVisible.value = false;\r\n    }\r\n\r\n    console.log('✅ 추가 질문 처리 완료');\r\n\r\n  } catch (error) {\r\n    console.error('❌ 추가 질문 처리 오류:', error);\r\n    \r\n    // 에러 메시지를 사용자에게 표시\r\n    const errorMessage = `죄송합니다. 추가 질문 처리 중 오류가 발생했습니다: ${error.message}`;\r\n    \r\n    if (context.$store.state.currentConversation) {\r\n      const errorUserMessage = {\r\n        id: Date.now() + Math.random(),\r\n        conversation_id: context.$store.state.currentConversation.id,\r\n        role: 'user',\r\n        question: inputText,\r\n        ans: errorMessage,  // 에러 메시지를 ans 필드에 저장\r\n        created_at: new Date().toISOString()\r\n      };\r\n      \r\n      context.$store.commit('addMessageToCurrentConversation', errorUserMessage);\r\n    }\r\n    \r\n    // 스트리밍 상태 해제\r\n    context.$store.commit('setIsStreaming', false);\r\n    context.$store.commit('updateStreamingMessage', '');\r\n    context.sse.streamingVisible.value = false;\r\n  }\r\n}\r\n\r\n// saveAndReplaceAdditionalQuestionMessage 함수는 더 이상 사용하지 않으므로 제거됨\r\n\r\n/**\r\n * LangGraph 컨텍스트 수집 (Judge 함수 사용)\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n * @returns {Object|null} LangGraph 컨텍스트\r\n */\r\nexport function getLanggraphContextForAdditionalQuestion(context) {\r\n  try {\r\n    const currentConversation = context.$store.state.currentConversation;\r\n    if (!currentConversation || !currentConversation.messages) {\r\n      return null;\r\n    }\r\n\r\n    // Judge 함수를 사용하여 LangGraph 컨텍스트 추출\r\n    const { extractLangGraphContext } = require('./questionJudge.js');\r\n    const langgraphContext = extractLangGraphContext(currentConversation.messages);\r\n\r\n    if (langgraphContext.hasSearchResults) {\r\n      return {\r\n        documents: langgraphContext.documents || [],\r\n        documents_count: langgraphContext.documents.length || 0,\r\n        sources: [],\r\n        question: '',\r\n        answer: '',\r\n        // 추가 컨텍스트 정보\r\n        context_type: 'langgraph_search',\r\n        search_query: '',\r\n        retrieved_docs: langgraphContext.documents || [],\r\n        keywords: langgraphContext.keywords || []\r\n      };\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.warn('랭그래프 컨텍스트 수집 실패:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// ===== 💬 추가 질문 처리 함수 (분리된 함수 사용) =====\r\nexport async function executeAdditionalQuestionFlowWrapper(inputText, conversationId = null, context) {\r\n  return await executeAdditionalQuestionFlow(inputText, conversationId, context);\r\n}\r\n\r\nexport default {\r\n  executeAdditionalQuestionFlow,\r\n  getLanggraphContextForAdditionalQuestion,\r\n  executeAdditionalQuestionFlowWrapper\r\n};\r\n","/**\r\n * 대화 복원 유틸리티\r\n * Home.vue의 대화 복원 관련 함수들을 분리하여 관리\r\n */\r\n\r\n/**\r\n * 대화에서 랭그래프 정보 복원\r\n * @param {Object} conversation - 대화 객체\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function restoreLanggraphFromConversation(conversation, context) {\r\n  // 대화 복원 상태 설정\r\n  context.langgraph.isRestoringConversation.value = true;\r\n  context.langgraph.isNewConversation.value = false; // 기존 대화 복원\r\n\r\n  // 랭그래프 완료 직후에는 복원 스킵 (상태 유지)\r\n  if (context.langgraph.isLanggraphJustCompleted.value) {\r\n    context.langgraph.isRestoringConversation.value = false;\r\n    // 캐시 업데이트 안 함 - 상태를 완전히 그대로 유지\r\n    return;\r\n  }\r\n\r\n  // 캐시 확인 - 동일한 대화에 대해 이미 복원했다면 스킵 (성능 최적화)\r\n  // 단, 새 대화 생성 직후에는 캐시를 무시하여 다른 대화로 전환 시 복원 가능하도록 함\r\n  if (context.langgraph.lastRestoredConversationId.value === conversation.id && \r\n      !context.isNewConversation) {\r\n    console.log('📋 동일한 대화 이미 복원됨 - 스킵:', conversation.id);\r\n    context.langgraph.isRestoringConversation.value = false;\r\n    return;\r\n  }\r\n\r\n  // console.log('🔄 대화에서 랭그래프 정보 복원 시작:', conversation.id);\r\n  // console.log('🔍 [DEBUG] 복원 시작 시점 UI 상태:');\r\n  // console.log('  - showLanggraph:', context.langgraph.showLanggraph.value);\r\n  // console.log('  - currentStep:', context.langgraph.currentStep.value);\r\n  // console.log('  - isFollowupQuestion:', context.langgraph.isFollowupQuestion.value);\r\n  // console.log('  - lastRestoredConversationId:', context.langgraph.lastRestoredConversationId.value);\r\n\r\n  try {\r\n    // 동일한 대화를 다시 복원하는 경우 (fetchConversations 후) - 상태 유지\r\n    if (context.langgraph.lastRestoredConversationId.value === conversation.id && \r\n        context.langgraph.showLanggraph.value && \r\n        context.langgraph.finalAnswer.value) {\r\n      // console.log('✅ 동일한 대화 - 랭그래프 상태 유지 (초기화 스킵)');\r\n      // console.log('🔍 [DEBUG] 상태 유지 시점 UI 상태:');\r\n      // console.log('  - showLanggraph:', context.langgraph.showLanggraph.value);\r\n      // console.log('  - currentStep:', context.langgraph.currentStep.value);\r\n      context.langgraph.isRestoringConversation.value = false;\r\n      return;\r\n    }\r\n    \r\n    // 랭그래프 상태 초기화 - showLanggraph는 false로 하지 않음\r\n    // context.langgraph.resetLanggraph(); // 주석 처리 - 복원 시에는 초기화하지 않음\r\n    \r\n    // 필요한 속성만 초기화\r\n    context.langgraph.currentStep.value = 0;\r\n    context.langgraph.originalInput.value = '';\r\n    context.langgraph.augmentedKeywords.value = [];\r\n    context.langgraph.searchResults.value = [];\r\n    context.langgraph.finalAnswer.value = '';\r\n    context.langgraph.streamingAnswer.value = '';\r\n    context.langgraph.analysisImageUrl.value = '';\r\n    context.langgraph.isSearching.value = false;\r\n    context.langgraph.isGeneratingAnswer.value = false;\r\n    context.langgraph.isStreamingAnswer.value = false;\r\n    context.langgraph.extractedKeywords.value = null;\r\n    context.langgraph.extractedDbSearchTitle.value = null;\r\n\r\n    // 대화의 메시지들에서 랭그래프 정보 찾기\r\n    const messages = conversation.messages || [];\r\n    \r\n    // 메시지가 비어있으면 경고하고 랭그래프 숨기기\r\n    if (messages.length === 0) {\r\n      console.warn('⚠️ 대화 메시지가 비어있습니다. 대화 ID:', conversation.id);\r\n      // console.log('📋 전체 메시지 목록:', []);\r\n      // console.log('📭 LangGraph 정보 없음 - 일반 대화로 처리');\r\n      \r\n      // 랭그래프 영역 숨기기\r\n      context.langgraph.showLanggraph.value = false;\r\n      \r\n      // 빈 대화는 추가 질문이 아님\r\n      context.langgraph.isFollowupQuestion.value = false;\r\n      console.log('✅ 빈 대화 - isFollowupQuestion을 false로 설정');\r\n      \r\n      context.langgraph.lastRestoredConversationId.value = conversation.id;\r\n      context.langgraph.isRestoringConversation.value = false;\r\n      return;\r\n    }\r\n    \r\n    let langgraphMessage = null;\r\n\r\n    // LangGraph 정보가 있는 메시지 찾기 (user 메시지 중 q_mode가 'search'이거나 keyword/db_contents가 있는 메시지)\r\n    // console.log('🔍 LangGraph 메시지 찾기 시작:', messages.length, '개 메시지');\r\n        \r\n    for (const message of messages) {      \r\n      // user 메시지만 확인 (백엔드에서 keyword, db_contents는 user 메시지에만 포함됨)\r\n      if (message.role === 'user' && (message.q_mode === 'search' || message.keyword || message.db_contents)) {\r\n        langgraphMessage = message;\r\n        console.log('✅ LangGraph 메시지 발견:', message.id);\r\n        break;\r\n      }\r\n    }\r\n    \r\n    // 디버깅: 모든 메시지의 q_mode 출력\r\n    // console.log('📋 전체 메시지 목록:', messages.map(m => ({\r\n    //   id: m.id,\r\n    //   role: m.role,\r\n    //   q_mode: m.q_mode,\r\n    //   has_keyword: !!m.keyword,\r\n    //   has_db_contents: !!m.db_contents,\r\n    //   has_image: !!m.image\r\n    // })));\r\n\r\n    if (langgraphMessage) {\r\n      console.log('✅ LangGraph 메시지 발견:', langgraphMessage.id);\r\n      \r\n      // 랭그래프 UI 표시\r\n      context.langgraph.showLanggraph.value = true;\r\n      context.langgraph.currentStep.value = 4; // 최종 단계로 설정\r\n      context.langgraph.originalInput.value = langgraphMessage.question || '';\r\n      \r\n      // LangGraph 정보가 있으면 추가 질문으로 설정\r\n      context.langgraph.isFollowupQuestion.value = true;\r\n      // console.log('✅ LangGraph 정보 존재 - isFollowupQuestion을 true로 설정');\r\n\r\n      // 키워드 정보 복원 (전체 상태 또는 키워드 배열)\r\n      if (langgraphMessage.keyword) {\r\n        try {\r\n          const keywordData = typeof langgraphMessage.keyword === 'string' \r\n            ? JSON.parse(langgraphMessage.keyword) \r\n            : langgraphMessage.keyword;\r\n          \r\n          // 전체 langGraphState 객체인 경우\r\n          if (keywordData && typeof keywordData === 'object' && !Array.isArray(keywordData)) {\r\n            // 전체 상태 복원\r\n            if (keywordData.originalInput) {\r\n              context.langgraph.originalInput.value = keywordData.originalInput;\r\n            }\r\n            if (keywordData.augmentedKeywords) {\r\n              context.langgraph.augmentedKeywords.value = keywordData.augmentedKeywords;\r\n            }\r\n            if (keywordData.searchResults) {\r\n              context.langgraph.searchResults.value = keywordData.searchResults;\r\n            }\r\n            if (keywordData.finalAnswer) {\r\n              context.langgraph.finalAnswer.value = keywordData.finalAnswer;\r\n            }\r\n            if (keywordData.analysisImageUrl) {\r\n              context.langgraph.analysisImageUrl.value = keywordData.analysisImageUrl;\r\n            }\r\n            if (keywordData.extractedKeywords) {\r\n              context.langgraph.extractedKeywords.value = keywordData.extractedKeywords;\r\n            }\r\n            if (keywordData.extractedDbSearchTitle) {\r\n              context.langgraph.extractedDbSearchTitle.value = keywordData.extractedDbSearchTitle;\r\n              context.langgraph.searchedDocuments.value = keywordData.extractedDbSearchTitle;\r\n            }\r\n            // console.log('✅ 전체 상태 복원 완료 (langGraphState):', {\r\n            //   originalInput: context.langgraph.originalInput.value,\r\n            //   augmentedKeywords: context.langgraph.augmentedKeywords.value.length,\r\n            //   searchResults: context.langgraph.searchResults.value.length,\r\n            //   finalAnswer: context.langgraph.finalAnswer.value ? '있음' : '없음',\r\n            //   analysisImageUrl: context.langgraph.analysisImageUrl.value ? '있음' : '없음'\r\n            // });\r\n          } else if (Array.isArray(keywordData)) {\r\n            // 키워드 배열인 경우\r\n            context.langgraph.augmentedKeywords.value = keywordData.map((keyword, index) => ({\r\n              id: `keyword-${index}`,\r\n              text: keyword,\r\n              category: 'augmented'\r\n            }));\r\n            context.langgraph.extractedKeywords.value = keywordData;\r\n            // console.log('✅ 키워드 복원 완료:', keywordData.length, '개');\r\n          }\r\n        } catch (error) {\r\n          console.warn('키워드 파싱 실패:', error);\r\n        }\r\n      }\r\n\r\n      // 검색 결과 정보 복원 (db_contents가 별도로 있는 경우)\r\n      if (langgraphMessage.db_contents) {\r\n        try {\r\n          const dbContents = JSON.parse(langgraphMessage.db_contents);\r\n          if (Array.isArray(dbContents)) {\r\n            context.langgraph.searchResults.value = dbContents;\r\n            context.langgraph.searchedDocuments.value = dbContents.map(doc => doc.document_name || '제목 없음');\r\n            context.langgraph.extractedDbSearchTitle.value = context.langgraph.searchedDocuments.value;\r\n            console.log('✅ 검색 결과 복원 완료:', dbContents.length, '건');\r\n          }\r\n        } catch (error) {\r\n          console.warn('검색 결과 파싱 실패:', error);\r\n        }\r\n      }\r\n\r\n      // 답변 정보 복원 (user 메시지의 ans 필드에서 복원)\r\n      console.log('🔍 답변 복원 시작:', {\r\n        hasAns: !!langgraphMessage.ans,\r\n        ansLength: langgraphMessage.ans ? langgraphMessage.ans.length : 0,\r\n        currentFinalAnswer: context.langgraph.finalAnswer.value,\r\n        currentFinalAnswerLength: context.langgraph.finalAnswer.value ? context.langgraph.finalAnswer.value.length : 0\r\n      });\r\n      \r\n      // user 메시지의 ans 필드에서 답변 복원\r\n      if (langgraphMessage.ans && langgraphMessage.ans.trim() !== '') {\r\n        context.langgraph.finalAnswer.value = langgraphMessage.ans;\r\n        console.log('✅ 답변 복원 완료 (user 메시지 ans 필드에서):', {\r\n          messageId: langgraphMessage.id,\r\n          ansLength: langgraphMessage.ans.length,\r\n          finalAnswerSet: context.langgraph.finalAnswer.value.length\r\n        });\r\n      } else {\r\n        console.warn('⚠️ user 메시지에 ans가 없습니다:', {\r\n          messageId: langgraphMessage.id,\r\n          hasAns: !!langgraphMessage.ans,\r\n          ansValue: langgraphMessage.ans\r\n        });\r\n      }\r\n\r\n      // 이미지 URL 복원 (keyword에서 복원되지 않은 경우)\r\n      if (langgraphMessage.image && !context.langgraph.analysisImageUrl.value) {\r\n        context.langgraph.analysisImageUrl.value = langgraphMessage.image;\r\n        console.log('✅ 분석 이미지 URL 복원 완료');\r\n      }\r\n\r\n      // 최종 복원 상태 로그\r\n      console.log('✅ 랭그래프 정보 복원 완료:', {\r\n        showLanggraph: context.langgraph.showLanggraph.value,\r\n        currentStep: context.langgraph.currentStep.value,\r\n        hasOriginalInput: !!context.langgraph.originalInput.value,\r\n        hasFinalAnswer: !!context.langgraph.finalAnswer.value,\r\n        finalAnswerLength: context.langgraph.finalAnswer.value ? context.langgraph.finalAnswer.value.length : 0,\r\n        hasAugmentedKeywords: context.langgraph.augmentedKeywords.value.length > 0,\r\n        hasSearchResults: context.langgraph.searchResults.value.length > 0\r\n      });\r\n    } else {\r\n      console.log('📭 LangGraph 정보 없음 - 일반 대화로 처리');\r\n      // LangGraph 정보가 없으면 추가 질문이 아님\r\n      context.langgraph.isFollowupQuestion.value = false;\r\n      console.log('✅ LangGraph 정보 없음 - isFollowupQuestion을 false로 설정');\r\n    }\r\n\r\n    // 복원된 대화 ID 캐시\r\n    context.langgraph.lastRestoredConversationId.value = conversation.id;\r\n\r\n  } catch (error) {\r\n    console.error('❌ 랭그래프 정보 복원 실패:', error);\r\n  } finally {\r\n    context.langgraph.isRestoringConversation.value = false;\r\n  }\r\n}\r\n\r\n/**\r\n * 관련 대화에서 LangGraph 정보 찾아서 복원\r\n * @param {number} conversationId - 대화 ID\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function findAndRestoreRelatedLangGraph(conversationId, context) {\r\n  console.log('관련 대화 찾기 시작:', conversationId);\r\n\r\n  try {\r\n    const response = await fetch(`http://localhost:8000/api/conversations/${conversationId}/related`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('관련 대화 검색 결과:', result);\r\n\r\n    if (result.related_conversation) {\r\n      console.log('✅ 관련 대화 발견:', result.related_conversation.id);\r\n      \r\n      // 관련 대화의 메시지들을 현재 대화에 추가\r\n      const relatedMessages = result.related_conversation.messages || [];\r\n      \r\n      for (const message of relatedMessages) {\r\n        context.$store.commit('addMessageToCurrentConversation', message);\r\n      }\r\n\r\n      // 랭그래프 정보 복원\r\n      await restoreLanggraphFromConversation(result.related_conversation, context);\r\n      \r\n      console.log('✅ 관련 대화에서 랭그래프 정보 복원 완료');\r\n    } else {\r\n      console.log('📭 관련 대화 없음');\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('❌ 관련 대화 찾기 실패:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 새로고침 시 대화 복원 (URL 파라미터 기반)\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\n\r\n\r\n/**\r\n * 새로고침 시 현재 대화 복원\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport async function restoreCurrentConversation(context) {\r\n  try {\r\n    const currentConversation = context.$store.state.currentConversation;\r\n    if (!currentConversation || !currentConversation.id) {\r\n      console.log('복원할 대화가 없습니다.');\r\n      return;\r\n    }\r\n\r\n    console.log('🔄 현재 대화 복원 시작:', currentConversation.id);\r\n\r\n    // 대화 정보 다시 가져오기\r\n    const response = await fetch(`http://localhost:8000/api/conversations/${currentConversation.id}/messages`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    // console.log('대화 정보 다시 로드 완료:', result);\r\n\r\n    // Vuex 스토어에 대화 업데이트\r\n    context.$store.commit('setCurrentConversation', {\r\n      id: currentConversation.id,\r\n      messages: result.messages || []\r\n    });\r\n\r\n    // 랭그래프 정보 복원\r\n    await restoreLanggraphFromConversation({\r\n      id: currentConversation.id,\r\n      messages: result.messages || []\r\n    }, context);\r\n\r\n    // console.log('✅ 현재 대화 복원 완료');\r\n\r\n  } catch (error) {\r\n    console.error('❌ 현재 대화 복원 실패:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * 현재 메시지에서 랭그래프 상태 복원 (피드백 후용)\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트 (this)\r\n */\r\nexport function restoreLanggraphFromCurrentMessages(context) {\r\n  try {\r\n    const currentConversation = context.$store.state.currentConversation;\r\n    if (!currentConversation || !currentConversation.messages) {\r\n      return;\r\n    }\r\n\r\n    console.log('🔄 현재 메시지에서 랭그래프 상태 복원 시작');\r\n\r\n    // LangGraph 정보가 있는 메시지 찾기\r\n    const messages = currentConversation.messages;\r\n    \r\n    // 메시지가 비어있으면 랭그래프 숨기기\r\n    if (messages.length === 0) {\r\n      console.warn('⚠️ 현재 대화 메시지가 비어있습니다.');\r\n      context.langgraph.showLanggraph.value = false;\r\n      // 빈 메시지는 추가 질문이 아님\r\n      context.langgraph.isFollowupQuestion.value = false;\r\n      console.log('✅ 빈 메시지 - isFollowupQuestion을 false로 설정');\r\n      return;\r\n    }\r\n    let langgraphMessage = null;\r\n\r\n    for (const message of messages) {\r\n      if (message.q_mode === 'search' || message.keyword || message.db_contents) {\r\n        langgraphMessage = message;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (langgraphMessage) {\r\n      console.log('✅ LangGraph 메시지 발견, 상태 복원:', langgraphMessage.id);\r\n      \r\n      // 랭그래프 UI 표시\r\n      context.langgraph.showLanggraph.value = true;\r\n      context.langgraph.currentStep.value = 4;\r\n      context.langgraph.originalInput.value = langgraphMessage.question || '';\r\n      \r\n      // LangGraph 정보가 있으면 추가 질문으로 설정\r\n      context.langgraph.isFollowupQuestion.value = true;\r\n      // console.log('✅ LangGraph 정보 존재 - isFollowupQuestion을 true로 설정');\r\n\r\n      // 키워드 복원 (전체 상태 또는 키워드 배열)\r\n      if (langgraphMessage.keyword) {\r\n        try {\r\n          const keywordData = typeof langgraphMessage.keyword === 'string' \r\n            ? JSON.parse(langgraphMessage.keyword) \r\n            : langgraphMessage.keyword;\r\n          \r\n          // 전체 langGraphState 객체인 경우\r\n          if (keywordData && typeof keywordData === 'object' && !Array.isArray(keywordData)) {\r\n            // 전체 상태 복원\r\n            if (keywordData.originalInput) {\r\n              context.langgraph.originalInput.value = keywordData.originalInput;\r\n            }\r\n            if (keywordData.augmentedKeywords) {\r\n              context.langgraph.augmentedKeywords.value = keywordData.augmentedKeywords;\r\n            }\r\n            if (keywordData.searchResults) {\r\n              context.langgraph.searchResults.value = keywordData.searchResults;\r\n            }\r\n            if (keywordData.finalAnswer) {\r\n              context.langgraph.finalAnswer.value = keywordData.finalAnswer;\r\n            }\r\n            if (keywordData.analysisImageUrl) {\r\n              context.langgraph.analysisImageUrl.value = keywordData.analysisImageUrl;\r\n            }\r\n            if (keywordData.extractedKeywords) {\r\n              context.langgraph.extractedKeywords.value = keywordData.extractedKeywords;\r\n            }\r\n            if (keywordData.extractedDbSearchTitle) {\r\n              context.langgraph.extractedDbSearchTitle.value = keywordData.extractedDbSearchTitle;\r\n              context.langgraph.searchedDocuments.value = keywordData.extractedDbSearchTitle;\r\n            }\r\n          } else if (Array.isArray(keywordData)) {\r\n            // 키워드 배열인 경우\r\n            context.langgraph.augmentedKeywords.value = keywordData.map((keyword, index) => ({\r\n              id: `keyword-${index}`,\r\n              text: keyword,\r\n              category: 'augmented'\r\n            }));\r\n            context.langgraph.extractedKeywords.value = keywordData;\r\n          }\r\n        } catch (error) {\r\n          console.warn('키워드 파싱 실패:', error);\r\n        }\r\n      }\r\n\r\n      // 검색 결과 복원 (db_contents가 별도로 있는 경우)\r\n      if (langgraphMessage.db_contents) {\r\n        try {\r\n          const dbContents = JSON.parse(langgraphMessage.db_contents);\r\n          if (Array.isArray(dbContents)) {\r\n            context.langgraph.searchResults.value = dbContents;\r\n            context.langgraph.searchedDocuments.value = dbContents.map(doc => doc.document_name || '제목 없음');\r\n            context.langgraph.extractedDbSearchTitle.value = context.langgraph.searchedDocuments.value;\r\n          }\r\n        } catch (error) {\r\n          console.warn('검색 결과 파싱 실패:', error);\r\n        }\r\n      }\r\n\r\n      // 답변 복원 (user 메시지의 ans 필드에서 복원)\r\n      if (langgraphMessage.ans && langgraphMessage.ans.trim() !== '') {\r\n        context.langgraph.finalAnswer.value = langgraphMessage.ans;\r\n        console.log('✅ 답변 복원 완료 (user 메시지 ans 필드에서):', {\r\n          messageId: langgraphMessage.id,\r\n          ansLength: langgraphMessage.ans.length\r\n        });\r\n      } else {\r\n        console.warn('⚠️ user 메시지에 ans가 없습니다:', {\r\n          messageId: langgraphMessage.id,\r\n          hasAns: !!langgraphMessage.ans,\r\n          ansValue: langgraphMessage.ans\r\n        });\r\n      }\r\n\r\n      // 이미지 URL 복원 (keyword에서 복원되지 않은 경우)\r\n      if (langgraphMessage.image && !context.langgraph.analysisImageUrl.value) {\r\n        context.langgraph.analysisImageUrl.value = langgraphMessage.image;\r\n      }\r\n\r\n      console.log('✅ 랭그래프 상태 복원 완료');\r\n    } else {\r\n      // LangGraph 정보가 없으면 추가 질문이 아님\r\n      context.langgraph.isFollowupQuestion.value = false;\r\n      console.log('✅ LangGraph 정보 없음 - isFollowupQuestion을 false로 설정');\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('❌ 랭그래프 상태 복원 실패:', error);\r\n  }\r\n}\r\n\r\n// 메시지에서 랭그래프 상태 복원 (assistant 메시지 사용하지 않으므로 제거됨)\r\n\r\nexport default {\r\n  restoreLanggraphFromConversation,\r\n  findAndRestoreRelatedLangGraph,\r\n  restoreCurrentConversation,\r\n  restoreLanggraphFromCurrentMessages\r\n};\r\n","/**\r\n * LangGraph 메시지 저장 유틸리티\r\n */\r\n\r\n/**\r\n * LangGraph 결과를 백엔드에 저장\r\n * @param {Object} result - LangGraph 실행 결과\r\n * @param {Object} context - Vue 컴포넌트 컨텍스트\r\n */\r\n\r\nfunction extractImageUrl(source) {\r\n  if (!source) {\r\n    return '';\r\n  }\r\n\r\n  if (Array.isArray(source)) {\r\n    for (const candidate of source) {\r\n      if (typeof candidate === 'string' && candidate.trim()) {\r\n        return candidate.trim();\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  if (typeof source === 'string') {\r\n    return source.trim();\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\n\r\nexport async function saveLangGraphMessage(result, context) {\r\n  try {\r\n    if (!context.$store.state.currentConversation) {\r\n      console.error('⚠️ LangGraph 메시지 저장 실패: 현재 대화가 없습니다.');\r\n      return;\r\n    }\r\n    \r\n    const conversationId = context.$store.state.currentConversation.id;\r\n    const question = context.langgraph.originalInput.value || 'LangGraph 분석 요청';\r\n    \r\n    // console.log('💾 [SAVE] originalInput:', context.langgraph.originalInput.value);\r\n    // console.log('💾 [SAVE] 저장할 질문:', question);\r\n    \r\n    // SSE 결과 구조에 맞게 답변 추출\r\n    let answer = '분석 결과가 없습니다.';\r\n    if (result.result && result.result.response) {\r\n      answer = result.result.response.answer || result.result.response.final_answer || '분석 결과가 없습니다.';\r\n    } else if (result.response) {\r\n      answer = result.response.answer || result.response.final_answer || '분석 결과가 없습니다.';\r\n    } else if (context.langgraph.finalAnswer.value) {\r\n      answer = context.langgraph.finalAnswer.value;\r\n    }\r\n    \r\n    // 키워드와 문서 제목 데이터 준비\r\n    let keywordData = context.langgraph.extractedKeywords.value;\r\n    let dbSearchTitleData = context.langgraph.extractedDbSearchTitle.value;\r\n    \r\n    // SSE 결과에서 키워드 추출\r\n    if (!keywordData && result.result && result.result.keyword) {\r\n      keywordData = result.result.keyword;\r\n    }\r\n    \r\n    // SSE 결과에서 문서 제목 추출\r\n    if (!dbSearchTitleData && result.result && result.result.candidates_total) {\r\n      dbSearchTitleData = result.result.candidates_total.map(item => \r\n        item?.res_payload?.document_name || '제목 없음'\r\n      );\r\n    }\r\n    \r\n    // 이미지 URL 추출 (여러 소스에서 시도)\r\n    let imageUrl = context.langgraph.analysisImageUrl.value || '';\r\n    if (typeof imageUrl === 'string') {\r\n      imageUrl = imageUrl.trim();\r\n    } else {\r\n      imageUrl = '';\r\n    }\r\n    if (!imageUrl && result.result && result.result.response && result.result.response.analysis_image_url) {\r\n      imageUrl = result.result.response.analysis_image_url;\r\n    } else if (!imageUrl && result.result && result.result.analysis_image_url) {\r\n      imageUrl = result.result.analysis_image_url;\r\n    }\r\n\r\n    if (typeof imageUrl === 'string') {\r\n      imageUrl = imageUrl.trim();\r\n    }\r\n\r\n    if (imageUrl) {\r\n      console.log('🖼️ [SAVE] 백엔드 제공 이미지 URL 사용:', imageUrl);\r\n    }\r\n    \r\n    // LangGraph 전체 상태를 JSON으로 저장 (복원을 위해)\r\n    const langGraphState = {\r\n      originalInput: context.langgraph.originalInput.value,\r\n      augmentedKeywords: context.langgraph.augmentedKeywords.value,\r\n      searchResults: context.langgraph.searchResults.value.slice(0, 5),\r\n      finalAnswer: answer,\r\n      analysisImageUrl: imageUrl,  // 추출된 이미지 URL 사용\r\n      currentStep: context.langgraph.currentStep.value,\r\n      extractedKeywords: keywordData,\r\n      extractedDbSearchTitle: dbSearchTitleData\r\n    };\r\n    \r\n    // db_contents 생성 (llm_bu.py 참고)\r\n    const db_contents_list = [];\r\n    const searchResults = context.langgraph.searchResults.value || [];\r\n    \r\n    if (searchResults && searchResults.length > 0) {\r\n      for (let idx = 0; idx < Math.min(5, searchResults.length); idx++) {\r\n        const candidate = searchResults[idx];\r\n        const payload = candidate.res_payload || {};\r\n        const vector_data = payload.vector || {};\r\n        \r\n        // image_url 처리 - Qdrant 구조에 맞게\r\n        let image_url_value = '';\r\n        const payloadImage = extractImageUrl(payload.image_url);\r\n        const vectorImage = extractImageUrl(vector_data.image_url);\r\n        image_url_value = payloadImage || vectorImage;\r\n\r\n        if (image_url_value) {\r\n          console.log('🖼️ [SAVE] 문서 이미지 추출:', {\r\n            rank: idx + 1,\r\n            document: payload.document_name || candidate.title || '',\r\n            image: image_url_value\r\n          });\r\n        }\r\n\r\n        const db_content = {\r\n          rank: idx + 1,\r\n          document_name: payload.document_name || candidate.title || '',\r\n          score: candidate.res_score || candidate.score || 0,\r\n          combined_score: candidate.combined_score || candidate.res_score || candidate.score || 0,\r\n          relevance_score: candidate.res_relevance || 0,\r\n          text: vector_data.text || '',\r\n          summary_purpose: vector_data.summary_purpose || '',\r\n          summary_result: vector_data.summary_result || candidate.summary || '',\r\n          summary_fb: vector_data.summary_fb || '',\r\n          image_url: image_url_value,\r\n          res_id: candidate.res_id || ''\r\n        };\r\n        db_contents_list.push(db_content);\r\n      }\r\n    }\r\n\r\n    if (!imageUrl && db_contents_list.length > 0) {\r\n      imageUrl = db_contents_list[0].image_url || '';\r\n      if (imageUrl) {\r\n        console.log('🖼️ [SAVE] 첫 번째 문서 이미지로 message.image 설정:', imageUrl);\r\n      }\r\n    }\r\n\r\n    \r\n    const db_contents_json = JSON.stringify(db_contents_list);\r\n    \r\n    console.log('📤 [SAVE] 전송 데이터:', {\r\n      question: question,\r\n      q_mode: 'search',\r\n      assistant_response: answer,\r\n      assistant_response_length: answer ? answer.length : 0,\r\n      keyword: langGraphState,\r\n      db_search_title: dbSearchTitleData,\r\n      db_contents: db_contents_list,\r\n      db_contents_length: db_contents_list.length,\r\n      image: imageUrl  // 추출된 이미지 URL 사용\r\n    });\r\n    \r\n    // 메시지 생성 API 호출\r\n    const response = await fetch(`http://localhost:8000/api/conversations/${conversationId}/messages`, {\r\n      method: 'POST',\r\n      headers: { \r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n      },\r\n      body: JSON.stringify({ \r\n        question: question,\r\n        q_mode: 'search',\r\n        assistant_response: answer,\r\n        skip_llm: true,\r\n        keyword: JSON.stringify(langGraphState),\r\n        db_search_title: Array.isArray(dbSearchTitleData) ? JSON.stringify(dbSearchTitleData) : dbSearchTitleData,\r\n        db_contents: db_contents_json,  // db_contents 추가\r\n        image: imageUrl,  // 추출된 이미지 URL 사용\r\n        user_name: context.$store.state.user?.username || '사용자'\r\n      })\r\n    });\r\n    \r\n    if (response.ok) {\r\n      const responseData = await response.json();\r\n      console.log('✅ LangGraph 메시지 저장 응답:', responseData);\r\n      \r\n      // assistant 메시지를 사용하지 않으므로 backend_id 설정 제거됨\r\n      \r\n      // 대화 제목 업데이트 (질문의 첫 50자로)\r\n      if (context.$store.state.currentConversation) {\r\n        const conversationTitle = question.length > 50 ? question.substring(0, 50) + '...' : question;\r\n        \r\n        try {\r\n          const titleUpdateResponse = await fetch(`http://localhost:8000/api/conversations/${conversationId}`, {\r\n            method: 'PUT',\r\n            headers: { \r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n            },\r\n            body: JSON.stringify({ \r\n              title: conversationTitle\r\n            })\r\n          });\r\n          \r\n          if (titleUpdateResponse.ok) {\r\n            // 스토어의 현재 대화 제목도 업데이트\r\n            context.$store.commit('updateConversationTitle', {\r\n              conversationId: conversationId,\r\n              title: conversationTitle\r\n            });\r\n          } else {\r\n            console.warn('⚠️ 대화 제목 업데이트 실패:', titleUpdateResponse.status);\r\n          }\r\n        } catch (titleError) {\r\n          console.warn('⚠️ 대화 제목 업데이트 중 오류:', titleError);\r\n        }\r\n      }\r\n      \r\n      // 대화 목록 새로고침은 sseMessageHandler.js에서 이미 호출하므로 여기서는 생략\r\n      // await context.$store.dispatch('fetchConversations');\r\n      \r\n      return responseData; // 백엔드 응답 데이터 반환\r\n      \r\n    } else {\r\n      console.error('❌ LangGraph 메시지 저장 실패:', response.status, response.statusText);\r\n      const errorText = await response.text();\r\n      console.error('❌ 오류 응답 내용:', errorText);\r\n      throw new Error(`메시지 저장 실패: ${response.status} ${response.statusText}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('LangGraph 메시지 저장 중 오류:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default {\r\n  saveLangGraphMessage\r\n};\r\n\r\n","import { render } from \"./Home.vue?vue&type=template&id=0f9bc9ff\"\nimport script from \"./Home.vue?vue&type=script&lang=js\"\nexport * from \"./Home.vue?vue&type=script&lang=js\"\n\nimport \"./Home.vue?vue&type=style&index=0&id=0f9bc9ff&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","// This file is no longer needed since all functionality has been integrated into the App.vue with a single left sidebar for conversations.\r\n// We're keeping this file empty as a placeholder in case it's referenced elsewhere, but it won't be used in the UI.\r\n\r\n<template>\r\n  <div class=\"redirect-page\">\r\n    <p>This view is no longer used. Redirecting to home...</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ChatHistoryPage',\r\n  mounted() {\r\n    // Redirect to home when this component is loaded\r\n    this.$router.push('/');\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.redirect-page {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  color: var(--light-text);\r\n}\r\n</style> ","import { render } from \"./ChatHistory.vue?vue&type=template&id=6d3a68ba&scoped=true\"\nimport script from \"./ChatHistory.vue?vue&type=script&lang=js\"\nexport * from \"./ChatHistory.vue?vue&type=script&lang=js\"\n\nimport \"./ChatHistory.vue?vue&type=style&index=0&id=6d3a68ba&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-6d3a68ba\"]])\n\nexport default __exports__","import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\nimport { createRouter, createWebHistory } from 'vue-router'\r\nimport App from './App.vue'\r\nimport Home from './views/Home.vue'\r\nimport ChatHistory from './views/ChatHistory.vue'\r\n\r\n// Vue 디버깅 설정\r\nif (process.env.NODE_ENV === 'development') {\r\n  // Vue DevTools 활성화 (안전한 방식)\r\n  try {\r\n    // 기존 DevTools 훅이 있으면 활성화만 시도\r\n    if (window.__VUE_DEVTOOLS_GLOBAL_HOOK__ && typeof window.__VUE_DEVTOOLS_GLOBAL_HOOK__ === 'object') {\r\n      window.__VUE_DEVTOOLS_GLOBAL_HOOK__.enabled = true;\r\n    }\r\n  } catch (error) {\r\n    // DevTools 설정 실패는 무시 (개발 도구이므로 필수가 아님)\r\n    console.warn('[Vue Debug] DevTools 설정 실패 (무시됨):', error.message);\r\n  }\r\n  \r\n  // Vue 개발 모드 활성화\r\n  // console.log('[Vue Debug] 개발 모드 활성화됨');\r\n}\r\n\r\n// OAuth 토큰 처리 함수\r\nasync function processOAuthToken(idToken, state) {\r\n  try {\r\n    // OAuth 처리 시작을 즉시 알림\r\n    // // console.log('[AUTH] processOAuthToken 시작 - oauth_processing 플래그 설정');\r\n    sessionStorage.setItem('oauth_processing', 'true');\r\n    \r\n    // 처리 시작 시 기존 플래그들 정리\r\n    sessionStorage.removeItem('sso_processed');\r\n    \r\n    // 요청 본문 구성\r\n    const requestBody = `id_token=${encodeURIComponent(idToken)}&state=${encodeURIComponent(state)}`;\r\n    \r\n    // 백엔드의 acs 엔드포인트로 id_token 전송\r\n    const response = await fetch('http://localhost:8000/api/auth/acs', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: requestBody,\r\n      credentials: 'include' // 쿠키 포함\r\n    });\r\n    \r\n    if (response.ok) {\r\n      // 응답에서 사용자 정보 추출 시도\r\n      try {\r\n        const responseText = await response.text();\r\n        \r\n        // URL에서 OAuth 파라미터 제거\r\n        window.history.replaceState({}, document.title, window.location.pathname);\r\n        \r\n        // 응답에서 사용자 정보를 직접 추출하여 store에 설정\r\n        try {\r\n          const responseData = JSON.parse(responseText);\r\n          \r\n          if (responseData.success && responseData.user) {\r\n            // 백엔드 JWT 토큰만 사용\r\n            if (responseData.access_token) {\r\n              // // console.log('responseData : ',responseData)\r\n              store.commit('setAuth', {\r\n                token: responseData.access_token,  // 백엔드 JWT 토큰만\r\n                user: {\r\n                  username: responseData.user.username,\r\n                  email: responseData.user.mail,\r\n                  loginid: responseData.user.loginid,\r\n                  deptname: responseData.user.deptname,\r\n                  id: responseData.user.userid\r\n                }\r\n              });\r\n            } else {\r\n              // console.error('[AUTH] 백엔드에서 access_token을 받지 못했습니다.');\r\n              throw new Error('백엔드 인증 실패');\r\n            }\r\n            \r\n            // localStorage에 JWT 토큰 저장\r\n            localStorage.setItem('access_token', responseData.access_token);\r\n            localStorage.setItem('user_info', JSON.stringify(responseData.user));\r\n            \r\n            // // console.log('[AUTH] 백엔드 JWT 토큰 설정 완료 (processOAuthToken):', {\r\n            //   token: responseData.access_token.substring(0, 20) + '...',\r\n            //   user: responseData.user.username\r\n            // });\r\n            \r\n            // 인증 성공 후 대화 목록 가져오기\r\n            // console.log('[AUTH] 대화 목록 가져오기 시작');\r\n            try {\r\n              await store.dispatch('fetchConversations');\r\n              // console.log('[AUTH] 대화 목록 가져오기 완료');\r\n            } catch (error) {\r\n              console.error('[AUTH] 대화 목록 가져오기 실패:', error);\r\n            }\r\n            \r\n            // 인증 성공 표시 및 Vue Router로 이동 (window.location 사용 금지)\r\n            hasProcessedOAuth = true;\r\n            isProcessingOAuth = false;\r\n            \r\n            // OAuth 처리 완료 플래그 설정\r\n            sessionStorage.setItem('sso_processed', 'true');\r\n            sessionStorage.removeItem('oauth_processing');\r\n            \r\n            // // console.log('[AUTH] OAuth 처리 완료, Vue Router로 이동');\r\n            \r\n            // Vue Router가 준비된 후 이동 (지연 증가)\r\n            setTimeout(() => {\r\n              if (router && router.push) {\r\n                // // console.log('[AUTH] 홈페이지로 이동 중...');\r\n                router.push('/').then(() => {\r\n                  // // console.log('[AUTH] 홈페이지 이동 완료');\r\n                  \r\n                  // 추가 대기 후 플래그 정리 (중복 리다이렉트 방지)\r\n                  setTimeout(() => {\r\n                    sessionStorage.setItem('sso_processed', 'true');\r\n                    sessionStorage.removeItem('oauth_processing');\r\n                    // // console.log('[AUTH] OAuth 플래그 최종 정리 완료');\r\n                  }, 500);\r\n                  \r\n                }).catch(error => {\r\n                  console.error('[AUTH] 홈페이지 이동 실패:', error);\r\n                  // 라우터 이동 실패 시 직접 URL 변경\r\n                  try {\r\n                    window.location.href = '/';\r\n                  } catch (e) {\r\n                    console.error('[AUTH] URL 변경도 실패:', e);\r\n                  }\r\n                });\r\n              }\r\n            }, 200); // 지연 시간 증가\r\n            return;\r\n          }\r\n        } catch (parseError) {\r\n          // 응답 파싱 실패 시 localStorage에서 시도\r\n          setTimeout(() => {\r\n            const accessToken = getStoredToken();\r\n            const userInfo = getStoredUserInfo();\r\n            \r\n            if (accessToken && userInfo) {\r\n              try {\r\n                // store에 인증 정보 설정 (통일된 방식)\r\n                store.commit('setAuth', {\r\n                  token: accessToken,\r\n                  user: userInfo\r\n\r\n                });\r\n                \r\n                // 인증 성공 후 대화 목록 가져오기\r\n                // // console.log('[AUTH] localStorage 복원 후 대화 목록 가져오기');\r\n                store.dispatch('fetchConversations').then(() => {\r\n                  // console.log('[AUTH] localStorage 복원 후 대화 목록 가져오기 완료');\r\n                }).catch(error => {\r\n                  console.error('[AUTH] localStorage 복원 후 대화 목록 가져오기 실패:', error);\r\n                });\r\n                \r\n                // 인증 성공 후 홈페이지로 이동\r\n                window.location.href = '/';\r\n                return;\r\n              } catch (error) {\r\n                window.location.reload();\r\n              }\r\n            } else {\r\n              window.location.reload();\r\n            }\r\n          }, 100); // 100ms 지연 후 쿠키 읽기 시도\r\n        }\r\n        \r\n      } catch (error) {\r\n        // 오류 발생 시 페이지 새로고침\r\n        window.location.reload();\r\n      }\r\n    } else {\r\n      throw new Error(`OAuth processing failed: ${response.status}`);\r\n    }\r\n  } catch (error) {\r\n    // 오류 발생 시 URL에서 OAuth 파라미터 제거\r\n    window.history.replaceState({}, document.title, window.location.pathname);\r\n    \r\n    // 오류 발생 시 모든 OAuth 플래그 정리\r\n    sessionStorage.removeItem('oauth_processing');\r\n    sessionStorage.removeItem('sso_processed');\r\n    isProcessingOAuth = false;\r\n    hasProcessedOAuth = false;\r\n    \r\n    console.error('[AUTH] processOAuthToken 오류:', error);\r\n    \r\n    // 오류 발생 시 samsung SSO로 리다이렉트\r\n    setTimeout(() => {\r\n      try {\r\n        window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n      } catch (redirectError) {\r\n        console.error('[AUTH] SSO 리다이렉트 실패:', redirectError);\r\n      }\r\n    }, 1000);\r\n  }\r\n}\r\n\r\n// URL에서 OAuth 파라미터 확인 및 처리\r\nfunction checkAndProcessOAuthParams() {\r\n  const hash = window.location.hash;\r\n  if (hash && hash.includes('id_token=')) {\r\n    const urlParams = new URLSearchParams(hash.substring(1));\r\n    const idToken = urlParams.get('id_token');\r\n    const state = urlParams.get('state');\r\n    \r\n    if (idToken && state) {\r\n      processOAuthToken(idToken, state);\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  // URL 쿼리 파라미터에서 인증 성공 확인 (백엔드에서 리디렉트된 경우)\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const authSuccess = urlParams.get('auth_success');\r\n  const user = urlParams.get('user');\r\n  \r\n  if (authSuccess === 'true' && user) {\r\n    // URL에서 OAuth 파라미터 제거\r\n    window.history.replaceState({}, document.title, window.location.pathname);\r\n    \r\n    // localStorage에서 토큰을 읽어와서 store에 설정\r\n    const accessToken = getStoredToken();\r\n    const userInfo = getStoredUserInfo();\r\n    \r\n    if (accessToken && userInfo) {\r\n      try {\r\n        // // console.log('userData2 : ',userData)\r\n        // store에 인증 정보 설정 (통일된 방식)\r\n        store.commit('setAuth', {\r\n          token: accessToken,\r\n          user: userInfo\r\n\r\n        });\r\n      } catch (error) {\r\n        // 에러 처리\r\n        console.error('[AUTH] SSO 콜백 사용자 정보 설정 실패:', error);\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n\r\n\r\n// localStorage에서 토큰과 사용자 정보를 읽는 함수\r\nfunction getStoredToken() {\r\n    return localStorage.getItem('access_token') || localStorage.getItem('auth_token');\r\n}\r\n\r\nfunction parseUserInfo(rawUser) {\r\n  if (!rawUser) {\r\n    return null;\r\n  }\r\n\r\n  if (typeof rawUser === 'object') {\r\n    return rawUser;\r\n  }\r\n\r\n  try {\r\n    return JSON.parse(rawUser);\r\n  } catch (jsonError) {\r\n    // 쿼리 문자열 형태(username=value&mail=value)를 파싱\r\n    const parsedUser = {};\r\n    const params = rawUser.split('&');\r\n\r\n    for (const param of params) {\r\n      if (param.includes('=')) {\r\n        const [key, value] = param.split('=', 2);\r\n        parsedUser[key] = decodeURIComponent(value || '');\r\n      }\r\n    }\r\n\r\n    return Object.keys(parsedUser).length > 0 ? parsedUser : null;\r\n  }\r\n}\r\n\r\nfunction normalizeUserData(user) {\r\n  const parsedUser = parseUserInfo(user);\r\n\r\n  if (!parsedUser) {\r\n    return null;\r\n  }\r\n\r\n  const normalizedId = parsedUser.userid || parsedUser.id || parsedUser.user_id || parsedUser.sub || parsedUser.loginid || null;\r\n  if (!normalizedId) {\r\n    console.error('[AUTH] 사용자 ID를 확인할 수 없습니다.');\r\n    return null;\r\n  }\r\n\r\n  const normalizedEmail = parsedUser.mail || parsedUser.email || '';\r\n  const normalizedUsername = parsedUser.username || parsedUser.name || parsedUser.loginid ||\r\n    parsedUser.loginId || (normalizedEmail ? normalizedEmail.split('@')[0] : `user-${normalizedId}`);\r\n  const normalizedLoginId = parsedUser.loginid || parsedUser.loginId || normalizedId;\r\n  const normalizedDept = parsedUser.deptname || parsedUser.department || parsedUser.dept || '';\r\n\r\n  return {\r\n    ...parsedUser,\r\n    username: normalizedUsername,\r\n    mail: parsedUser.mail || normalizedEmail,\r\n    email: normalizedEmail,\r\n    loginid: normalizedLoginId,\r\n    deptname: normalizedDept,\r\n    id: normalizedId,\r\n    userid: normalizedId\r\n  };\r\n}\r\n\r\nfunction getStoredUserInfo() {\r\n  const storedUser = localStorage.getItem('user_info') || localStorage.getItem('user');\r\n  return normalizeUserData(storedUser);\r\n}\r\n\r\nconst initialToken = getStoredToken() || '';\r\nconst initialUser = getStoredUserInfo();\r\n\r\n// localStorage에서 인증 정보를 가져와서 store에 설정\r\nfunction initializeAuthFromStorage() {\r\n  const accessToken = getStoredToken();\r\n  const userInfo = getStoredUserInfo();\r\n\r\n  if (accessToken && userInfo) {\r\n    try {\r\n      if (typeof store !== 'undefined' && store.commit) {\r\n        store.commit('setAuth', {\r\n          token: accessToken,\r\n          user: userInfo\r\n        });\r\n\r\n        // 인증 상태 확인을 위한 API 호출\r\n        fetch('http://localhost:8000/api/auth/me', {\r\n          method: 'GET',\r\n          headers: { \r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n          },\r\n          credentials: 'include'\r\n        })\r\n        .then(response => {\r\n          if (response.ok) {\r\n            // console.log('Token validation successful');\r\n          } else {\r\n            // console.log('Token validation failed:', response.status, response.statusText);\r\n            localStorage.removeItem('access_token');\r\n            localStorage.removeItem('user_info');\r\n            localStorage.removeItem('auth_token');\r\n            localStorage.removeItem('user');\r\n            if (typeof store !== 'undefined' && store.commit) {\r\n              store.commit('clearAuth');\r\n            }\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Token validation error:', error);\r\n          \r\n          // 네트워크 오류인지 확인\r\n          if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n            console.error('[MAIN] 네트워크 오류 - 백엔드 서버 연결 실패');\r\n            // 네트워크 오류 시에는 인증 상태를 유지\r\n            return;\r\n          }\r\n          \r\n          if (typeof store !== 'undefined' && store.commit) {\r\n            store.commit('clearAuth');\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error restoring auth from storage:', error);\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('user_info');\r\n      localStorage.removeItem('auth_token');\r\n      localStorage.removeItem('user');\r\n      if (typeof store !== 'undefined' && store.commit) {\r\n        store.commit('clearAuth');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Create Vuex store\r\nconst store = createStore({\r\n  state() {\r\n    return {\r\n      conversations: [],\r\n      currentConversation: null,\r\n      feedbackUpdateTrigger: 0,\r\n      llamaApiKey: localStorage.getItem('llama_api_key') || '',\r\n      llamaApiBase: localStorage.getItem('llama_api_base') || '',\r\n      llamaApiEndpoint: localStorage.getItem('llama_api_endpoint') || '/llama4/1/llama/aiserving/llama-4/maverick/v1/completions',\r\n      llamaApiSet: !!localStorage.getItem('llama_api_key'),\r\n      llamaApiError: null,\r\n      token: initialToken,\r\n      user: initialUser,\r\n      isAuthenticated: !!(initialToken && initialUser),\r\n      isStreaming: false,\r\n      streamingMessage: '',\r\n      shouldScrollToBottom: false,\r\n      conversationRestored: false, // 대화 복원 상태\r\n      loginNewConversation: false // 로그인 후 새 대화창 플래그\r\n    }\r\n  },\r\n  mutations: {\r\n    setConversations(state, conversations) {\r\n      state.conversations = Array.isArray(conversations) ? conversations : [];\r\n    },\r\n    addConversation(state, conversation) {\r\n      if (!Array.isArray(state.conversations)) {\r\n        state.conversations = [];\r\n      }\r\n      state.conversations.unshift(conversation);\r\n    },\r\n    setNewConversationTrigger(state) {\r\n      state._newConversationTrigger = Date.now();\r\n    },\r\n    removeConversation(state, conversationId) {\r\n      if (!Array.isArray(state.conversations)) {\r\n        state.conversations = [];\r\n        return;\r\n      }\r\n      state.conversations = state.conversations.filter(c => c.id !== conversationId);\r\n      if (state.currentConversation && state.currentConversation.id === conversationId) {\r\n        state.currentConversation = state.conversations.length > 0 ? state.conversations[0] : null;\r\n      }\r\n    },\r\n\r\n    updateConversationTitle(state, { conversationId, title }) {\r\n      // 대화 목록에서 제목 업데이트\r\n      if (Array.isArray(state.conversations)) {\r\n        const conversation = state.conversations.find(c => c.id === conversationId);\r\n        if (conversation) {\r\n          conversation.title = title;\r\n        }\r\n      }\r\n      \r\n      // 현재 대화의 제목도 업데이트\r\n      if (state.currentConversation && state.currentConversation.id === conversationId) {\r\n        state.currentConversation.title = title;\r\n      }\r\n    },\r\n\r\n    setCurrentConversation(state, conversation) {\r\n      // // console.log('setCurrentConversation 호출:', {\r\n      //   newConversationId: conversation?.id,\r\n      //   currentConversationId: state.currentConversation?.id,\r\n      //   isSame: state.currentConversation && conversation && \r\n      //           state.currentConversation.id === conversation.id\r\n      // });\r\n      \r\n      // 항상 대화를 설정 (동일한 대화도 다시 설정하여 랭그래프 복원 트리거)\r\n      state.currentConversation = conversation;\r\n      \r\n      // sessionStorage에 현재 대화 ID 저장 (새로고침 시 복원용)\r\n      if (conversation && conversation.id) {\r\n        sessionStorage.setItem('currentConversationId', conversation.id.toString());\r\n      } else {\r\n        sessionStorage.removeItem('currentConversationId');\r\n      }\r\n      \r\n      // 강제 반응성 트리거\r\n      state._conversationUpdateTrigger = Date.now();\r\n    },\r\n    addMessage(state, { conversationId, message }) {\r\n      if (!Array.isArray(state.conversations)) {\r\n        return;\r\n      }\r\n      const conversation = state.conversations.find(c => c.id === conversationId);\r\n      if (conversation) {\r\n        if (!Array.isArray(conversation.messages)) {\r\n          conversation.messages = [];\r\n        }\r\n        conversation.messages.push(message);\r\n      }\r\n    },\r\n    addMessageToCurrentConversation(state, message) {\r\n      if (state.currentConversation) {\r\n        if (!Array.isArray(state.currentConversation.messages)) {\r\n          state.currentConversation.messages = [];\r\n        }\r\n        state.currentConversation.messages.push(message);\r\n      }\r\n    },\r\n    updateMessageAnswer(state, { messageId, answer }) {\r\n      console.log('🔍 [DEBUG] updateMessageAnswer mutation 호출:', { messageId, answerLength: answer?.length });\r\n      if (state.currentConversation && Array.isArray(state.currentConversation.messages)) {\r\n        const message = state.currentConversation.messages.find(m => m.id === messageId || m.backend_id === messageId);\r\n        if (message) {\r\n          console.log('🔍 [DEBUG] 메시지 찾음, ans 필드 업데이트:', message.id);\r\n          message.ans = answer;\r\n          console.log('🔍 [DEBUG] 메시지 업데이트 완료');\r\n        } else {\r\n          console.warn('⚠️ updateMessageAnswer: 메시지를 찾을 수 없음:', messageId);\r\n        }\r\n      } else {\r\n        console.warn('⚠️ updateMessageAnswer: currentConversation 또는 messages가 없음');\r\n      }\r\n    },\r\n    updateMessageId(state, { tempId, realId, additionalData }) {\r\n      if (state.currentConversation && Array.isArray(state.currentConversation.messages)) {\r\n        const message = state.currentConversation.messages.find(m => m.id === tempId);\r\n        if (message) {\r\n          // ID만 조용히 업데이트 (깜빡임 방지)\r\n          message.id = realId;\r\n          // 추가 데이터가 있으면 병합\r\n          if (additionalData) {\r\n            Object.assign(message, additionalData);\r\n          }\r\n          console.log(`✅ 메시지 ID 업데이트 완료: ${tempId} → ${realId}`);\r\n        } else {\r\n          console.warn(`⚠️ 업데이트할 메시지를 찾을 수 없음: ${tempId}`);\r\n        }\r\n      }\r\n    },\r\n    updateMessageContent(state, { messageId, content, image }) {\r\n      if (state.currentConversation && Array.isArray(state.currentConversation.messages)) {\r\n        const message = state.currentConversation.messages.find(m => m.id === messageId);\r\n        if (message) {\r\n          message.ans = content;\r\n          if (image) {\r\n            message.image = image;\r\n          }\r\n          console.log(`✅ 메시지 내용 업데이트 완료: ${messageId}`);\r\n        } else {\r\n          console.warn(`⚠️ 업데이트할 메시지를 찾을 수 없음: ${messageId}`);\r\n        }\r\n      }\r\n    },\r\n    updateFeedback(state, { conversationId, messageId, feedback }) {\r\n      // 현재 대화 찾기\r\n      const conversation = state.conversations.find(c => c.id === conversationId);\r\n      if (!conversation) return;\r\n      \r\n      // 해당 메시지 찾기\r\n      const messageIndex = conversation.messages.findIndex(m => m.id === messageId);\r\n      if (messageIndex === -1) return;\r\n      \r\n      // 메시지 객체를 새로 생성하여 교체 (Vue 반응성 보장)\r\n      const updatedMessage = {\r\n        ...conversation.messages[messageIndex],\r\n        feedback: feedback\r\n      };\r\n      \r\n      // 배열의 해당 인덱스를 새 객체로 교체\r\n      conversation.messages.splice(messageIndex, 1, updatedMessage);\r\n      \r\n      // currentConversation이 같은 대화를 참조하고 있다면 동기화\r\n      if (state.currentConversation && state.currentConversation.id === conversationId) {\r\n        const currentMessageIndex = state.currentConversation.messages.findIndex(m => m.id === messageId);\r\n        if (currentMessageIndex !== -1) {\r\n          state.currentConversation.messages.splice(currentMessageIndex, 1, updatedMessage);\r\n        }\r\n      }\r\n      \r\n      // 강제 업데이트를 위한 트리거 증가\r\n      state.feedbackUpdateTrigger = (state.feedbackUpdateTrigger || 0) + 1;\r\n      \r\n      console.log('✅ 피드백 상태 업데이트:', {\r\n        messageId,\r\n        feedback,\r\n        trigger: state.feedbackUpdateTrigger,\r\n        currentConversationId: state.currentConversation?.id,\r\n        conversationId\r\n      });\r\n    },\r\n    setApiKeyError(state, error) {\r\n      state.apiKeyError = error;\r\n    },\r\n    setAuth(state, { token, user }) {\r\n      // // console.log('[AUTH] setAuth called with token:', token ? token.substring(0, 20) + '...' : 'null');\r\n      \r\n      // 토큰 형식 확인 (JWT는 3개의 점으로 구분된 부분으로 구성)\r\n      if (token && token.split('.').length === 3) {\r\n        try {\r\n          const header = JSON.parse(atob(token.split('.')[0]));\r\n          // // console.log('[AUTH] Token header:', header);\r\n          // // console.log('[AUTH] Token algorithm:', header.alg);\r\n          \r\n          // HS256 알고리즘인지 확인 (백엔드 JWT 토큰만 허용)\r\n          if (header.alg === 'HS256') {\r\n            // // console.log('[AUTH] 백엔드 JWT 토큰 확인됨');\r\n          } else {\r\n            console.error('[AUTH] 오류: HS256이 아닌 토큰은 허용되지 않음:', header.alg);\r\n            return;\r\n          }\r\n        } catch (e) {\r\n          // // console.log('[AUTH] Error parsing token header:', e);\r\n        }\r\n      }\r\n      \r\n      // HS256 토큰만 설정 (기타 토큰 차단)\r\n      if (token && token.split('.').length === 3) {\r\n        try {\r\n          const header = JSON.parse(atob(token.split('.')[0]));\r\n          if (header.alg !== 'HS256') {\r\n            console.error('[AUTH] 토큰 설정이 차단되었습니다. 백엔드 JWT 토큰만 사용 가능합니다.');\r\n            return; // 토큰 설정 중단\r\n          }\r\n        } catch (e) {\r\n          // console.error('[AUTH] 토큰 헤더 파싱 실패:', e);\r\n          // console.error('[AUTH] 잘못된 토큰 형식입니다.');\r\n          return; // 토큰 설정 중단\r\n        }\r\n      } else if (token && token !== 'oauth_token') {\r\n        // JWT가 아닌 토큰도 차단 (oauth_token 제외)\r\n        // console.error('[AUTH] JWT 형식이 아닌 토큰 차단됨:', token.substring(0, 20) + '...');\r\n        return; // 토큰 설정 중단\r\n      }\r\n\r\n      const normalizedUser = normalizeUserData(user);\r\n      if (!normalizedUser) {\r\n        console.error('[AUTH] 유효하지 않은 사용자 정보로 인해 인증 상태를 설정할 수 없습니다.');\r\n        return;\r\n      }\r\n\r\n      // 사용자가 변경되었는지 확인\r\n      const previousUserId = state.user ? state.user.id || state.user.loginid : null;\r\n      const newUserId = normalizedUser ? normalizedUser.id || normalizedUser.loginid : null;\r\n      const userChanged = previousUserId && newUserId && previousUserId !== newUserId;\r\n      \r\n      if (userChanged) {\r\n        // console.log('[STORE] 사용자 변경 감지 - 대화 목록 초기화');\r\n        // console.log('[STORE] 이전 사용자:', previousUserId, '새 사용자:', newUserId);\r\n        // 사용자가 변경된 경우 대화 목록 초기화\r\n        state.conversations = [];\r\n        state.currentConversation = null;\r\n      }\r\n      \r\n      state.token = token;\r\n      state.user = normalizedUser;\r\n      state.isAuthenticated = !!token;\r\n      \r\n      // localStorage에 토큰 저장 (API 요청용)\r\n      localStorage.setItem('access_token', token);\r\n      localStorage.setItem('user_info', JSON.stringify(normalizedUser));\r\n      \r\n      // 기존 auth_token과 user도 저장 (호환성 유지)\r\n      localStorage.setItem('auth_token', token);\r\n      localStorage.setItem('user', JSON.stringify(normalizedUser));\r\n      \r\n    },\r\n    setUser(state, user) {\r\n      state.user = user;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('user_info', JSON.stringify(user));\r\n      \r\n      // 사용자 정보만 업데이트 (토큰은 setAuth에서 관리)\r\n    },\r\n    clearAuth(state) {\r\n      state.token = '';\r\n      state.user = null;\r\n      state.isAuthenticated = false;\r\n      state.loginNewConversation = false; // 인증 정리 시 플래그 리셋\r\n      localStorage.removeItem('auth_token');\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('user_info');\r\n      \r\n      // 쿠키도 정리 (기존 코드와의 호환성을 위해)\r\n      document.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\r\n      document.cookie = 'access_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\r\n      document.cookie = 'user_info=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\r\n    },\r\n    setIsStreaming(state, isStreaming) {\r\n      state.isStreaming = isStreaming;\r\n    },\r\n    updateStreamingMessage(state, content) {\r\n      state.streamingMessage = content;\r\n    },\r\n    clearStreamingMessage(state) {\r\n      state.streamingMessage = '';\r\n    },\r\n    addStreamingMessageToConversation(state, { conversationId, message }) {\r\n      const conversation = state.conversations.find(c => c.id === conversationId);\r\n      if (conversation) {\r\n        conversation.messages.push(message);\r\n      }\r\n      state.streamingMessage = '';\r\n      state.isStreaming = false;\r\n    },\r\n    setShouldScrollToBottom(state, value) {\r\n      state.shouldScrollToBottom = value;\r\n    },\r\n    setConversationRestored(state, value) {\r\n      state.conversationRestored = value;\r\n    },\r\n    setLoginNewConversation(state, value) {\r\n      state.loginNewConversation = value;\r\n    },\r\n  },\r\n  actions: {\r\n    // 인증 에러 공통 처리 함수\r\n    handleAuthError({ commit }) {\r\n      commit('clearAuth');\r\n      commit('setConversations', []);\r\n      commit('setCurrentConversation', null);\r\n      \r\n      // // console.log('인증 오류 발생 - 상태 정리만 수행');\r\n    },\r\n    \r\n    async register(context, userData) {\r\n      const response = await fetch('http://localhost:8000/api/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(userData)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Registration failed');\r\n      }\r\n      \r\n      return await this.dispatch('login', {\r\n        username: userData.username,\r\n        password: userData.password\r\n      });\r\n    },\r\n    \r\n    async login({ commit, dispatch }, { username, password }) {\r\n      const formData = new FormData();\r\n      formData.append('username', username);\r\n      formData.append('password', password);\r\n      \r\n      const response = await fetch('http://localhost:8000/api/auth/token', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Login failed');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      const userResponse = await fetch('http://localhost:8000/api/auth/me', {\r\n        headers: { 'Authorization': `Bearer ${data.access_token}` }\r\n      });\r\n      \r\n      if (!userResponse.ok) {\r\n        throw new Error('Failed to get user information');\r\n      }\r\n      \r\n      const userData = await userResponse.json();\r\n      \r\n      commit('setAuth', {\r\n        token: data.access_token,\r\n        user: userData\r\n      });\r\n      \r\n      commit('setConversations', []);\r\n      commit('setCurrentConversation', null);\r\n      commit('setLoginNewConversation', true); // 로그인 후 새 대화창 플래그 설정\r\n      await dispatch('fetchConversations');\r\n      \r\n      return true;\r\n    },\r\n    \r\n    logout({ commit }) {\r\n      commit('clearAuth');\r\n      commit('setConversations', []);\r\n      commit('setCurrentConversation', null);\r\n      commit('setLoginNewConversation', false); // 로그아웃 시 플래그 리셋\r\n      \r\n      // OAuth 플래그 초기화\r\n      resetOAuthFlags();\r\n    },\r\n    \r\n    async fetchConversations({ commit, state }) {\r\n      try {\r\n        if (!state.isAuthenticated) {\r\n          commit('setConversations', []);\r\n          commit('setCurrentConversation', null);\r\n          return;\r\n        }\r\n        \r\n        // 올바른 JWT 토큰을 localStorage에서 가져와서 사용\r\n        const headers = {};\r\n        const jwtToken = localStorage.getItem('access_token');\r\n        if (jwtToken) {\r\n          headers['Authorization'] = `Bearer ${jwtToken}`;\r\n        }\r\n        \r\n        const response = await fetch('http://localhost:8000/api/conversations', {\r\n          headers,\r\n          credentials: 'include' // 쿠키 포함\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          if (response.status === 401) {\r\n            // 인증 오류인 경우 로그아웃 처리\r\n            commit('clearAuth');\r\n            return;\r\n          }\r\n          throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        // 디버깅: 메시지 데이터 확인\r\n        // console.log('📥 대화 목록 가져옴:', data.length, '개');\r\n        data.forEach(conv => {\r\n          // console.log(`📋 대화 ${conv.id}: ${conv.messages.length}개 메시지`);\r\n          conv.messages.forEach(() => {\r\n            // console.log(`  - 메시지 ${msg.id}: role=${msg.role}, ans 길이=${msg.ans ? msg.ans.length : 0}`);\r\n          });\r\n        });\r\n        \r\n        // 현재 선택된 대화 ID 저장 (store 또는 sessionStorage에서)\r\n        let currentConversationId = state.currentConversation ? state.currentConversation.id : null;\r\n        \r\n        // 새로고침 시 sessionStorage에서 대화 ID 복원\r\n        if (!currentConversationId) {\r\n          const savedConversationId = sessionStorage.getItem('currentConversationId');\r\n          if (savedConversationId) {\r\n            currentConversationId = parseInt(savedConversationId, 10);\r\n            // console.log('🔄 새로고침 - sessionStorage에서 대화 ID 복원:', currentConversationId);\r\n          }\r\n        }\r\n        \r\n        commit('setConversations', data);\r\n        \r\n        // 로그인 후 새 대화 플래그가 설정된 경우 자동 선택 방지\r\n        if (state.loginNewConversation) {\r\n          // 로그인 후에는 대화를 자동으로 선택하지 않음\r\n          commit('setCurrentConversation', null);\r\n          sessionStorage.removeItem('currentConversationId'); // 세션 스토리지 정리\r\n        } else {\r\n          // 현재 대화가 없거나 기존 선택한 대화가 있으면 해당 대화 유지\r\n          if (currentConversationId && data.length > 0) {\r\n            const existingConversation = data.find(c => c.id === currentConversationId);\r\n            if (existingConversation) {\r\n              // 현재 대화에 메시지가 있으면 보존 (랭그래프 완료 시 메시지 손실 방지)\r\n              if (state.currentConversation && state.currentConversation.messages && state.currentConversation.messages.length > 0) {\r\n                console.log('✅ 기존 메시지 보존:', state.currentConversation.messages.length, '개');\r\n                // 메시지를 보존하면서 대화 정보만 업데이트\r\n                const updatedConversation = {\r\n                  ...existingConversation,\r\n                  messages: state.currentConversation.messages // 기존 메시지 보존\r\n                };\r\n                commit('setCurrentConversation', updatedConversation);\r\n                console.log('✅ 대화 정보 업데이트 완료 (메시지 보존):', currentConversationId);\r\n              } else {\r\n                // 메시지가 없으면 그대로 설정\r\n                commit('setCurrentConversation', existingConversation);\r\n                console.log('✅ 기존 대화 복원 완료:', currentConversationId);\r\n              }\r\n            } else {\r\n              // 선택한 대화가 삭제된 경우 첫 번째 대화 선택\r\n              commit('setCurrentConversation', data[0]);\r\n              sessionStorage.setItem('currentConversationId', data[0].id);\r\n            }\r\n          } else if (!state.currentConversation && data.length > 0) {\r\n            commit('setCurrentConversation', data[0]);\r\n            sessionStorage.setItem('currentConversationId', data[0].id);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        commit('setConversations', []);\r\n      }\r\n    },\r\n    \r\n    async createConversation({ commit, state }) {\r\n      try {\r\n        // // console.log('[STORE] 새 대화 생성 시작...');\r\n        \r\n        if (!state.isAuthenticated) {\r\n          console.error('[STORE] 인증되지 않음 - 대화 생성 불가');\r\n          return null;\r\n        }\r\n        \r\n        // JWT 토큰 준비\r\n        const jwtToken = localStorage.getItem('access_token');\r\n        if (!jwtToken) {\r\n          console.error('[STORE] JWT 토큰 없음 - 대화 생성 불가');\r\n          return null;\r\n        }\r\n        \r\n        // 최적화된 요청 헤더\r\n        const headers = {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${jwtToken}`\r\n        };\r\n        \r\n        // API 호출 (타임아웃 설정으로 더 빠른 응답)\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5초 타임아웃\r\n        \r\n        const response = await fetch('http://localhost:8000/api/conversations', {\r\n          method: 'POST',\r\n          headers,\r\n          credentials: 'include',\r\n          signal: controller.signal\r\n        });\r\n        \r\n        clearTimeout(timeoutId);\r\n        \r\n        if (!response.ok) {\r\n          if (response.status === 401) {\r\n            console.error('[STORE] 인증 실패 - 로그아웃 처리');\r\n            commit('clearAuth');\r\n            return null;\r\n          }\r\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n        }\r\n        \r\n        const conversation = await response.json();\r\n        // // console.log('[STORE] 새 대화 생성 성공:', conversation.id);\r\n        \r\n        // 상태 업데이트\r\n        if (!Array.isArray(state.conversations)) {\r\n          commit('setConversations', []);\r\n        }\r\n        \r\n        commit('addConversation', conversation);\r\n        // // console.log('[STORE] 대화 목록에 추가 완료');\r\n        \r\n        return conversation;\r\n      } catch (error) {\r\n        if (error.name === 'AbortError') {\r\n          console.error('[STORE] 대화 생성 타임아웃');\r\n        } else {\r\n          console.error('[STORE] 대화 생성 오류:', error);\r\n        }\r\n        return null;\r\n      }\r\n    },\r\n    \r\n    async deleteConversation({ commit, state }, conversationId) {\r\n      try {\r\n        if (!state.isAuthenticated) return;\r\n        \r\n        const response = await fetch(`http://localhost:8000/api/conversations/${conversationId}`, {\r\n          method: 'DELETE',\r\n          headers: { 'Authorization': `Bearer ${localStorage.getItem('access_token')}` },\r\n          credentials: 'include' // 쿠키 포함\r\n        });\r\n        \r\n        // 401 에러인 경우 로그아웃 처리\r\n        if (response.status === 401) {\r\n          commit('clearAuth');\r\n          return;\r\n        }\r\n        \r\n        if (response.ok) {\r\n          commit('removeConversation', conversationId);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting conversation:', error);\r\n      }\r\n    },\r\n    \r\n    async sendMessage({ commit, state }, { text }) {\r\n      try {\r\n        if (!state.isAuthenticated) return;\r\n        \r\n        if (!state.currentConversation) {\r\n          console.error('⚠️ 메시지 전송 실패: 현재 대화가 없습니다.');\r\n          return;\r\n        }\r\n        \r\n        const response = await fetch(`http://localhost:8000/api/conversations/${state.currentConversation.id}/messages`, {\r\n          method: 'POST',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n          },\r\n          body: JSON.stringify({ \r\n            question: text\r\n          }),\r\n          credentials: 'include' // 쿠키 포함\r\n        });\r\n        \r\n        const data = await response.json();\r\n        \r\n        commit('addMessage', {\r\n          conversationId: state.currentConversation.id,\r\n          message: data.userMessage\r\n        });\r\n        \r\n        commit('addMessage', {\r\n          conversationId: state.currentConversation.id,\r\n          message: data.assistantMessage\r\n        });\r\n        \r\n        return data;\r\n      } catch (error) {\r\n        console.error('Error sending message:', error);\r\n      }\r\n    },\r\n    \r\n    async submitFeedback({ commit, state }, { messageId, feedback }) {\r\n      try {\r\n        if (!state.isAuthenticated) return;\r\n        \r\n        // 현재 메시지의 기존 피드백 상태 확인\r\n        const currentConversation = state.currentConversation;\r\n        if (!currentConversation) return;\r\n        \r\n        const message = currentConversation.messages.find(m => m.id === messageId);\r\n        if (!message) {\r\n          console.error('메시지를 찾을 수 없습니다:', messageId);\r\n          return;\r\n        }\r\n        \r\n        // 이제 모든 메시지는 영구 ID를 사용하므로 임시 ID 체크 제거\r\n        \r\n        // 토글 로직: 같은 피드백을 다시 클릭하면 null로 설정 (제거)\r\n        const newFeedback = message.feedback === feedback ? null : feedback;\r\n        const oldFeedback = message.feedback; // 롤백을 위해 기존값 저장\r\n        \r\n        // console.log('피드백 전송:', {\r\n        //   messageId,\r\n        //   feedback: newFeedback,\r\n        //   isTemporaryId\r\n        // });\r\n        \r\n        // Optimistic Update: API 호출 전에 먼저 UI 업데이트\r\n        commit('updateFeedback', {\r\n          conversationId: state.currentConversation.id,\r\n          messageId,\r\n          feedback: newFeedback\r\n        });\r\n        \r\n        // currentConversation의 메시지도 직접 업데이트 (즉시 반영)\r\n        const currentMessage = state.currentConversation.messages.find(m => m.id === messageId);\r\n        if (currentMessage) {\r\n          currentMessage.feedback = newFeedback;\r\n        }\r\n        \r\n        // 백엔드 API 요청 데이터 로깅\r\n        const requestData = { feedback: newFeedback };\r\n        \r\n        // 메시지에서 backend_id 추출 (우선순위: backend_id > messageId에서 -assistant 제거)\r\n        let cleanMessageId;\r\n        if (message.backend_id) {\r\n          cleanMessageId = message.backend_id;\r\n          console.log('✅ backend_id 사용:', cleanMessageId);\r\n        } else {\r\n          // fallback: messageId에서 -assistant 부분 제거\r\n          cleanMessageId = String(messageId).replace('-assistant', '');\r\n          console.log('⚠️ fallback ID 사용:', cleanMessageId);\r\n        }\r\n        \r\n        // 백엔드 ID가 숫자인지 확인\r\n        if (isNaN(cleanMessageId)) {\r\n          console.error('유효하지 않은 메시지 ID:', messageId, 'backend_id:', message.backend_id);\r\n          alert('메시지 ID가 유효하지 않습니다.');\r\n          return;\r\n        }\r\n        \r\n        const response = await fetch(`http://localhost:8000/api/messages/${cleanMessageId}/feedback`, {\r\n          method: 'POST',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n          },\r\n          body: JSON.stringify(requestData),\r\n          credentials: 'include' // 쿠키 포함\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          // API 호출 실패시 롤백\r\n          commit('updateFeedback', {\r\n            conversationId: state.currentConversation.id,\r\n            messageId,\r\n            feedback: oldFeedback\r\n          });\r\n          \r\n          // 401 에러인 경우 로그아웃 처리\r\n          if (response.status === 401) {\r\n            commit('clearAuth');\r\n            return;\r\n          }\r\n          \r\n          const errorText = await response.text();\r\n          let errorData;\r\n          try {\r\n            errorData = JSON.parse(errorText);\r\n          } catch (e) {\r\n            errorData = { detail: errorText };\r\n          }\r\n          \r\n          console.error('피드백 제출 실패:', {\r\n            status: response.status,\r\n            messageId: cleanMessageId,\r\n            originalMessageId: messageId,\r\n            backend_id: message.backend_id,\r\n            error: errorData.detail || errorText\r\n          });\r\n          \r\n          throw new Error(`Failed to submit feedback: ${errorData.detail || errorText}`);\r\n        }\r\n        \r\n        // 피드백 업데이트 성공 시 UI 트리거 증가 (즉시 반영)\r\n        console.log('✅ 피드백 업데이트 완료:', {\r\n          messageId,\r\n          feedback: newFeedback\r\n        });\r\n        \r\n\r\n        \r\n      } catch (error) {\r\n\r\n        // 네트워크 에러 등의 경우에만 에러 알림\r\n        if (!error.message.includes('세션이 만료')) {\r\n          alert(`피드백 전송 중 오류가 발생했습니다: ${error.message}`);\r\n        }\r\n      }\r\n    },\r\n    \r\n    // OpenAI API Key 관련 action 제거됨 - 서버 .env에서 관리\r\n    \r\n    async sendStreamingMessage({ commit, state }, { text }) {\r\n      try {\r\n        if (!state.isAuthenticated) return;\r\n        \r\n        if (!state.currentConversation) {\r\n          console.error('⚠️ 스트리밍 메시지 전송 실패: 현재 대화가 없습니다.');\r\n          return;\r\n        }\r\n        \r\n        const currentConversationId = state.currentConversation.id;\r\n        \r\n        // 1. 먼저 영구 message_id 발급\r\n        const prepareResponse = await fetch(`http://localhost:8000/api/conversations/${currentConversationId}/messages/prepare`, {\r\n          method: 'POST',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n          },\r\n          body: JSON.stringify({ \r\n            question: text,\r\n            conversation_id: currentConversationId\r\n          }),\r\n          credentials: 'include'\r\n        });\r\n        \r\n        if (!prepareResponse.ok) {\r\n          if (prepareResponse.status === 401) {\r\n            await this.dispatch('handleAuthError');\r\n            return;\r\n          }\r\n          throw new Error(`Prepare message failed: ${prepareResponse.status}`);\r\n        }\r\n        \r\n        const preparedData = await prepareResponse.json();\r\n        console.log('✅ 영구 메시지 ID 발급 완료:', preparedData);\r\n        \r\n        // 2. 영구 ID로 메시지 추가 (피드백 버튼 비활성화 상태)\r\n        const userMessage = {\r\n          id: `${preparedData.userMessage.id}-user`,\r\n          conversation_id: currentConversationId,\r\n          role: 'user',\r\n          question: text,\r\n          ans: '',\r\n          created_at: new Date().toISOString(),\r\n          backend_id: preparedData.userMessage.id\r\n        };\r\n        \r\n        commit('addMessage', {\r\n          conversationId: currentConversationId,\r\n          message: userMessage\r\n        });\r\n        \r\n        commit('setIsStreaming', true);\r\n        commit('clearStreamingMessage');\r\n        \r\n        // 에러 처리 개선을 위해 try-catch 사용\r\n        try {\r\n        const response = await fetch('http://localhost:8000/api/stream', {\r\n          method: 'POST',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n          },\r\n          body: JSON.stringify({ \r\n            question: text, \r\n\r\n            conversation_id: currentConversationId\r\n            }),\r\n            credentials: 'include' // CORS 인증 정보 전송\r\n        });\r\n          \r\n          if (!response.ok) {\r\n            // 401 에러인 경우 로그아웃 처리\r\n            if (response.status === 401) {\r\n              commit('setIsStreaming', false);\r\n              commit('clearAuth');\r\n              return;\r\n            }\r\n            throw new Error(`Server responded with ${response.status}: ${response.statusText}`);\r\n          }\r\n        \r\n        const reader = response.body.getReader();\r\n        const decoder = new TextDecoder();\r\n        let accumulatedMessage = '';\r\n        let imageUrl = null;\r\n        \r\n        let streamingActive = true;\r\n        while (streamingActive) {\r\n          const { value, done } = await reader.read();\r\n          if (done) {\r\n            streamingActive = false;\r\n            break;\r\n          }\r\n          \r\n          const chunk = decoder.decode(value);\r\n          const lines = chunk.split('\\n\\n');\r\n          \r\n          for (const line of lines) {\r\n            if (line.startsWith('data: ')) {\r\n              const content = line.substring(6);\r\n              \r\n              if (content === '[DONE]') {\r\n                streamingActive = false;\r\n                \r\n                // 3. 스트리밍 완료 시 메시지 내용 업데이트\r\n                try {\r\n                  const completeResponse = await fetch(`http://localhost:8000/api/messages/${preparedData.assistantMessage.id}/complete`, {\r\n                    method: 'PUT',\r\n                    headers: { \r\n                      'Content-Type': 'application/json',\r\n                      'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n                    },\r\n                    body: JSON.stringify({ \r\n                      assistant_response: accumulatedMessage,\r\n                      image_url: imageUrl\r\n                    }),\r\n                    credentials: 'include'\r\n                  });\r\n                  \r\n                  if (completeResponse.ok) {\r\n                    console.log('✅ 메시지 완료 처리 성공');\r\n                    \r\n                    // 프론트엔드에서도 메시지 내용 업데이트\r\n                    commit('updateMessageContent', {\r\n                      messageId: `${preparedData.assistantMessage.id}-assistant`,\r\n                      content: accumulatedMessage,\r\n                      image: imageUrl\r\n                    });\r\n                  } else {\r\n                    console.warn('⚠️ 메시지 완료 처리 실패:', completeResponse.status);\r\n                  }\r\n                } catch (completeError) {\r\n                  console.warn('⚠️ 메시지 완료 처리 오류:', completeError);\r\n                }\r\n                \r\n                break;\r\n              }\r\n              \r\n              try {\r\n                // 이미지 URL이 JSON 형식으로 전송된 경우 처리\r\n                const jsonData = JSON.parse(content);\r\n                if (jsonData.text) {\r\n                  accumulatedMessage += jsonData.text;\r\n                  commit('updateStreamingMessage', accumulatedMessage);\r\n                }\r\n                if (jsonData.image_url) {\r\n                  imageUrl = jsonData.image_url;\r\n                }\r\n              } catch (e) {\r\n                // JSON이 아닌 일반 텍스트인 경우\r\n                accumulatedMessage += content;\r\n                commit('updateStreamingMessage', accumulatedMessage);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        \r\n        // assistantMessage는 이미 영구 ID로 생성되었으므로 제거\r\n        \r\n          // 백엔드 저장 시도\r\n          try {\r\n        const saveResponse = await fetch(`http://localhost:8000/api/conversations/${currentConversationId}/messages/stream`, {\r\n          method: 'POST',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('access_token')}`\r\n          },\r\n          body: JSON.stringify({ \r\n            question: text, \r\n\r\n            assistant_response: accumulatedMessage,\r\n            image_url: imageUrl // 이미지 URL 추가\r\n              }),\r\n              credentials: 'include' // CORS 인증 정보 전송\r\n        });\r\n        \r\n        if (saveResponse.ok) {\r\n          const savedData = await saveResponse.json();\r\n\r\n          \r\n          // 실제 데이터베이스 ID로 메시지 업데이트\r\n          const conversation = state.conversations.find(c => c.id === currentConversationId);\r\n          if (conversation && conversation.messages) {\r\n            // User 메시지 ID 업데이트\r\n            const userMessageIndex = conversation.messages.findIndex(m => m.id === userMessage.id && m.role === 'user');\r\n            if (userMessageIndex !== -1) {\r\n              conversation.messages[userMessageIndex].id = savedData.userMessage.id;\r\n\r\n            }\r\n            \r\n            // Assistant 메시지는 사용하지 않으므로 제거됨\r\n          }\r\n        } else if (saveResponse.status === 401) {\r\n          // 401 에러인 경우 인증 에러 처리\r\n          await this.dispatch('handleAuthError');\r\n          return;\r\n        }\r\n          } catch (saveError) {\r\n            console.warn('Failed to save message to backend, but UI was updated:', saveError);\r\n            // UI는 이미 업데이트 되었으므로 사용자에게 에러를 표시하지 않음\r\n          }\r\n        \r\n        return { userMessage };\r\n        } catch (streamError) {\r\n          // 스트리밍 오류 발생 시에도 대화는 계속 되도록 처리\r\n          console.error('Streaming error:', streamError);\r\n          \r\n          // 스트리밍 실패 시 user 메시지의 ans 필드에 에러 메시지 추가\r\n          const userMessages = state.conversations.find(c => c.id === currentConversationId)?.messages?.filter(m => m.role === 'user') || [];\r\n          if (userMessages.length > 0) {\r\n            const lastUserMessage = userMessages[userMessages.length - 1];\r\n            lastUserMessage.ans = '죄송합니다. 메시지를 처리하는 중 오류가 발생했습니다. 다시 시도해 주세요.';\r\n          }\r\n          \r\n          \r\n          return { userMessage };\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in streaming message:', error);\r\n        commit('setIsStreaming', false);\r\n      }\r\n    },\r\n    \r\n  }\r\n});\r\n\r\n\r\n// store 생성 후에 쿠키에서 인증 정보 초기화\r\nsetTimeout(() => {\r\n  // 페이지 새로고침 시 SSO 완료 플래그 정리 (새로운 세션이므로)\r\n  const currentUrl = window.location.href;\r\n  if (!currentUrl.includes('id_token') && !currentUrl.includes('code=') && !currentUrl.includes('state=')) {\r\n    // OAuth 콜백이 아닌 일반 페이지 접근 시에만 플래그 정리\r\n    if (performance.navigation.type === performance.navigation.TYPE_RELOAD || \r\n        performance.navigation.type === performance.navigation.TYPE_NAVIGATE) {\r\n      // // console.log('[AUTH] 새로운 세션 시작 - OAuth 플래그 정리');\r\n      resetOAuthFlags();\r\n    }\r\n  }\r\n  \r\n  initializeAuthFromStorage();\r\n  \r\n  // OAuth 파라미터 확인 및 처리\r\n  if (checkAndProcessOAuthParams()) {\r\n    // OAuth 처리 시작\r\n  }\r\n}, 0);\r\n\r\n// OAuth 토큰 처리 중인지 확인하는 플래그\r\nlet isProcessingOAuth = false;\r\nlet hasProcessedOAuth = false; // OAuth 처리가 이미 완료되었는지 확인하는 플래그\r\n\r\n// OAuth 플래그 초기화 함수\r\nfunction resetOAuthFlags() {\r\n  isProcessingOAuth = false;\r\n  hasProcessedOAuth = false;\r\n  sessionStorage.removeItem('oauth_processing');\r\n  sessionStorage.removeItem('sso_processed');\r\n  // // console.log('[AUTH] OAuth 플래그 초기화됨');\r\n}\r\n\r\nconst requireAuth = (to, from, next) => {\r\n  // OAuth 콜백 경로인 경우 바로 통과\r\n  if (to.path === '/oauth_callback') {\r\n    next();\r\n    return;\r\n  }\r\n  \r\n  // OAuth 토큰 처리 중인 경우 제한된 시간만 대기\r\n  if (isProcessingOAuth) {\r\n    // OAuth 처리 완료를 기다림 (최대 3초로 단축)\r\n    let waitCount = 0;\r\n    const maxWait = 15; // 3초 (200ms * 15)\r\n    \r\n    const checkAuth = () => {\r\n      waitCount++;\r\n      \r\n      // 처리 완료되었거나 타임아웃된 경우\r\n      if (!isProcessingOAuth || waitCount >= maxWait) {\r\n        // 타임아웃된 경우 OAuth 플래그 강제 정리\r\n        if (waitCount >= maxWait) {\r\n          // // console.log('[AUTH] OAuth 처리 타임아웃 - 플래그 강제 정리');\r\n          isProcessingOAuth = false;\r\n          sessionStorage.removeItem('oauth_processing');\r\n        }\r\n        \r\n        // 인증 상태 확인\r\n        const storedToken = localStorage.getItem('access_token');\r\n        const storedUserInfo = localStorage.getItem('user_info');\r\n        \r\n        if (storedToken && storedUserInfo && store.state.isAuthenticated) {\r\n          // // console.log('[AUTH] 인증 확인됨 - 페이지 접근 허용');\r\n          next();\r\n        } else {\r\n          // // console.log('[AUTH] 인증 실패 - samsung SSO로 리다이렉트');\r\n          next(false); // 인증 실패 시 페이지 접근 차단\r\n          // samsung SSO로 리다이렉트\r\n          setTimeout(() => {\r\n            try {\r\n              window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n            } catch (error) {\r\n              try {\r\n                window.location.href = 'http://localhost:8000/api/auth/auth_sh';\r\n              } catch (error2) {\r\n                console.error('SSO 리다이렉트 실패:', error2);\r\n              }\r\n            }\r\n          }, 100);\r\n        }\r\n      } else {\r\n        setTimeout(checkAuth, 200); // 대기 간격을 200ms로 증가\r\n      }\r\n    };\r\n    checkAuth();\r\n    return;\r\n  }\r\n  \r\n  // 이미 인증된 경우 바로 통과 (store 상태 또는 localStorage 확인)\r\n  if (store.state.isAuthenticated && store.state.token) {\r\n    next();\r\n    return;\r\n  }\r\n  \r\n  // localStorage에서 토큰 확인 (store 상태와 동기화)\r\n  const storedToken = localStorage.getItem('access_token');\r\n  const storedUserInfo = localStorage.getItem('user_info');\r\n  \r\n  if (storedToken && storedUserInfo) {\r\n    try {\r\n      const userData = JSON.parse(storedUserInfo);\r\n      // store에 인증 정보 설정\r\n      store.commit('setAuth', {\r\n        token: storedToken,\r\n        user: userData\r\n      });\r\n      // // console.log('[AUTH] localStorage에서 인증 정보 복원됨');\r\n      next();\r\n      return;\r\n    } catch (error) {\r\n      console.error('Stored user info parsing error:', error);\r\n      // 파싱 실패 시 localStorage 정리\r\n      localStorage.removeItem('access_token');\r\n      localStorage.removeItem('user_info');\r\n    }\r\n  }\r\n  \r\n  // URL에 OAuth 파라미터가 있는 경우 처리 중으로 표시\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const token = urlParams.get('token');\r\n  const hash = window.location.hash;\r\n  \r\n  if (token || (hash && (hash.includes('id_token')))) {\r\n    isProcessingOAuth = true;\r\n    next();\r\n    return;\r\n  }\r\n  \r\n  // OAuth 처리 완료 확인\r\n  const hasProcessedOAuth = sessionStorage.getItem('sso_processed') === 'true';\r\n  const isOAuthProcessing = sessionStorage.getItem('oauth_processing') === 'true';\r\n  \r\n  if (hasProcessedOAuth || isOAuthProcessing) {\r\n    // OAuth 처리가 완료되었거나 진행 중인 경우\r\n    // // console.log('[AUTH] OAuth 처리 완료/진행 중 - 접근 허용');\r\n    \r\n    // localStorage에서 토큰 확인으로 인증 상태 판단\r\n    const storedToken = localStorage.getItem('access_token');\r\n    const storedUserInfo = localStorage.getItem('user_info');\r\n    \r\n    if (storedToken && storedUserInfo) {\r\n      // localStorage에 인증 정보가 있으면 접근 허용\r\n      // // console.log('[AUTH] localStorage에 인증 정보 있음 - 접근 허용');\r\n      \r\n      // store 상태도 동기화\r\n      try {\r\n        const userData = JSON.parse(storedUserInfo);\r\n        store.commit('setAuth', {\r\n          token: storedToken,\r\n          user: userData\r\n        });\r\n      } catch (error) {\r\n        console.error('User info parsing error:', error);\r\n      }\r\n      \r\n      next();\r\n      return;\r\n    } else {\r\n      // OAuth 처리 중이지만 아직 토큰이 없는 경우 제한된 시간만 대기\r\n      // // console.log('[AUTH] OAuth 처리 중 - 토큰 설정 대기');\r\n      let retryCount = 0;\r\n      const maxRetries = 6; // 최대 3초 대기 (500ms * 6)\r\n      \r\n      const checkAuthState = () => {\r\n        retryCount++;\r\n        const currentToken = localStorage.getItem('access_token');\r\n        const currentUserInfo = localStorage.getItem('user_info');\r\n        \r\n        if (currentToken && currentUserInfo) {\r\n          // // console.log('[AUTH] 토큰 설정 완료 - 접근 허용');\r\n          try {\r\n            const userData = JSON.parse(currentUserInfo);\r\n            store.commit('setAuth', {\r\n              token: currentToken,\r\n              user: userData\r\n            });\r\n          } catch (error) {\r\n            console.error('User info parsing error:', error);\r\n          }\r\n          next();\r\n        } else if (retryCount >= maxRetries) {\r\n          // // console.log('[AUTH] 토큰 설정 타임아웃 - OAuth 플래그 정리 후 리다이렉트');\r\n          // 타임아웃 시 OAuth 플래그 정리\r\n          sessionStorage.removeItem('oauth_processing');\r\n          sessionStorage.removeItem('sso_processed');\r\n          next(false);\r\n          // samsung SSO로 리다이렉트\r\n          setTimeout(() => {\r\n            try {\r\n              window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n            } catch (error) {\r\n              try {\r\n                window.location.href = 'http://localhost:8000/api/auth/auth_sh';\r\n              } catch (error2) {\r\n                console.error('SSO 리다이렉트 실패:', error2);\r\n              }\r\n            }\r\n          }, 100);\r\n        } else {\r\n          setTimeout(checkAuthState, 500);\r\n        }\r\n      };\r\n      \r\n      setTimeout(checkAuthState, 500);\r\n      return;\r\n    }\r\n  }\r\n  \r\n  // 인증되지 않은 경우 samsung SSO로 리다이렉트\r\n  // // console.log('[AUTH] 인증되지 않음 - SSO로 리다이렉트');\r\n  next(false);\r\n  \r\n  // samsung SSO로 리다이렉트\r\n  setTimeout(() => {\r\n    try {\r\n      window.location.replace('http://localhost:8000/api/auth/auth_sh');\r\n    } catch (error) {\r\n      try {\r\n        window.location.href = 'http://localhost:8000/api/auth/auth_sh';\r\n      } catch (error2) {\r\n        alert('로그인이 필요합니다. 수동으로 로그인 페이지로 이동해주세요.');\r\n      }\r\n    }\r\n  }, 100);\r\n};\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(),\r\n  routes: [\r\n    { \r\n      path: '/', \r\n      component: Home\r\n    },\r\n    { \r\n      path: '/history', \r\n      component: ChatHistory\r\n    },\r\n    { \r\n      path: '/admin', \r\n      component: Home\r\n    },\r\n    { \r\n      path: '/oauth_callback', \r\n      redirect: to => {\r\n        // Get hash from query string if available\r\n        const hash = to.hash || to.query.hash || window.location.hash;\r\n        if (hash) {\r\n          // Process OAuth callback in the app\r\n          const hashParams = new URLSearchParams(hash.substring(1));\r\n          const access_token = hashParams.get('access_token');\r\n          const id_token = hashParams.get('id_token');\r\n          \r\n          if (access_token && id_token) {\r\n            // Extract user info from token and log in\r\n            try {\r\n              const base64Url = id_token.split('.')[1];\r\n              const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n              const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\r\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n              }).join(''));\r\n              \r\n              const payload = JSON.parse(jsonPayload);\r\n              \r\n              // Set user info in store\r\n              const user = {\r\n                username: payload.name || \"User\",\r\n                mail: payload.email || \"\",\r\n                deptname: payload.deptname || \"\",\r\n                loginid: payload.sub,\r\n                id: payload.sub\r\n              };\r\n              \r\n              // 백엔드에서 인증 토큰 발급 받기\r\n              fetch('http://localhost:8000/api/auth/token', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                  username: user.username,\r\n                  id_token: id_token,\r\n                  // access_token 제거 - 백엔드에서 사용하지 않음\r\n                  is_sso: true\r\n                })\r\n              })\r\n              .then(response => {\r\n                if (!response.ok) {\r\n                  return response.json().then(errorData => {\r\n                    console.warn(\"Backend authentication failed:\", errorData);\r\n                    throw new Error(errorData.detail || 'Backend authentication failed');\r\n                  });\r\n                }\r\n                return response.json();\r\n              })\r\n                      .then(data => {\r\n          // 백엔드에서 제공하는 토큰과 사용자 정보로 인증 설정\r\n          const backendUser = data.user || user;\r\n          \r\n          // 토큰과 사용자 정보를 localStorage에 저장\r\n          // 백엔드 JWT 토큰만 사용하도록 설정\r\n          store.commit('setAuth', {\r\n            token: data.access_token,  // 백엔드 JWT 토큰\r\n            user: backendUser\r\n          });\r\n          \r\n          // localStorage에 JWT 토큰 저장 (API 요청용)\r\n          localStorage.setItem('access_token', data.access_token);\r\n          localStorage.setItem('user_info', JSON.stringify(backendUser));\r\n          \r\n          // // console.log('[AUTH] 백엔드 JWT 토큰 설정 완료:', {\r\n          //   token: data.access_token.substring(0, 20) + '...',\r\n          //   user: backendUser.username\r\n          // });\r\n        })\r\n                      .catch((error) => {\r\n          console.error('Backend authentication failed:', error);\r\n          // 백엔드 인증 실패 시 사용자에게 알림\r\n          alert('백엔드 인증에 실패했습니다. 다시 시도해주세요.');\r\n          // 인증 실패 시 상태만 정리\r\n          // // console.log('백엔드 인증 실패 - 상태 정리');\r\n        })\r\n              .finally(() => {\r\n                // 대화 초기화 시도\r\n                store.commit('setConversations', []);\r\n                store.commit('setCurrentConversation', null);\r\n                store.dispatch('fetchConversations')\r\n                  .catch(error => {\r\n                    console.error('대화 가져오기 실패:', error);\r\n                  })\r\n                  .finally(() => {\r\n                    // OAuth 처리 완료 후 인증 상태 확인\r\n                    isProcessingOAuth = false; // OAuth 처리 완료\r\n                    hasProcessedOAuth = true; // OAuth 처리 완료 플래그 설정\r\n                    \r\n                    // OAuth 처리 완료 플래그 설정\r\n                    sessionStorage.setItem('sso_processed', 'true');\r\n                    sessionStorage.removeItem('oauth_processing');\r\n                    \r\n                    // 인증 상태가 제대로 설정되었는지 확인\r\n                    if (store.state.isAuthenticated && localStorage.getItem('access_token')) {\r\n                      router.push('/');\r\n                    } else {\r\n                      try {\r\n                        // // console.log('인증 실패 - 상태만 정리');\r\n                      } catch (error) {\r\n                        try {\r\n                          // // console.log('OAuth 처리 실패 - 상태만 정리');\r\n                        } catch (error2) {\r\n                          // // console.log('OAuth 인증 실패 - 상태만 정리');\r\n                        }\r\n                      }\r\n                    }\r\n                  });\r\n              });\r\n            } catch (error) {\r\n              // console.error(\"OAuth Token Processing Error:\", error);\r\n              isProcessingOAuth = false; // 오류 시에도 플래그 초기화\r\n            }\r\n          }\r\n        }\r\n        \r\n        // After processing OAuth data, redirect to home\r\n        return '/';\r\n      }\r\n    }\r\n  ]\r\n});\r\n\r\n// Check for token in URL (from OAuth redirect)\r\nconst checkForAuthToken = () => {\r\n  // 로그아웃 직후인 경우 OAuth 처리 건너뛰기\r\n  const isLogoutRedirect = sessionStorage.getItem('logout_redirect') === 'true';\r\n  if (isLogoutRedirect) {\r\n    // // console.log('[AUTH] 로그아웃 직후 - OAuth 처리 건너뛰기');\r\n    sessionStorage.removeItem('logout_redirect'); // 플래그 정리\r\n    return;\r\n  }\r\n  \r\n  // 이미 OAuth 처리가 완료된 경우 중복 처리 방지\r\n  // // console.log('[AUTH] checkForAuthToken 시작:', {\r\n  //   hasProcessedOAuth,\r\n  //   isProcessingOAuth,\r\n  //   currentUrl: window.location.href\r\n  // });\r\n  \r\n  if (hasProcessedOAuth) {\r\n    // // console.log('[AUTH] OAuth 이미 처리됨, 중복 실행 방지');\r\n    return;\r\n  }\r\n  \r\n  // 기존 처리 중 플래그가 있는 경우 정리 (새로운 처리 시작)\r\n  if (sessionStorage.getItem('oauth_processing') === 'true') {\r\n    // // console.log('[AUTH] 기존 OAuth 처리 플래그 정리');\r\n    sessionStorage.removeItem('oauth_processing');\r\n  }\r\n  \r\n  // OAuth 처리 시작 표시\r\n  isProcessingOAuth = true;\r\n  \r\n  // 1. 쿼리 파라미터에서 토큰 확인 (일반 로그인)\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const token = urlParams.get('token');\r\n  \r\n  // 2. URL 해시에서 samsung OAuth 파라미터 확인 (백엔드로만 전송, 프론트엔드에서는 사용하지 않음)\r\n  if (window.location.hash) {\r\n    // URL 해시 파싱\r\n    const hashParams = new URLSearchParams(window.location.hash.substring(1));\r\n    const idToken = hashParams.get('id_token');\r\n    const state = hashParams.get('state');\r\n    \r\n    if (idToken && state) {\r\n      // OAuth 처리 시작을 즉시 알림\r\n      // // console.log('[AUTH] OAuth 파라미터 발견 - 처리 시작');\r\n      sessionStorage.setItem('oauth_processing', 'true');\r\n      sessionStorage.removeItem('sso_processed'); // 기존 완료 플래그 제거\r\n      \r\n      // 해시 제거\r\n      const url = new URL(window.location);\r\n      url.hash = '';\r\n      window.history.replaceState({}, document.title, url);\r\n      \r\n      processOAuthToken(idToken, state);\r\n      \r\n      // OAuth 처리 완료 표시\r\n      hasProcessedOAuth = true;\r\n      isProcessingOAuth = false;\r\n      return; // 함수 종료\r\n    }\r\n  }\r\n  \r\n  // 3. 일반 쿼리 파라미터 토큰 처리 (기존 로직)\r\n  if (token) {\r\n    // Clear URL parameters but keep the path\r\n    const url = new URL(window.location);\r\n    url.search = '';\r\n    window.history.replaceState({}, document.title, url);\r\n    \r\n    // Login with token (OAuth 처리가 완료되지 않은 경우에만)\r\n    if (!hasProcessedOAuth) {\r\n      store.dispatch('loginWithToken', token)\r\n        .then(() => {\r\n          hasProcessedOAuth = true;\r\n          isProcessingOAuth = false;\r\n          // // console.log('[AUTH] 토큰 로그인 완료, 홈으로 이동');\r\n          router.push('/');\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Auto-login failed:\", error);\r\n          isProcessingOAuth = false;\r\n          router.push('/login');\r\n        });\r\n    } else {\r\n      // // console.log('[AUTH] OAuth 이미 처리됨, 중복 실행 방지');\r\n      isProcessingOAuth = false;\r\n    }\r\n  } else {\r\n    // 토큰이 없는 경우 처리 완료\r\n    isProcessingOAuth = false;\r\n  }\r\n};\r\n\r\n// 전역 라우터 가드 추가\r\nrouter.beforeEach((to, from, next) => {\r\n  // OAuth 콜백 경로는 통과\r\n  if (to.path === '/oauth_callback') {\r\n    next();\r\n    return;\r\n  }\r\n  \r\n  // 인증이 필요한 경로들\r\n  const protectedRoutes = ['/', '/history', '/admin'];\r\n  if (protectedRoutes.includes(to.path)) {\r\n    requireAuth(to, from, next);\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n\r\n// Execute on app start\r\ncheckForAuthToken();\r\n\r\nconst app = createApp(App);\r\n\r\n// Vue 디버깅 설정 (앱 레벨)\r\nif (process.env.NODE_ENV === 'development') {\r\n  // Vue 앱 디버깅 활성화\r\n  app.config.devtools = true;\r\n  app.config.debug = true;\r\n  \r\n  // 성능 추적 활성화\r\n  app.config.performance = true;\r\n  \r\n  // 전역 에러 핸들러 (디버깅용)\r\n  app.config.errorHandler = (error, instance, info) => {\r\n    console.error('[Vue Error Handler]', error);\r\n    console.error('[Vue Error Info]', info);\r\n    console.error('[Vue Instance]', instance);\r\n  };\r\n  \r\n  // 전역 경고 핸들러 (디버깅용)\r\n  app.config.warnHandler = (msg, instance, trace) => {\r\n    console.warn('[Vue Warning]', msg);\r\n    console.warn('[Vue Trace]', trace);\r\n  };\r\n  \r\n  // console.log('[Vue Debug] Vue 앱 디버깅 설정 완료');\r\n}\r\n\r\napp.use(store);\r\napp.use(router);\r\n\r\n// 앱 마운트 후 디버깅 정보 출력\r\nconst mountedApp = app.mount('#app');\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  // 전역 Vue 인스턴스 접근 가능하도록 설정\r\n  window.__VUE_APP__ = mountedApp;\r\n  window.__VUE_STORE__ = store;\r\n  window.__VUE_ROUTER__ = router;\r\n  \r\n  // console.log('[Vue Debug] 전역 디버깅 객체 설정 완료');\r\n  // console.log('[Vue Debug] window.__VUE_APP__, window.__VUE_STORE__, window.__VUE_ROUTER__ 사용 가능');\r\n} \r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkllm_mini_frontend\"] = self[\"webpackChunkllm_mini_frontend\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], () => (__webpack_require__(518)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["judgeQuestionType","question","conversationId","conversationHistory","length","console","log","isFirstQuestion","questionType","apiEndpoint","reason","async","sendQuestionToAppropriateEndpoint","options","judgment","requestData","conversation_id","generate_image","generateImage","include_langgraph_context","langgraph_context","documents","filter","msg","langgraph_result","flatMap","slice","response","fetch","method","headers","localStorage","getItem","body","JSON","stringify","ok","Error","status","error","extractLangGraphContext","context","keywords","hasSearchResults","push","keyword","parse","Array","isArray","e","warn","Set","documentsCount","keywordsCount","updateUIForQuestionType","updateUI","showLangGraphProgress","showSearchResults","statusMessage","handleQuestionError","message","includes","fallback","class","key","xmlns","viewBox","fill","stroke","_createElementBlock","_normalizeClass","$data","isSidebarCollapsed","_createElementVNode","_hoisted_1","_hoisted_2","onClick","_cache","args","$options","newConversation","d","toggleSidebar","x1","y1","x2","y2","_hoisted_3","_createVNode","_TransitionGroup","name","default","_withCtx","_Fragment","_renderList","_ctx","$store","state","conversations","conversation","id","created_at","active","currentConversation","$event","selectConversation","_hoisted_5","_toDisplayString","getConversationIcon","icon_type","_hoisted_6","getConversationTitle","_hoisted_7","_withModifiers","deleteConversation","points","_hoisted_8","_hoisted_4","_","_hoisted_9","_hoisted_10","handleUserProfileClick","_hoisted_11","currentUser","username","_hoisted_12","charAt","toUpperCase","_hoisted_13","cx","cy","r","isUserPopupOpen","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","email","_hoisted_19","deptname","_hoisted_20","href","target","rel","style","onclick","_createTextVNode","logout","_createCommentVNode","_component_router_view","Component","_Transition","mode","_createBlock","_resolveDynamicComponent","showApiKeyModal","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","for","type","apiKeyInput","placeholder","apiKeyError","_hoisted_25","apiKeySet","_hoisted_26","_hoisted_27","saveApiKey","disabled","trim","startsWith","_hoisted_28","showLlamaApiModal","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","llamaApiKeyInput","_hoisted_33","llamaApiBaseInput","_hoisted_34","llamaApiEndpointInput","_hoisted_35","saveLlamaApiSettings","_hoisted_36","data","isDarkMode","computed","this","user","isUserAuthenticated","jwtToken","isAuthenticated","watch","handler","deep","immediate","methods","toggleDarkMode","setItem","commit","Date","now","event","preventDefault","stopPropagation","apiError","dispatch","sessionStorage","removeItem","setTimeout","window","location","replace","error2","result","success","confirm","validateAuthToken","credentials","_conversationsFetched","text","json","conversationWithMessages","messages","messageCount","errorText","statusText","apiKey","apiBase","undefined","adjustTextareaHeight","textarea","$refs","inputField","height","newHeight","Math","min","scrollHeight","title","iconType","iconMap","formatDate","dateString","date","toDateString","toLocaleTimeString","hour","minute","toLocaleDateString","month","day","closeDropdowns","closest","enableCopying","allowEvent","document","addEventListener","capture","passive","ctrlKey","metaKey","classList","add","handleSSOCallback","urlParams","URLSearchParams","search","token","get","details","url","URL","history","replaceState","mail","loginid","$router","currentRoute","value","path","code","processOAuthFromHash","hash","hashParams","substring","idToken","requestBody","encodeURIComponent","then","responseText","$forceUpdate","parseError","catch","processOAuthFromQuery","checkAuthCookies","getCookie","cookie","parts","split","pop","shift","accessToken","userInfoCookie","ssoProcessed","decodedUserInfo","decodeURIComponent","userInfo","created","currentHash","currentUrlParams","hasOAuthInHash","hasOAuthInQuery","hasAuthCookies","hasToken","userData","isLogoutRedirect","hasProcessedOAuth","isProcessingOAuth","hasLocalAuth","mounted","focus","llamaApiKey","llamaApiBase","llamaApiEndpoint","matchMedia","matches","beforeUnmount","removeEventListener","__exports__","render","ref","_component_LanggraphContainer","$setup","langgraph","showLanggraph","currentStep","originalInput","augmentedKeywords","isSearching","searchResults","searchedDocuments","hasSearchCompleted","isGeneratingAnswer","finalAnswer","streamingAnswer","isStreamingAnswer","analysisImageUrl","imageLoadFailed","failedImageUrl","lastImageUrl","onOpenSearchResult","openSearchResultPopup","onOpenImageInNewTab","openImageInNewTab","_createStaticVNode","_component_MessageList","currentMessages","isStreaming","streamingMessage","sse","streamingVisible","scroll","lastMessageHeight","onSubmitFeedback","submitFeedback","_component_ChatInput","isLoading","onSendMessage","sendChatMessage","onInputChange","handleInputChange","_component_SearchResultPopup","show","showSearchResultPopup","selectedSearchResult","onClose","closeSearchResultPopup","$props","closePopup","res_payload","document_name","res_score","score","toFixed","vector","summary_result","summary","getImageUrls","image_url","analysis_image_url","imageUrl","index","src","getFullImageUrl","alt","onError","handleImageError","onLoad","handleImageLoad","imageLoading","imageError","props","Boolean","Object","$emit","payloadVector","payloadRoot","direct","analysis","incoming","processedUrls","map","extractedUrl","join","fullUrl","newVal","category","docTitle","_hoisted_37","innerHTML","formatAnswer","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_normalizeStyle","width","progressPercentage","_hoisted_55","Number","String","emits","oldVal","formattedText","tableRegex","match","lines","tableHtml","forEach","line","cells","cell","role","feedback","ans","feedbackUpdateTrigger","messageFeedbackStates","isMessageStreaming","getFeedbackButtonTitle","states","newValue","getMessageFeedback","messageId","find","m","messageExists","trigger","isIncomplete","feedbackType","currentFeedback","toggleTo","userInput","onKeydown","_withKeys","handleEnterKey","rows","onInput","shiftKey","clearInput","focusInput","$nextTick","useLanggraph","langGraphError","extractedKeywords","extractedDbSearchTitle","isDoneProcessed","lastRestoredConversationId","lastRestoredMessageCount","isNewConversation","isRestoringConversation","isFirstQuestionInSession","isFollowupQuestion","isLanggraphJustCompleted","resetLanggraph","resetLanggraphState","categorizeKeyword","keywordLower","toLowerCase","categories","useMessages","store","useStore","isCreatingConversation","isSavingMessage","saveStatus","alert","useSSE","executeLangGraphWithSSE","inputText","homeInstance","controller","AbortController","sseController","inputPreview","signal","reader","getReader","decoder","TextDecoder","buffer","lastLoggedGeneratorId","processEventsFromBuffer","boundaryIndex","indexOf","rawEvent","dataPayload","trimStart","parsedData","generatorId","generator_id","stage","node","node_name","hasResult","heartbeat","handleSSEMessage","done","read","remaining","decode","shouldStop","chunk","stream","bufferLength","useScroll","scrollThrottled","scrollTimeout","lastScrollPosition","observer","scrollPending","scrollToBottom","chatMessagesRef","requestAnimationFrame","scrollEl","scrollTop","scrollToLanggraph","LanggraphContainer","querySelector","scrollIntoView","behavior","block","scrollToLanggraphBottom","chatContainer","preserveScrollPosition","restoreScrollPosition","safeFocus","inputFieldRef","logSSEDebugInfo","nodeName","eventType","timestamp","time","groupLabel","groupCollapsed","keys","groupEnd","handleDoneMessage","handleStageA","handleStageB","handleStageC","handleStageD","handleStageE","handleTestMessage","handleErrorMessage","answerToAdd","hasAnswer","answerLength","hasConversation","currentMessageCount","userMessages","lastUserMessage","messageData","answer","candidates_total","saveResult","saveLangGraphMessage","search_results","document_titles","content","errorMessage","random","toISOString","executeLanggraphFlow","permanentMessageId","prepareMessageForLangGraph","userMessage","backend_id","fallbackLanggraphFlow","q_mode","db_contents","image","message_id","endpoint","eventData","streamDone","newlineIndex","rawLine","trimEnd","dataPortion","payload","fallbackAnswer","saveFallbackMessage","executeAdditionalQuestionFlow","prepareResponse","preparedData","assistantResponse","contentType","isEventStream","streamClosed","processBuffer","dataLines","Uint8Array","chunkText","completeResponse","assistant_response","completeError","errorUserMessage","executeAdditionalQuestionFlowWrapper","restoreLanggraphFromConversation","langgraphMessage","keywordData","dbContents","doc","hasAns","ansLength","currentFinalAnswer","currentFinalAnswerLength","finalAnswerSet","ansValue","hasOriginalInput","hasFinalAnswer","finalAnswerLength","hasAugmentedKeywords","extractImageUrl","source","candidate","final_answer","dbSearchTitleData","item","langGraphState","db_contents_list","idx","vector_data","image_url_value","payloadImage","vectorImage","rank","db_content","combined_score","relevance_score","res_relevance","summary_purpose","summary_fb","res_id","db_contents_json","assistant_response_length","db_search_title","db_contents_length","skip_llm","user_name","responseData","conversationTitle","titleUpdateResponse","titleError","components","SearchResultPopup","MessageList","ChatInput","setup","isPopupChanging","mapState","chatInput","messageText","chatMessages","currentMessage","refreshToken","access_token","open","fallbackError","loginNewConversation","updated","conversationRestored","streamingText","ResizeObserver","observe","disconnect","newMessages","beforeDestroy","clearTimeout","processOAuthToken","pathname","userid","router","getStoredToken","getStoredUserInfo","reload","redirectError","checkAndProcessOAuthParams","authSuccess","parseUserInfo","rawUser","jsonError","parsedUser","params","param","normalizeUserData","normalizedId","user_id","sub","normalizedEmail","normalizedUsername","loginId","normalizedLoginId","normalizedDept","department","dept","storedUser","initialToken","initialUser","initializeAuthFromStorage","createStore","llamaApiSet","llamaApiError","shouldScrollToBottom","mutations","setConversations","addConversation","unshift","setNewConversationTrigger","_newConversationTrigger","removeConversation","c","updateConversationTitle","setCurrentConversation","toString","_conversationUpdateTrigger","addMessage","addMessageToCurrentConversation","updateMessageAnswer","updateMessageId","tempId","realId","additionalData","assign","updateMessageContent","updateFeedback","messageIndex","findIndex","updatedMessage","splice","currentMessageIndex","currentConversationId","setApiKeyError","setAuth","header","atob","alg","normalizedUser","previousUserId","newUserId","userChanged","setUser","clearAuth","setIsStreaming","updateStreamingMessage","clearStreamingMessage","addStreamingMessageToConversation","setShouldScrollToBottom","setConversationRestored","setLoginNewConversation","actions","handleAuthError","register","errorData","detail","password","login","formData","FormData","append","userResponse","resetOAuthFlags","fetchConversations","conv","savedConversationId","parseInt","existingConversation","updatedConversation","createConversation","timeoutId","abort","sendMessage","assistantMessage","newFeedback","oldFeedback","cleanMessageId","isNaN","originalMessageId","sendStreamingMessage","accumulatedMessage","streamingActive","jsonData","saveResponse","savedData","userMessageIndex","saveError","streamError","currentUrl","performance","navigation","TYPE_RELOAD","TYPE_NAVIGATE","requireAuth","to","from","next","waitCount","maxWait","checkAuth","storedToken","storedUserInfo","isOAuthProcessing","retryCount","maxRetries","checkAuthState","currentToken","currentUserInfo","createRouter","createWebHistory","routes","component","Home","ChatHistory","redirect","query","id_token","base64Url","base64","jsonPayload","charCodeAt","is_sso","backendUser","finally","checkForAuthToken","beforeEach","protectedRoutes","app","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}